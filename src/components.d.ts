/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { WebChart } from "@arcgis/charts-spec";
import { COMMON_METRICS } from "@esri/telemetry-reporting-client";
export namespace Components {
    /**
     * Simple component to get and store identity as state
     * Avoids drill-through props
     */
    interface ArcgisIdentity {
        "apiUrl": string;
        "token": string;
    }
    interface CedarChart {
        /**
          * ArcGIS Cedar Config
         */
        "cedar": any;
        /**
          * URL to an ArcGIS Cedar Config
         */
        "cedarUrl": string;
        /**
          * Optional Chart title
         */
        "chartTitle": string;
        /**
          * ArcGIS Charts Config
         */
        "config": WebChart;
        /**
          * URL to an ArcGIS Charts config
         */
        "configUrl": string;
        /**
          * Optional inline data override to cedar This is a FeatureSet, for cedar If a general array is used, it will need to drop 'attributes'
         */
        "data": any;
    }
    interface CedarTable {
        "data": any;
    }
    interface CedarTelemetryReport {
        /**
          * URL to cedar config for this metric. Optional TODO: provide interal lookup
         */
        "cedarUrl": string;
        /**
          * Chart Title
         */
        "chartTitle": string;
        /**
          * End date as ISO-8601 sting. Default to today.
         */
        "endDate": string;
        /**
          * Which metric to fetch: page-views:count, ...
         */
        "metric": COMMON_METRICS;
        /**
          * Which contentId or hostname to get metrics
         */
        "scope": string;
        /**
          * Start date as ISO-8601 string. Default to 30 days ago
         */
        "startDate": string;
    }
}
declare global {
    /**
     * Simple component to get and store identity as state
     * Avoids drill-through props
     */
    interface HTMLArcgisIdentityElement extends Components.ArcgisIdentity, HTMLStencilElement {
    }
    var HTMLArcgisIdentityElement: {
        prototype: HTMLArcgisIdentityElement;
        new (): HTMLArcgisIdentityElement;
    };
    interface HTMLCedarChartElement extends Components.CedarChart, HTMLStencilElement {
    }
    var HTMLCedarChartElement: {
        prototype: HTMLCedarChartElement;
        new (): HTMLCedarChartElement;
    };
    interface HTMLCedarTableElement extends Components.CedarTable, HTMLStencilElement {
    }
    var HTMLCedarTableElement: {
        prototype: HTMLCedarTableElement;
        new (): HTMLCedarTableElement;
    };
    interface HTMLCedarTelemetryReportElement extends Components.CedarTelemetryReport, HTMLStencilElement {
    }
    var HTMLCedarTelemetryReportElement: {
        prototype: HTMLCedarTelemetryReportElement;
        new (): HTMLCedarTelemetryReportElement;
    };
    interface HTMLElementTagNameMap {
        "arcgis-identity": HTMLArcgisIdentityElement;
        "cedar-chart": HTMLCedarChartElement;
        "cedar-table": HTMLCedarTableElement;
        "cedar-telemetry-report": HTMLCedarTelemetryReportElement;
    }
}
declare namespace LocalJSX {
    /**
     * Simple component to get and store identity as state
     * Avoids drill-through props
     */
    interface ArcgisIdentity {
        "apiUrl"?: string;
        "token"?: string;
    }
    interface CedarChart {
        /**
          * ArcGIS Cedar Config
         */
        "cedar"?: any;
        /**
          * URL to an ArcGIS Cedar Config
         */
        "cedarUrl"?: string;
        /**
          * Optional Chart title
         */
        "chartTitle"?: string;
        /**
          * ArcGIS Charts Config
         */
        "config"?: WebChart;
        /**
          * URL to an ArcGIS Charts config
         */
        "configUrl"?: string;
        /**
          * Optional inline data override to cedar This is a FeatureSet, for cedar If a general array is used, it will need to drop 'attributes'
         */
        "data"?: any;
    }
    interface CedarTable {
        "data"?: any;
    }
    interface CedarTelemetryReport {
        /**
          * URL to cedar config for this metric. Optional TODO: provide interal lookup
         */
        "cedarUrl"?: string;
        /**
          * Chart Title
         */
        "chartTitle"?: string;
        /**
          * End date as ISO-8601 sting. Default to today.
         */
        "endDate"?: string;
        /**
          * Which metric to fetch: page-views:count, ...
         */
        "metric"?: COMMON_METRICS;
        /**
          * Which contentId or hostname to get metrics
         */
        "scope"?: string;
        /**
          * Start date as ISO-8601 string. Default to 30 days ago
         */
        "startDate"?: string;
    }
    interface IntrinsicElements {
        "arcgis-identity": ArcgisIdentity;
        "cedar-chart": CedarChart;
        "cedar-table": CedarTable;
        "cedar-telemetry-report": CedarTelemetryReport;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Simple component to get and store identity as state
             * Avoids drill-through props
             */
            "arcgis-identity": LocalJSX.ArcgisIdentity & JSXBase.HTMLAttributes<HTMLArcgisIdentityElement>;
            "cedar-chart": LocalJSX.CedarChart & JSXBase.HTMLAttributes<HTMLCedarChartElement>;
            "cedar-table": LocalJSX.CedarTable & JSXBase.HTMLAttributes<HTMLCedarTableElement>;
            "cedar-telemetry-report": LocalJSX.CedarTelemetryReport & JSXBase.HTMLAttributes<HTMLCedarTelemetryReportElement>;
        }
    }
}
