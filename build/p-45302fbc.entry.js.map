{"version":3,"names":["arcgisChartsHistogramCss","ArcGISChartsHistogram","constructor","hostRef","this","skipNextUpdate","noRenderProps","dataUpdateNeededProps","updatedProps","Set","config","undefined","inlineData","actionMode","legendPosition","legendVisibility","view","layer","selectionData","returnSelectionOIDs","returnSelectionIndexes","filterBySelection","noDataOptions","displayErrorAlert","disableInteractions","queueChartCreation","useAnimatedCharts","hideLicenceWatermark","enableResponsiveFeatures","autoDisposeChart","placeholder","selectionTheme","tooltipFormatter","dataLabelFormatter","guideTooltipFormatter","xAxisLabelFormatter","yAxisLabelFormatter","disableTogglingLegendItems","hideLoaderAnimation","runtimeDataFilters","usePopupTemplateFieldsInfo","showNotifyPanel","handleChartOutputDataChange","event","arcgisChartsDataProcessComplete","emit","detail","handleLegendItemVisibilityChanged","arcgisChartsLegendItemVisibilityChange","handleUpdateCompleted","arcgisChartsUpdateComplete","handleSeriesColorsChange","arcgisChartsSeriesColorChange","handleAxesMinMaxChange","arcgisChartsAxesMinMaxChange","handleSelection","arcgisChartsSelectionComplete","handleAlertClosed","target","el","async","newView","oldView","addExtentChangeListener","refresh","addLayerListeners","legendPositionChange","newLegendPosition","updateLegendPosition","legendVisibilityChange","newLegendVisibility","updateLegendVisibility","filterBySelectionChanged","resetAxesBounds","message","heading","options","chart","notify","Promise","resolve","errorMessage","notifyHeading","strings","errorHeading","notifyMessage","notifyOptions","kind","autoClose","active","resetZoom","switchSelection","clearSelection","props","_a","_b","_c","_d","_e","_f","updateData","updateExtent","viewExtentUpdated","dataUpdateIsNeeded","axes","minimum","maximum","componentDidUpdate","componentShouldUpdate","args","propName","add","shouldUpdate","includes","fetchComponentLocaleStrings","getAssetPath","debouncedChartUpdate","fastq.promise","Array","from","dataUpdateNeeded","some","updatedProp","clear","update","newChartConfig","updateOptions","gatherComponentOptions","component","dataUpdated","updateGlobalOptions","gatherComponentGlobalOptions","maximumNumberOfSimultaneousUpdates","chartRef","createChartInstance","chartCreationProcessing","validateSeriesType","WebChartTypes","HistogramSeries","dataSource","isValidDataSource","push","e","name","ErrorKeywords","ChartDisposed","dispose","innerHTML","errorAlert","QueryFeaturesError","arcgisChartsDataProcessError","details","removeLayerListeners","removeExtentChangeListener","render","notifyPanel","h","ArcgisChartsNotifyPanel","chartStyles","notifyStyles","Host","Slot","actionBar","class","ref","layerFilterListener","addLayerFilterListener","layerRendererListener","addLayerRendererListener","extentChangeListener","remove","checkForIncompatibleChartVersion","chartVersion","version","getChartVersionInfo","versionStatus","WebChartVersionStatus","Newer","incompatibleChartVersion","title","formatMessage","firstCreation","createChart","chartContainer","chartConfig","globalOptions","assetsDirs"],"sources":["./node_modules/@arcgis/charts-components/dist/collection/components/arcgis-charts-histogram/arcgis-charts-histogram.css?tag=arcgis-charts-histogram&encapsulation=shadow","./node_modules/@arcgis/charts-components/dist/collection/components/arcgis-charts-histogram/arcgis-charts-histogram.js"],"sourcesContent":[".hide {\n  display: none;\n}\n\n.show {\n  display: block;\n}\n\n.notifyPanel {\n  flex: 0 1 auto;\n}\n\n.histogramSeries {\n  flex-grow: 1;\n  overflow-y: hidden;\n}\n.histogramSeries > div {\n  justify-content: center;\n  align-items: center;\n}\n.histogramSeries .arcgis-charts-modal-inside {\n  padding: 1em;\n  padding-left: 0;\n}\n.histogramSeries .arcgis-charts-modal-inside ol {\n  padding-left: 2em;\n}\n.histogramSeries .arcgis-charts-modal-curtain {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 2001;\n  background-color: white;\n  opacity: 0.5;\n  opacity: 1;\n}\n.histogramSeries .arcgis-charts-modal-content {\n  background: rgba(255, 255, 255, 0.8);\n  color: black;\n  display: inline-block;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  max-width: 90%;\n  max-height: 90%;\n  overflow: auto;\n  z-index: 2002;\n  position: absolute;\n  max-width: 90%;\n  max-height: 90%;\n  width: auto !important;\n  height: auto !important;\n  margin: auto !important;\n  inset: auto !important;\n  left: auto !important;\n  top: auto !important;\n}\n.histogramSeries .arcgis-charts-modal-header {\n  display: block;\n  width: 100%;\n  min-height: 1.8em;\n  background: rgba(0, 0, 0, 0.05);\n}\n.histogramSeries .arcgis-charts-modal-close {\n  display: block;\n  position: absolute;\n  top: 0.3em;\n  right: 0.3em;\n  background: url(\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=\") center center/80% no-repeat rgba(100, 100, 100, 0.1);\n  width: 1.2em;\n  height: 1.2em;\n  cursor: pointer;\n}\n.histogramSeries .arcgis-charts-modal-title {\n  font-weight: bold;\n  font-size: 110%;\n  padding: 0.5em 1.2em 0.5em 1em;\n}\n\n:host {\n  width: var(--arcgis-charts-histogram-width, var(--arcgis-charts-default-width));\n  height: var(--arcgis-charts-histogram-height, var(--arcgis-charts-default-height));\n  display: flex;\n  flex-direction: row;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See LICENSE.md for details.\n * v1.0.0-beta.532\n */\nimport { h, Host, getAssetPath } from \"@stencil/core\";\nimport { WebChartTypes, WebChartVersionStatus } from \"@arcgis/charts-spec\";\nimport { createChart } from \"@arcgis/charts-js\";\nimport { fetchComponentLocaleStrings, ErrorKeywords, validateSeriesType, getChartVersionInfo, formatMessage } from \"@arcgis/charts-shared-utils\";\nimport * as fastq from \"fastq\";\nimport { Slot } from \"../../interfaces\";\nimport { gatherComponentGlobalOptions, updateLegendPosition, updateLegendVisibility, isValidDataSource, resetAxesBounds, gatherComponentOptions } from \"../../utils/config-update\";\nimport { ArcgisChartsNotifyPanel } from \"../functional/ArcgisChartsNotifyPanel\";\nimport { addLayerFilterListener, addLayerRendererListener, addExtentChangeListener } from \"../../utils/watch-handlers\";\nimport { maximumNumberOfSimultaneousUpdates } from \"../../utils/interfaces\";\n/**\n * @slot action-bar - A slot for adding arcgis-charts-action-bar component or calcite-action-bar.\n */\nexport class ArcGISChartsHistogram {\n  constructor() {\n    /**\n     * Property to be used to skip the next round of update\n     * @category Private\n     */\n    this.skipNextUpdate = false;\n    /**\n     * List of props which should not trigger a render when changed\n     * @category Private\n     */\n    this.noRenderProps = [\"legendPosition\", \"legendVisibility\", \"view\"];\n    /**\n     * List of props which should trigger a data update\n     * @category Private\n     */\n    this.dataUpdateNeededProps = [\"forceDataUpdate\", \"runtimeDataFilters\", \"inlineData\", \"returnFeaturesExtent\"];\n    /**\n     * List of all the properties updated since the last update. Useful when multiple properties are updated\n     * within the same time frame, while some of them require some extra logic to be applied.\n     * @category Private\n     */\n    this.updatedProps = new Set();\n    this.config = undefined;\n    this.inlineData = undefined;\n    this.actionMode = undefined;\n    this.legendPosition = undefined;\n    this.legendVisibility = undefined;\n    this.view = undefined;\n    this.layer = undefined;\n    this.selectionData = undefined;\n    this.returnSelectionOIDs = undefined;\n    this.returnSelectionIndexes = undefined;\n    this.filterBySelection = undefined;\n    this.noDataOptions = undefined;\n    this.displayErrorAlert = true;\n    this.disableInteractions = undefined;\n    this.queueChartCreation = undefined;\n    this.useAnimatedCharts = undefined;\n    this.hideLicenceWatermark = undefined;\n    this.enableResponsiveFeatures = undefined;\n    this.autoDisposeChart = undefined;\n    this.placeholder = undefined;\n    this.selectionTheme = undefined;\n    this.tooltipFormatter = undefined;\n    this.dataLabelFormatter = undefined;\n    this.guideTooltipFormatter = undefined;\n    this.xAxisLabelFormatter = undefined;\n    this.yAxisLabelFormatter = undefined;\n    this.disableTogglingLegendItems = undefined;\n    this.hideLoaderAnimation = undefined;\n    this.runtimeDataFilters = undefined;\n    this.usePopupTemplateFieldsInfo = undefined;\n    this.showNotifyPanel = false;\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart data has been processed\n   * emitting an event carrying the data\n   * @param event The event carrying the chart data processed by the core\n   * @category Custom-event handler\n   */\n  handleChartOutputDataChange(event) {\n    this.arcgisChartsDataProcessComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating a legend item visibility has been changed\n   * Emitting an event carrying the item id and its new visibility\n   * @param event The event carrying the item id and its new visibility\n   * @category Custom-event handler\n   */\n  handleLegendItemVisibilityChanged(event) {\n    this.arcgisChartsLegendItemVisibilityChange.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating a chart is updated\n   * @param event The event carrying the ValidationStatus\n   * @category Custom-event handler\n   */\n  handleUpdateCompleted(event) {\n    this.arcgisChartsUpdateComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart series color\n   * have been assigned\n   * @param event The event carrying the series colors\n   * @category Custom-event handler\n   */\n  handleSeriesColorsChange(event) {\n    this.arcgisChartsSeriesColorChange.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart axes\n   * min and max values have been computed\n   * @param event The event carrying the axes min and max\n   * @category Custom-event handler\n   */\n  handleAxesMinMaxChange(event) {\n    this.arcgisChartsAxesMinMaxChange.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container\n   * on selection of one or multiple columns\n   * @param event The event carrying the selected elements\n   * @category Custom-event handler\n   */\n  handleSelection(event) {\n    this.arcgisChartsSelectionComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the closure of a calcite-alert.\n   * The handler helps keeping in sync the boolean `showNotifyPanel` with the panel's state.\n   * @param event\n   * @category Custom-event handler\n   */\n  handleAlertClosed(event) {\n    // If the calcite-alert (notify panel) from this component is getting closed, we flag it\n    if (event.target === this.el) {\n      // we don't want the component to re-render so we skip the next update\n      this.skipNextUpdate = true;\n      this.showNotifyPanel = false;\n    }\n  }\n  /**\n   * Called every time the view prop is updated.\n   * Add a listener to it to keep the chart in sync.\n   * @category Watch handler\n   */\n  async viewChange(newView, oldView) {\n    await this.addExtentChangeListener();\n    // The \"view\" property is flagged as a non-render prop to avoid an unnecessary update when the\n    // view is assigned to the component (the update will happen through the view listeners), so we\n    // only need to explicitly ask for a refresh when the view is removed from the component\n    if (oldView !== undefined && newView === undefined) {\n      await this.refresh();\n    }\n  }\n  /**\n   * Called every time the layer prop is updated.\n   * Adds listeners to it to keep the chart in sync.\n   * @category Watch handler\n   */\n  async layerChange() {\n    await this.addLayerListeners();\n  }\n  /**\n   * Called every time the position of the legend is updated\n   * @param newLegendPosition The new position of the legend\n   * @category Watch handler\n   */\n  legendPositionChange(newLegendPosition) {\n    this.config = updateLegendPosition(newLegendPosition, this.config);\n  }\n  /**\n   * Called every time the visibility of the legend is updated\n   * @param newLegendVisibility The new visibility of the legend\n   * @category Watch handler\n   */\n  legendVisibilityChange(newLegendVisibility) {\n    this.config = updateLegendVisibility(newLegendVisibility, this.config);\n  }\n  /**\n   * Called every time the filter by selection is updated.\n   * Resets the axes min/max.\n   * @category Watch handler\n   */\n  filterBySelectionChanged() {\n    this.config = resetAxesBounds(this.config);\n  }\n  /**\n   * Notify method allows passing external messages to the chart component.\n   * It can be used to pass validation or information messages.\n   * In a situation where a config update is overriding your notification modal,\n   * consider waiting for the `arcgisChartsUpdateComplete` event.\n   * @category Public\n   */\n  async notify(message, heading, options) {\n    if (this.chart !== undefined) {\n      this.chart.notify(message, heading, options);\n    }\n    return Promise.resolve(undefined);\n  }\n  /**\n   * Triggers an alert to display an error message.\n   * @category Public\n   * @param errorMessage\n   */\n  async errorAlert(errorMessage) {\n    if (this.displayErrorAlert !== false) {\n      this.notifyHeading = this.strings.errorHeading;\n      this.notifyMessage = errorMessage;\n      this.notifyOptions = {\n        kind: \"danger\",\n        autoClose: true,\n        active: true\n      };\n      this.showNotifyPanel = true;\n    }\n  }\n  /**\n   * Resets the chart zoom to bring it back to full extent\n   * @category Public\n   */\n  async resetZoom() {\n    if (this.chart !== undefined)\n      this.chart.resetZoom();\n    return Promise.resolve(undefined);\n  }\n  /**\n   * Switches the selection on the chart.\n   * @category Public\n   */\n  async switchSelection() {\n    // for now we don't allow the switch selection when the filter by selection is on\n    if (this.chart !== undefined && this.filterBySelection !== true)\n      await this.chart.switchSelection();\n  }\n  /**\n   * Clears all selection on the chart.\n   * @category Public\n   */\n  async clearSelection() {\n    if (this.chart !== undefined) {\n      this.chart.clearSelection();\n      // to handle the full data reset we call the componentDidUpdate to trigger a chart update\n      if (this.filterBySelection === true) {\n        await this.refresh();\n      }\n    }\n  }\n  /**\n   * Re-render the chart.\n   * @param props.updateData Indicates whether to fetch new data. Default: true.\n   * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.\n   * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.\n   * @category Public\n   */\n  async refresh(props) {\n    var _a, _b, _c, _d, _e, _f;\n    const { updateData = true, resetAxesBounds = false, updateExtent = false } = props !== null && props !== void 0 ? props : {};\n    ;\n    this.viewExtentUpdated = updateExtent;\n    if (updateData === true)\n      this.dataUpdateIsNeeded();\n    // Resetting the axes bounds\n    if (resetAxesBounds === true) {\n      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.axes) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? true : delete _c.minimum;\n      (_f = (_e = (_d = this.config) === null || _d === void 0 ? void 0 : _d.axes) === null || _e === void 0 ? void 0 : _e[1]) === null || _f === void 0 ? true : delete _f.maximum;\n    }\n    await this.componentDidUpdate();\n    // reset the boolean for the next update \n    this.viewExtentUpdated = false;\n  }\n  /**\n   * Prevents render for noRenderProps\n   * @category Lifecycle\n   */\n  componentShouldUpdate(...args) {\n    const [, , propName] = args;\n    // Flagging the property. This list will be used when the chart update is actually called.\n    this.updatedProps.add(propName);\n    const shouldUpdate = this.skipNextUpdate === false && this.noRenderProps.includes(propName) === false;\n    this.skipNextUpdate = false;\n    return shouldUpdate;\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentWillLoad() {\n    ({ strings: this.strings } = await fetchComponentLocaleStrings(this.el, getAssetPath(`.`)));\n    // We define the function that will be called to update the chart. We use the external library fastq to queue the updates\n    // to make sure only one update is executed at a time\n    this.debouncedChartUpdate = fastq.promise(async () => {\n      if (this.chart !== undefined) {\n        const updatedProps = Array.from(this.updatedProps);\n        // if one of the properties updated require a data update, we flag it\n        // multiple properties can be updated within the same time frame, which will trigger only one Stencil lifecycle\n        const dataUpdateNeeded = updatedProps.some((updatedProp) => this.dataUpdateNeededProps.includes(updatedProp));\n        // clearing the list for the next update\n        this.updatedProps.clear();\n        return await this.chart.update({\n          newChartConfig: this.config,\n          updateOptions: gatherComponentOptions({ component: this, dataUpdated: dataUpdateNeeded, viewExtentUpdated: this.viewExtentUpdated }),\n          updateGlobalOptions: gatherComponentGlobalOptions(this)\n        });\n      }\n    }, maximumNumberOfSimultaneousUpdates);\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentDidLoad() {\n    if (this.chartRef !== undefined) {\n      await this.createChartInstance();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentDidUpdate() {\n    var _a;\n    // If this.chartCreationProcessing is still running we need to wait for it to be done before updating the chart\n    if (this.chart === undefined && this.chartCreationProcessing !== undefined) {\n      await this.chartCreationProcessing;\n      this.chartCreationProcessing = undefined;\n    }\n    // Controlling the series type to display a console error if the type is not the expected one\n    // We still proceed to the update to let the config validator deal with the invalid config\n    await validateSeriesType([WebChartTypes.HistogramSeries], this.config);\n    if (this.config !== undefined && this.chart !== undefined && this.showNotifyPanel === false) {\n      try {\n        const dataSource = (_a = this.config) === null || _a === void 0 ? void 0 : _a.dataSource;\n        // Calling for the chart update if the data source is valid and the debounce function exists\n        if (isValidDataSource(this.inlineData, dataSource) && this.debouncedChartUpdate !== undefined) {\n          await this.debouncedChartUpdate.push({});\n        }\n      }\n      catch (e) {\n        if (this.chartRef !== undefined && this.config !== undefined) {\n          if (e.name === ErrorKeywords.ChartDisposed) {\n            this.chart.dispose();\n            this.chart = undefined;\n            this.chartRef.innerHTML = \"\";\n            await this.createChartInstance(false);\n          }\n          else {\n            this.errorAlert(e === null || e === void 0 ? void 0 : e.message);\n            if (e.name === ErrorKeywords.QueryFeaturesError) {\n              // sending an event if a query failed.\n              // We don't automatically recreate the chart in that scenario as it would lead to the same result.\n              this.arcgisChartsDataProcessError.emit(e.details);\n            }\n          }\n        }\n      }\n    }\n    else if (this.chart === undefined &&\n      this.chartCreationProcessing === undefined &&\n      this.showNotifyPanel === false) {\n      await this.createChartInstance();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  async disconnectedCallback() {\n    if (this.chart !== undefined) {\n      this.removeLayerListeners();\n      this.removeExtentChangeListener();\n      this.chart.dispose();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  render() {\n    var _a;\n    const notifyPanel = this.showNotifyPanel === true ? (h(ArcgisChartsNotifyPanel, { heading: this.notifyHeading, message: this.notifyMessage, options: this.notifyOptions })) : null;\n    // TODO: implement stronger way to know when to keep the chart visible\n    const chartStyles = this.showNotifyPanel === true && ((_a = this.notifyOptions) === null || _a === void 0 ? void 0 : _a.kind) === \"danger\"\n      ? \"hide\"\n      : `${WebChartTypes.HistogramSeries} show`;\n    const notifyStyles = this.showNotifyPanel === true ? \"show notifyPanel\" : \"hide\";\n    return (h(Host, null, h(\"slot\", { name: Slot.actionBar }), h(\"div\", { class: chartStyles, ref: (el) => {\n        this.chartRef = el;\n      } }), h(\"div\", { class: notifyStyles }, notifyPanel)));\n  }\n  /**\n   * Util function that can be used to trigger a data update next time the chart is updated\n   * @category Private\n   */\n  dataUpdateIsNeeded() {\n    this.updatedProps.add(\"forceDataUpdate\");\n  }\n  /**\n   * Adds the listener to listen to the layer definitionExpression and renderer changes\n   * @category Private\n   */\n  async addLayerListeners() {\n    // removing existing listeners before adding new ones\n    this.removeLayerListeners();\n    this.layerFilterListener = await addLayerFilterListener({\n      layer: this.layer,\n      component: this\n    });\n    this.layerRendererListener = await addLayerRendererListener({\n      layer: this.layer,\n      component: this\n    });\n  }\n  /**\n   * Adds a listener to listen to the view's extent change\n   * @category Private\n   */\n  async addExtentChangeListener() {\n    // removing existing listeners before adding new ones\n    this.removeExtentChangeListener();\n    this.extentChangeListener = await addExtentChangeListener({\n      view: this.view,\n      layer: this.layer,\n      component: this\n    });\n  }\n  /**\n   * Removes the listeners added to listen to the layer definitionExpression and renderer changes\n   * @category Private\n   */\n  removeLayerListeners() {\n    if (this.layerFilterListener !== undefined)\n      this.layerFilterListener.remove();\n    if (this.layerRendererListener !== undefined)\n      this.layerRendererListener.remove();\n  }\n  /**\n   * Removes the listener added to listen to the view's extent change\n   * @category Private\n   */\n  removeExtentChangeListener() {\n    if (this.extentChangeListener !== undefined)\n      this.extentChangeListener.remove();\n  }\n  /**\n   * If the chart config version is newer than the current one, display a message in a popup.\n   * @category Private\n   */\n  checkForIncompatibleChartVersion() {\n    var _a;\n    const chartVersion = (_a = this.config) === null || _a === void 0 ? void 0 : _a.version;\n    if (this.displayErrorAlert !== false && getChartVersionInfo(chartVersion).versionStatus === WebChartVersionStatus.Newer) {\n      this.notifyHeading = this.strings.incompatibleChartVersion.title;\n      this.notifyMessage = formatMessage(this.strings.incompatibleChartVersion.message, {\n        chartVersion: chartVersion !== null && chartVersion !== void 0 ? chartVersion : \"\"\n      });\n      this.notifyOptions = {\n        kind: \"warning\",\n        autoClose: true,\n        active: true\n      };\n      this.showNotifyPanel = true;\n    }\n  }\n  /**\n   * creates arcgis chart instance\n   * @param firstCreation Indicates whether it's the first time the component is created\n   * @category Private\n   */\n  async createChartInstance(firstCreation = true) {\n    var _a, _b;\n    // Controlling the series type to display a console error if the type is not the expected one\n    // We still proceed to the creation to let the config validator deal with the invalid config\n    await validateSeriesType([WebChartTypes.HistogramSeries], this.config);\n    this.checkForIncompatibleChartVersion();\n    this.updatedProps.clear();\n    try {\n      const dataSource = (_a = this.config) === null || _a === void 0 ? void 0 : _a.dataSource;\n      if (isValidDataSource(this.inlineData, dataSource)) {\n        this.chartCreationProcessing = createChart({\n          chartContainer: this.chartRef,\n          chartConfig: this.config,\n          options: gatherComponentOptions({ component: this }),\n          globalOptions: gatherComponentGlobalOptions(this)\n        });\n      }\n      this.chart = await this.chartCreationProcessing;\n      this.chartCreationProcessing = undefined;\n      // after creating the chart we add listeners on the feature layer and view\n      // only adding them if it's the first component creation. `createChartInstance()` can be called\n      // when an update failed, and in that case we don't need to add again the listeners given the view\n      // or layer didn't change\n      if (firstCreation === true) {\n        await this.addLayerListeners();\n        await this.addExtentChangeListener();\n      }\n    }\n    catch (e) {\n      // sending an event if a query failed\n      if (e.name === ErrorKeywords.QueryFeaturesError) {\n        this.arcgisChartsDataProcessError.emit(e.details);\n      }\n      // displaying the error\n      this.errorAlert(e === null || e === void 0 ? void 0 : e.message);\n      // disposing the chart\n      (_b = this.chart) === null || _b === void 0 ? void 0 : _b.dispose();\n      this.chartCreationProcessing = undefined;\n      this.chart = undefined;\n    }\n  }\n  static get is() { return \"arcgis-charts-histogram\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"arcgis-charts-histogram.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"arcgis-charts-histogram.css\"]\n    };\n  }\n  static get assetsDirs() { return [\"t9n\"]; }\n  static get properties() {\n    return {\n      \"config\": {\n        \"type\": \"unknown\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"WebChart | WebMapWebChart\",\n          \"resolved\": \"WebChart | WebMapWebChart | undefined\",\n          \"references\": {\n            \"WebChart\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            },\n            \"WebMapWebChart\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"ArcGIS Web Chart Specification that defines the chart component\\nWhen the `config` prop is updated, it closes the modal opened via `notify` method.\"\n        }\n      },\n      \"inlineData\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"InlineData<WebChartHistogramDataItem>\",\n          \"resolved\": \"InlineData<WebChartHistogramDataItem> | undefined\",\n          \"references\": {\n            \"InlineData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            },\n            \"WebChartHistogramDataItem\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used for specifying inline data (raw or processed) for the chart\"\n        }\n      },\n      \"actionMode\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ActionModes\",\n          \"resolved\": \"\\\"monoSelection\\\" | \\\"multiSelection\\\" | \\\"multiSelectionWithCtrlKey\\\" | \\\"none\\\" | \\\"zoom\\\" | undefined\",\n          \"references\": {\n            \"ActionModes\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Defines the cursor behavior on the chart (zoom, selection...)\"\n        },\n        \"attribute\": \"action-mode\",\n        \"reflect\": false\n      },\n      \"legendPosition\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"WebChartLegendPositions\",\n          \"resolved\": \"\\\"bottom\\\" | \\\"left\\\" | \\\"right\\\" | \\\"top\\\"\",\n          \"references\": {\n            \"WebChartLegendPositions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used by the legend position change action.\"\n        },\n        \"attribute\": \"legend-position\",\n        \"reflect\": false\n      },\n      \"legendVisibility\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used by the legend visibility change action.\"\n        },\n        \"attribute\": \"legend-visibility\",\n        \"reflect\": false\n      },\n      \"view\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"__esri.MapView | __esri.SceneView\",\n          \"resolved\": \"MapView | SceneView | undefined\",\n          \"references\": {\n            \"___esri\": {\n              \"location\": \"global\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to access to the FeatureLayerView instance in order to perform client-side queries.\"\n        }\n      },\n      \"layer\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"__esri.FeatureLayer | __esri.FeatureLayerView\",\n          \"resolved\": \"FeatureLayer | FeatureLayerView | undefined\",\n          \"references\": {\n            \"___esri\": {\n              \"location\": \"global\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to perform queries.\\nIf the layer is a FeatureLayerView or if the FeatureLayer and the `view` property are both provided, the queries will be executed client-side.\"\n        }\n      },\n      \"selectionData\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"SelectionData\",\n          \"resolved\": \"SelectionData | undefined\",\n          \"references\": {\n            \"SelectionData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"When this property is set it will apply a selection on the chart matching the provided selection.\"\n        }\n      },\n      \"returnSelectionOIDs\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"true\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates if the object ids need to be computed whenever a selection is made on or passed to the chart.\\nOnly considered for a data source using a feature layer.\"\n        },\n        \"attribute\": \"return-selection-o-i-ds\",\n        \"reflect\": false\n      },\n      \"returnSelectionIndexes\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates if the selection indexes need to be computed whenever a selection is made on or passed to the chart.\"\n        },\n        \"attribute\": \"return-selection-indexes\",\n        \"reflect\": false\n      },\n      \"filterBySelection\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Filters all chart elements based on selection.\"\n        },\n        \"attribute\": \"filter-by-selection\",\n        \"reflect\": false\n      },\n      \"noDataOptions\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"NoDataOptions\",\n          \"resolved\": \"NoDataOptions | undefined\",\n          \"references\": {\n            \"NoDataOptions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to set the chart's behavior when its data set is empty\"\n        }\n      },\n      \"displayErrorAlert\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"true\"\n            }],\n          \"text\": \"Whether to display an error alert and hide the chart when it can't be created or updated.\"\n        },\n        \"attribute\": \"display-error-alert\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"disableInteractions\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Boolean to disable all interactions on the chart.\"\n        },\n        \"attribute\": \"disable-interactions\",\n        \"reflect\": true\n      },\n      \"queueChartCreation\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To ensure that charts are built one by one. True by default\"\n        },\n        \"attribute\": \"queue-chart-creation\",\n        \"reflect\": true\n      },\n      \"useAnimatedCharts\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To activate the animations on the chart. False by default\"\n        },\n        \"attribute\": \"use-animated-charts\",\n        \"reflect\": true\n      },\n      \"hideLicenceWatermark\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To hide the licence watermark. False by default\"\n        },\n        \"attribute\": \"hide-licence-watermark\",\n        \"reflect\": true\n      },\n      \"enableResponsiveFeatures\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To enable the responsive features. True by default\"\n        },\n        \"attribute\": \"enable-responsive-features\",\n        \"reflect\": true\n      },\n      \"autoDisposeChart\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To auto-dispose a chart if a new one is created in the same container. False by default\"\n        },\n        \"attribute\": \"auto-dispose-chart\",\n        \"reflect\": true\n      },\n      \"placeholder\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"It is a string that provides a brief hint to the user to indicate needed information to create a chart.\"\n        },\n        \"attribute\": \"placeholder\",\n        \"reflect\": false\n      },\n      \"selectionTheme\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"SelectionTheme\",\n          \"resolved\": \"SelectionTheme | undefined\",\n          \"references\": {\n            \"SelectionTheme\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to provide a customized theme for the selected and non selected elements.\\nIf no style is provided for the selected elements, a default selection is applied.\\nIf no style is provided for the non selected elements, the chart's style is applied.\"\n        }\n      },\n      \"tooltipFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"HistogramLabelFormatCallback\",\n          \"resolved\": \"((count: number, binMinValue: number, binMaxValue: number) => string) | undefined\",\n          \"references\": {\n            \"HistogramLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"dataLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"HistogramLabelFormatCallback\",\n          \"resolved\": \"((count: number, binMinValue: number, binMaxValue: number) => string) | undefined\",\n          \"references\": {\n            \"HistogramLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"guideTooltipFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"GuideTooltipFormatCallback\",\n          \"resolved\": \"((props: GuideTooltipFormatCallbackProps) => string) | undefined\",\n          \"references\": {\n            \"GuideTooltipFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"xAxisLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AxisLabelFormatCallback\",\n          \"resolved\": \"((value: string | number | Date) => string) | undefined\",\n          \"references\": {\n            \"AxisLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"yAxisLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AxisLabelFormatCallback\",\n          \"resolved\": \"((value: string | number | Date) => string) | undefined\",\n          \"references\": {\n            \"AxisLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"disableTogglingLegendItems\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Used to disable the toggling overlays via the legend items.\"\n        },\n        \"attribute\": \"disable-toggling-legend-items\",\n        \"reflect\": false\n      },\n      \"hideLoaderAnimation\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Used to hide the loader animation (curtain and spinner), showed by default at every update.\"\n        },\n        \"attribute\": \"hide-loader-animation\",\n        \"reflect\": false\n      },\n      \"runtimeDataFilters\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"WebChartDataFilters\",\n          \"resolved\": \"undefined | { geometry?: IPoint | IPolyline | IPolygon | IPolygonWithCurves | IEnvelope | IExtent | undefined; timeExtent?: [number, number] | undefined; gdbVersion?: string | undefined; distance?: number | undefined; units?: RESTUnits | undefined; where?: string | undefined; }\",\n          \"references\": {\n            \"WebChartDataFilters\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to apply runtime filters to the chart's data while in Feature Layer mode.\"\n        }\n      },\n      \"usePopupTemplateFieldsInfo\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Can be set to true to read the fields from layer.popupTemplate and use their alias when rendering tooltips\"\n        },\n        \"attribute\": \"use-popup-template-fields-info\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"showNotifyPanel\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"arcgisChartsDataProcessError\",\n        \"name\": \"arcgisChartsDataProcessError\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered when an error occurred while fetching of processing the data for the chart\"\n        },\n        \"complexType\": {\n          \"original\": \"any\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"arcgisChartsDataProcessComplete\",\n        \"name\": \"arcgisChartsDataProcessComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart data is received from the core\"\n        },\n        \"complexType\": {\n          \"original\": \"WebChartHistogramDataItem\",\n          \"resolved\": \"WebChartHistogramDataItem\",\n          \"references\": {\n            \"WebChartHistogramDataItem\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsLegendItemVisibilityChange\",\n        \"name\": \"arcgisChartsLegendItemVisibilityChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once a legend item visibility has been changed\"\n        },\n        \"complexType\": {\n          \"original\": \"LegendItemVisibility\",\n          \"resolved\": \"LegendItemVisibility\",\n          \"references\": {\n            \"LegendItemVisibility\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsUpdateComplete\",\n        \"name\": \"arcgisChartsUpdateComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart is updated\"\n        },\n        \"complexType\": {\n          \"original\": \"ValidationStatus\",\n          \"resolved\": \"ValidationStatus\",\n          \"references\": {\n            \"ValidationStatus\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsSeriesColorChange\",\n        \"name\": \"arcgisChartsSeriesColorChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart series color have been assigned\"\n        },\n        \"complexType\": {\n          \"original\": \"SeriesSymbolsMap\",\n          \"resolved\": \"Map<number, SeriesSymbols | undefined>\",\n          \"references\": {\n            \"SeriesSymbolsMap\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsAxesMinMaxChange\",\n        \"name\": \"arcgisChartsAxesMinMaxChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart axes min/max values are computed\"\n        },\n        \"complexType\": {\n          \"original\": \"CalculatedMinMaxBoundsPayload[]\",\n          \"resolved\": \"CalculatedMinMaxBoundsPayload[]\",\n          \"references\": {\n            \"CalculatedMinMaxBoundsPayload\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsSelectionComplete\",\n        \"name\": \"arcgisChartsSelectionComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a bar\"\n        },\n        \"complexType\": {\n          \"original\": \"SelectionData\",\n          \"resolved\": \"SelectionData\",\n          \"references\": {\n            \"SelectionData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"notify\": {\n        \"complexType\": {\n          \"signature\": \"(message?: string, heading?: string, options?: NotifyOptions) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"NotifyOptions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Notify method allows passing external messages to the chart component.\\nIt can be used to pass validation or information messages.\\nIn a situation where a config update is overriding your notification modal,\\nconsider waiting for the `arcgisChartsUpdateComplete` event.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"errorAlert\": {\n        \"complexType\": {\n          \"signature\": \"(errorMessage?: string) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"errorMessage\"\n                }],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Triggers an alert to display an error message.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"errorMessage\"\n            }]\n        }\n      },\n      \"resetZoom\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Resets the chart zoom to bring it back to full extent\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"switchSelection\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Switches the selection on the chart.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"clearSelection\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Clears all selection on the chart.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"refresh\": {\n        \"complexType\": {\n          \"signature\": \"(props?: { updateData?: boolean | undefined; resetAxesBounds?: boolean | undefined; updateExtent?: boolean | undefined; } | undefined) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Re-render the chart.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"props.updateData Indicates whether to fetch new data. Default: true.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"props.updateExtent Indicates whether the view's extent is to update. Default: false.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"props.resetAxesBounds Option to reset the axes bounds along with the refresh.\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"view\",\n        \"methodName\": \"viewChange\"\n      }, {\n        \"propName\": \"layer\",\n        \"methodName\": \"layerChange\"\n      }, {\n        \"propName\": \"legendPosition\",\n        \"methodName\": \"legendPositionChange\"\n      }, {\n        \"propName\": \"legendVisibility\",\n        \"methodName\": \"legendVisibilityChange\"\n      }, {\n        \"propName\": \"filterBySelection\",\n        \"methodName\": \"filterBySelectionChanged\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"arcgisChartsJSDataProcessComplete\",\n        \"method\": \"handleChartOutputDataChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSLegendItemVisibilityChange\",\n        \"method\": \"handleLegendItemVisibilityChanged\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSUpdateComplete\",\n        \"method\": \"handleUpdateCompleted\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSSeriesColorChange\",\n        \"method\": \"handleSeriesColorsChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSAxesMinMaxChange\",\n        \"method\": \"handleAxesMinMaxChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSSelectionComplete\",\n        \"method\": \"handleSelection\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"calciteAlertClose\",\n        \"method\": \"handleAlertClosed\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\n"],"mappings":"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"}