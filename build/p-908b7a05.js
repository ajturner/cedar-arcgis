import{c as t,fO as s,fP as i,fQ as e,fR as h,fS as n,fT as r}from"./p-98455486.js";import{u as o,E as u,e as l,T as c,a,R as f,o as d}from"./p-7099a764.js";import{n as p}from"./p-0c70c0e2.js";import{A as b,F as m,V as g,C as x,X as w,B as y,G as _,U as T,t as v,n as D,M as z}from"./p-13e550f5.js";const S=t.getLogger("esri.views.webgl.BufferObject");class E{static createIndex(t,s,i){return new E(t,b.ELEMENT_ARRAY_BUFFER,s,i)}static createVertex(t,s,i){return new E(t,b.ARRAY_BUFFER,s,i)}static createUniform(t,s,i){if(t.type!==p.WEBGL2)throw new Error("Uniform buffers are supported in WebGL2 only!");return new E(t,b.UNIFORM_BUFFER,s,i)}static createPixelPack(t,s=m.STREAM_READ,i){if(t.type!==p.WEBGL2)throw new Error("Pixel pack buffers are supported in WebGL2 only!");const e=new E(t,b.PIXEL_PACK_BUFFER,s);return i&&e.setSize(i),e}static createPixelUnpack(t,s=m.STREAM_DRAW,i){if(t.type!==p.WEBGL2)throw new Error("Pixel unpack buffers are supported in WebGL2 only!");return new E(t,b.PIXEL_UNPACK_BUFFER,s,i)}constructor(t,s,i,e){this._context=t,this.bufferType=s,this.usage=i,this._glName=null,this._size=-1,this._indexType=void 0,t.instanceCounter.increment(g.BufferObject,this),this._glName=this._context.gl.createBuffer(),o(this._context.gl),e&&this.setData(e)}get glName(){return this._glName}get size(){return this._size}get indexType(){return this._indexType}get byteLength(){return this.bufferType===b.ELEMENT_ARRAY_BUFFER?this._indexType===x.UNSIGNED_INT?4*this._size:2*this._size:this._size}get _isVAOAware(){return this.bufferType===b.ELEMENT_ARRAY_BUFFER||this.bufferType===b.ARRAY_BUFFER}dispose(){if(this._context?.gl){if(this._glName){this._context.gl.deleteBuffer(this._glName),this._glName=null}this._context.instanceCounter.decrement(g.BufferObject,this),this._context=s()}else this._glName&&S.warn("Leaked WebGL buffer object")}setSize(t,s=null){if(t<=0&&S.error("Buffer size needs to be positive!"),this.bufferType===b.ELEMENT_ARRAY_BUFFER&&null!=s)switch(this._indexType=s,s){case x.UNSIGNED_SHORT:t*=2;break;case x.UNSIGNED_INT:t*=4}this._setBufferData(t)}setData(t){if(!t)return;let s=t.byteLength;this.bufferType===b.ELEMENT_ARRAY_BUFFER&&(i(t)&&(s/=2,this._indexType=x.UNSIGNED_SHORT),e(t)&&(s/=4,this._indexType=x.UNSIGNED_INT)),this._setBufferData(s,t)}_setBufferData(t,s=null){this._size=t;const i=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const e=this._context.gl;null!=s?e.bufferData(this.bufferType,s,this.usage):e.bufferData(this.bufferType,t,this.usage),o(e),this._isVAOAware&&this._context.bindVAO(i)}setSubData(t,s,i,e){if(!t)return;(s<0||s*t.BYTES_PER_ELEMENT>=this.byteLength)&&S.error("offset is out of range!"),i>=e&&S.error("end must be bigger than start!"),(s+(e-i))*t.BYTES_PER_ELEMENT>this.byteLength&&S.error("An attempt to write beyond the end of the buffer!");const h=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const n=this._context.gl;if(this._context.type===p.WEBGL2)n.bufferSubData(this.bufferType,s*t.BYTES_PER_ELEMENT,t,i,e-i);else{const h=0===i&&e===t.length?t:t.subarray(i,e);n.bufferSubData(this.bufferType,s*t.BYTES_PER_ELEMENT,h)}o(n),this._isVAOAware&&this._context.bindVAO(h)}getSubData(t,s=0,i,e){if(this._context.type!==p.WEBGL2)return void S.error("Get buffer subdata is supported in WebGL2 only!");if(i<0||e<0)return void S.error("Problem getting subdata: offset and length were less than zero!");const h=L(t)?t.BYTES_PER_ELEMENT:1;if(h*((i??0)+(e??0))>t.byteLength)return void S.error("Problem getting subdata: offset and length exceeded destination size!");s+h*(e??0)>this.byteLength&&S.warn("Potential problem getting subdata: requested data exceeds buffer size!");const n=this._context.gl;this._context.bindBuffer(this,b.COPY_READ_BUFFER),n.getBufferSubData(b.COPY_READ_BUFFER,s,t,i,e),this._context.unbindBuffer(b.COPY_READ_BUFFER)}async getSubDataAsync(t,s=0,i,e){this._context.type===p.WEBGL2?(await this._context.clientWaitAsync(),this.getSubData(t,s,i,e)):S.error("Get buffer subdata is supported in WebGL2 only!")}}function L(t){return h(t)}class B{constructor(t,s,i=s){this.internalFormat=t,this.width=s,this.height=i,this.multisampled=!1,this.samples=1}}function A(t){return t.width<=0||t.height<=0||null==t.internalFormat?0:t.width*t.height*u(t.internalFormat)}class G{constructor(t,s){this._context=t,this._descriptor=s,this.type=l.RenderBuffer,this._context.instanceCounter.increment(g.Renderbuffer,this);const i=this._context.gl;this.glName=i.createRenderbuffer(),this._context.bindRenderbuffer(this);const{width:e,height:h,internalFormat:n,multisampled:r}=s;if(r){if(this._context.type!==p.WEBGL2)throw new Error("Multisampled renderbuffers are not supported in WebGL1!");i.renderbufferStorageMultisample(i.RENDERBUFFER,this.samples,n,e,h)}else i.renderbufferStorage(i.RENDERBUFFER,n,e,h)}get descriptor(){return this._descriptor}get samples(){const t=this._descriptor.samples,s=this._context.parameters.maxSamples;return t?Math.min(t,s):s}get gpuMemoryUsage(){return A(this._descriptor)}resize(t,s){const i=this._descriptor;if(i.width===t&&i.height===s)return;i.width=t,i.height=s;const e=this._context.gl;if(this._context.bindRenderbuffer(this),i.multisampled){e.renderbufferStorageMultisample(e.RENDERBUFFER,this.samples,i.internalFormat,i.width,i.height)}else e.renderbufferStorage(e.RENDERBUFFER,i.internalFormat,i.width,i.height)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(g.Renderbuffer,this),this._context=s())}}const O=t.getLogger("esri.views.webgl.FramebufferObject");class P{constructor(t,s,i=null){this._context=t,this._glName=null,this._colorAttachments=new Map,this._depthBuffer=null,this._stencilBuffer=null,this._depthStencilTexture=null,this._initialized=!1,t.instanceCounter.increment(g.FramebufferObject,this);const e=j(s)?s:new c(this._context,s);if(this._colorAttachments.set(w.COLOR_ATTACHMENT0,e),this._validateTextureDescriptor(e.descriptor),this._validateColorAttachmentPoint(w.COLOR_ATTACHMENT0),null!=i)if(U(i))this._context.capabilities.depthTexture||console.error("Setting the depth/stencil texture as an attachment requires WEBGL_depth_texture or WebGL2"),this._depthStencilTexture=j(i)?i:new c(this._context,i),this._validateTextureDescriptor(this._depthStencilTexture.descriptor);else{const t=W(i)?i:new G(this._context,i),s=t.descriptor;s.internalFormat===y.STENCIL_INDEX8?this._stencilBuffer=t:this._depthBuffer=t,this._validateRenderBufferDescriptor(s)}}dispose(){if(0===this._colorAttachments.size&&!this._glName)return;const t=this._context.getBoundFramebufferObject();if(this._colorAttachments.forEach(((t,s)=>this.detachColorTexture(s)?.dispose())),this.detachDepthStencilBuffer()?.dispose(),this.detachDepthStencilTexture()?.dispose(),this._glName){this._context.gl.deleteFramebuffer(this._glName),this._glName=null}this._context.bindFramebuffer(t),this._context.instanceCounter.decrement(g.FramebufferObject,this)}get glName(){return this._glName}get colorTexture(){return this._colorAttachments.get(w.COLOR_ATTACHMENT0)}get depthStencilAttachment(){return this._depthStencilTexture||this._depthBuffer||this._stencilBuffer}get depthStencilTexture(){return this._depthStencilTexture}get width(){const t=this._colorAttachments.get(w.COLOR_ATTACHMENT0);return t?.descriptor?.width??0}get height(){const t=this._colorAttachments.get(w.COLOR_ATTACHMENT0);return t?.descriptor?.height??0}get gpuMemoryUsage(){return[...this._colorAttachments].reduce(((t,[s,i])=>t+i.gpuMemoryUsage),this.depthStencilAttachment?.gpuMemoryUsage??0)}getColorTexture(t){const s=this._colorAttachments.get(t);return s&&j(s)?s:null}attachColorTexture(t,s=w.COLOR_ATTACHMENT0){if(!t)return;this._validateColorAttachmentPoint(s);const i=t.descriptor;this._validateTextureDescriptor(i),this.detachColorTexture(s)?.dispose(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,s)),this._colorAttachments.set(s,t)}detachColorTexture(t=w.COLOR_ATTACHMENT0){const s=this._colorAttachments.get(t);if(s)return this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,t)),this._colorAttachments.delete(t),s}setColorTextureTarget(t,s=w.COLOR_ATTACHMENT0){const i=this._colorAttachments.get(s);i&&this._framebufferTexture2D(i.glName,s,t)}attachDepthStencil(t){if(t)switch(t.type){case l.Texture:return this._attachDepthStencilTexture(t);case l.RenderBuffer:return this._attachDepthStencilBuffer(t)}}_attachDepthStencilTexture(t){if(null==t)return;const s=t.descriptor;s.pixelFormat!==_.DEPTH_STENCIL&&s.pixelFormat!==_.DEPTH24_STENCIL8&&console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!"),s.dataType!==T.UNSIGNED_INT_24_8&&console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"),this._context.capabilities.depthTexture||console.error("Extension WEBGL_depth_texture isn't supported therefore it is no possible to set the depth/stencil texture!"),this._validateTextureDescriptor(s),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,v)),this._depthStencilTexture?.dispose(),this._depthStencilTexture=t}detachDepthStencilTexture(){const t=this._depthStencilTexture;return t&&this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,v)),this._depthStencilTexture=null,t}_attachDepthStencilBuffer(t){if(null==t)return;const s=t.descriptor;if(s.internalFormat!==y.DEPTH_STENCIL&&s.internalFormat!==y.DEPTH_COMPONENT16&&console.error("Depth/Stencil buffer must have correct internalFormat"),this._validateRenderBufferDescriptor(s),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const i=this._context.gl,e=this._getGLAttachmentPoint(s);i.framebufferRenderbuffer(D.FRAMEBUFFER,e,i.RENDERBUFFER,t.glName)}this._depthBuffer?.dispose(),this._depthBuffer=t}detachDepthStencilBuffer(){const t=this._depthBuffer;if(t&&this._initialized){this._context.bindFramebuffer(this);const s=this._context.gl,i=this._getGLAttachmentPoint(t.descriptor);s.framebufferRenderbuffer(D.FRAMEBUFFER,i,s.RENDERBUFFER,null),t.dispose()}return this._depthBuffer=null,t}copyToTexture(t,s,i,e,h,n,r){(t<0||s<0||h<0||n<0)&&console.error("Offsets cannot be negative!"),(i<=0||e<=0)&&console.error("Copy width and height must be greater than zero!");const o=r.descriptor;r.descriptor.target!==z.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(null==o?.width||null==o?.height||t+i>this.width||s+e>this.height||h+i>o.width||n+e>o.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const u=this._context,l=u.bindTexture(r,c.TEXTURE_UNIT_FOR_UPDATES);u.setActiveTexture(c.TEXTURE_UNIT_FOR_UPDATES),u.bindFramebuffer(this),u.gl.copyTexSubImage2D(z.TEXTURE_2D,0,h,n,t,s,i,e),u.bindTexture(l,c.TEXTURE_UNIT_FOR_UPDATES)}readPixels(t,s,i,e,h,n,r){(i<=0||e<=0)&&console.error("Copy width and height must be greater than zero!"),r||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this);this._context.gl.readPixels(t,s,i,e,h,n,r)}async readPixelsAsync(t,s,i,e,h,n,r){if(this._context.type!==p.WEBGL2)return a()&&console.warn("Attempting to read pixels using pixel buffer object without WebGL2"),void this.readPixels(t,s,i,e,h,n,r);const o=this._context.gl,u=E.createPixelPack(this._context,m.STREAM_READ,r.byteLength);this._context.bindBuffer(u),this._context.bindFramebuffer(this),o.readPixels(t,s,i,e,h,n,0),this._context.unbindBuffer(b.PIXEL_PACK_BUFFER),await u.getSubDataAsync(r),u.dispose()}resize(t,s){if(this.width===t&&this.height===s)return;const i={width:t,height:s};V(i,this._context.parameters.maxTextureSize),this._colorAttachments.forEach((t=>t.resize(i.width,i.height))),this._depthStencilTexture?.resize(i.width,i.height),this._initialized&&(V(i,this._context.parameters.maxRenderbufferSize),this._depthBuffer?.resize(i.width,i.height),this._stencilBuffer?.resize(i.width,i.height),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1)}initializeAndBind(t=D.FRAMEBUFFER){const s=this._context.gl;if(this._initialized)return void s.bindFramebuffer(t,this.glName);this._glName&&s.deleteFramebuffer(this._glName);const i=s.createFramebuffer();s.bindFramebuffer(t,i),this._colorAttachments.forEach(((s,i)=>this._framebufferTexture2D(s.glName,i,C(s),t)));const e=this._depthBuffer||this._stencilBuffer;if(e){const i=this._getGLAttachmentPoint(e.descriptor);s.framebufferRenderbuffer(t,i,s.RENDERBUFFER,e.glName)}else this._depthStencilTexture&&this._framebufferTexture2D(this._depthStencilTexture.glName,s.DEPTH_STENCIL_ATTACHMENT,C(this._depthStencilTexture),t);if(a()){s.checkFramebufferStatus(t)!==s.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!")}this._glName=i,this._initialized=!0}_framebufferTexture2D(t,s=w.COLOR_ATTACHMENT0,i=z.TEXTURE_2D,e=D.FRAMEBUFFER,h=0){this._context.gl.framebufferTexture2D(e,s,i,t,h)}_disposeDepthStencilAttachments(){const t=this._context.gl;if(this._depthBuffer){if(this._initialized){this._context.bindFramebuffer(this);const s=this._getGLAttachmentPoint(this._depthBuffer.descriptor);t.framebufferRenderbuffer(D.FRAMEBUFFER,s,t.RENDERBUFFER,null)}this._depthBuffer=n(this._depthBuffer)}this._stencilBuffer&&(this._initialized&&(this._context.bindFramebuffer(this),t.framebufferRenderbuffer(D.FRAMEBUFFER,t.STENCIL_ATTACHMENT,t.RENDERBUFFER,null)),this._stencilBuffer=n(this._stencilBuffer)),this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,t.DEPTH_STENCIL_ATTACHMENT)),this._depthStencilTexture=n(this._depthStencilTexture))}_validateTextureDescriptor(t){t.target!==z.TEXTURE_2D&&t.target!==z.TEXTURE_CUBE_MAP&&console.error("Texture type must be TEXTURE_2D or TEXTURE_CUBE_MAP!"),V(t,this._context.parameters.maxTextureSize),this._validateBufferDimensions(t)}_validateRenderBufferDescriptor(t){V(t,this._context.parameters.maxRenderbufferSize),this._validateBufferDimensions(t)}_validateBufferDimensions(t){t.width<=0&&(t.width=this.width),t.height<=0&&(t.height=this.height),this.width>0&&this.height>0&&(this.width===t.width&&this.height===t.height||console.error("Attachment size must match framebuffer size!"))}_getGLAttachmentPoint(t){switch(t.internalFormat){case y.DEPTH_COMPONENT16:case y.DEPTH_COMPONENT24:case y.DEPTH_COMPONENT32F:return this._context.gl.DEPTH_ATTACHMENT;case y.DEPTH24_STENCIL8:case y.DEPTH32F_STENCIL8:case y.DEPTH_STENCIL:return this._context.gl.DEPTH_STENCIL_ATTACHMENT;case y.STENCIL_INDEX8:return this._context.gl.STENCIL_ATTACHMENT}}_validateColorAttachmentPoint(s){if(-1===P._MAX_COLOR_ATTACHMENTS){const t=this._context.capabilities.drawBuffers;if(t){const s=this._context.gl;P._MAX_COLOR_ATTACHMENTS=s.getParameter(t.MAX_COLOR_ATTACHMENTS)}else P._MAX_COLOR_ATTACHMENTS=1}const i=s-w.COLOR_ATTACHMENT0;i+1>P._MAX_COLOR_ATTACHMENTS&&t.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${i+1}. Implementation supports up to ${P._MAX_COLOR_ATTACHMENTS} color attachments`)}}function j(t){return null!=t&&"type"in t&&t.type===l.Texture}function W(t){return null!=t&&"type"in t&&t.type===l.RenderBuffer}function U(t){return j(t)||null!=t&&"pixelFormat"in t}function V(t,s){const i=Math.max(t.width,t.height);if(i>s){O.warn(`Resizing FBO attachment size ${t.width}x${t.height} to device limit ${s}`);const e=s/i;return t.width=Math.round(t.width*e),t.height=Math.round(t.height*e),!1}return!0}function C(t){return t.descriptor.target===z.TEXTURE_CUBE_MAP?z.TEXTURE_CUBE_MAP_POSITIVE_X:z.TEXTURE_2D}P._MAX_COLOR_ATTACHMENTS=-1;const M=t.getLogger("esri.views.webgl.VertexArrayObject");let F=class{constructor(t,s,i,e,h=null){this._context=t,this._locations=s,this._layout=i,this._buffers=e,this._indexBuffer=h,this._glName=null,this._initialized=!1,t.instanceCounter.increment(g.VertexArrayObject,this)}get glName(){return this._glName}get context(){return this._context}get vertexBuffers(){return this._buffers}get indexBuffer(){return this._indexBuffer}get byteSize(){return Object.keys(this._buffers).reduce(((t,s)=>t+this._buffers[s].byteLength),null!=this._indexBuffer?this._indexBuffer.byteLength:0)}get layout(){return this._layout}get locations(){return this._locations}get memoryEstimate(){return this.byteSize+(Object.keys(this._buffers).length+(this._indexBuffer?1:0))*r}dispose(){if(this._context){this._context.getBoundVAO()===this&&this._context.bindVAO(null);for(const t in this._buffers)this._buffers[t]?.dispose(),delete this._buffers[t];this._indexBuffer=n(this._indexBuffer),this.disposeVAOOnly()}else(this._glName||Object.getOwnPropertyNames(this._buffers).length>0)&&M.warn("Leaked WebGL VAO")}disposeVAOOnly(){if(this._glName){const t=this._context?.capabilities?.vao;t.deleteVertexArray(this._glName),this._glName=null}this._context.instanceCounter.decrement(g.VertexArrayObject,this),this._context=s()}initialize(){if(this._initialized)return;const t=this._context.capabilities.vao;if(t){const s=t.createVertexArray();t.bindVertexArray(s),this._bindLayout(),t.bindVertexArray(null),this._glName=s}this._initialized=!0}bind(){this.initialize();const t=this._context.capabilities.vao;t?t.bindVertexArray(this.glName):(this._context.bindVAO(null),this._bindLayout())}_bindLayout(){const{_buffers:t,_layout:s,_indexBuffer:i}=this;t||M.error("Vertex buffer dictionary is empty!");const e=this._context.gl;for(const i in t){const e=t[i];e||M.error("Vertex buffer is uninitialized!");const h=s[i];h||M.error("Vertex element descriptor is empty!"),f(this._context,this._locations,e,h)}if(null!=i){!!this._context.capabilities.vao?e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,i.glName):this._context.bindBuffer(i)}}unbind(){this.initialize();const t=this._context.capabilities.vao;t?t.bindVertexArray(null):this._unbindLayout()}_unbindLayout(){const{_buffers:t,_layout:s}=this;t||M.error("Vertex buffer dictionary is empty!");for(const i in t){const e=t[i];e||M.error("Vertex buffer is uninitialized!");const h=s[i];d(this._context,this._locations,e,h)}null!=this._indexBuffer&&this._context.unbindBuffer(this._indexBuffer.bufferType)}};export{E as c,B as i,G as n,F as u,P as x};
//# sourceMappingURL=p-908b7a05.js.map