import{T as e,im as t,k as i,l as s,U as n,n as r,o as a,aT as o,io as l,ip as u,iq as c,M as p,a5 as h,j as m,aS as d,W as y,bJ as g,a9 as f,cc as w,aU as v,h3 as R,c as b,aa as S,dl as F,a7 as x,r as I,ic as j,d7 as D,dr as T,bP as P,s as V,bj as C,g as N,b6 as A,ac as O,L as M,ir as G,a6 as _,hG as q,i6 as E,hH as z,d3 as H,d4 as B,hJ as U,i3 as J,d2 as L,d5 as k,bS as Q,cK as W,hM as $,is as K,hT as Z,hO as X,hp as Y}from"./p-98455486.js";import{N as ee,a as te,i as ie,j as se,c as ne,l as re,d as ae,n as oe,b as le,h as ue,f as ce,m as pe,S as he,q as me,k as de,Q as ye,t as ge}from"./p-aee4cf86.js";import{m as fe,g as we,p as ve,d as Re}from"./p-d2fa427f.js";import{c as be,u as Se,s as Fe,v as xe}from"./p-798c4085.js";import{G as Ie,I as je,w as De,i as Te,k as Pe,a as Ve,l as Ce,L as Ne,j as Ae,P as Oe}from"./p-8ef98ad9.js";import{t as Me}from"./p-d71c8851.js";import{b as Ge,s as _e,f as qe,i as Ee}from"./p-14843b2a.js";import{s as ze}from"./p-66f65b6a.js";import"./p-8399f9e1.js";import"./p-1172b129.js";import"./p-9803a24d.js";import{s as He,n as Be}from"./p-950241ce.js";import"./p-4f27d9ab.js";import"./p-ecc7ed03.js";import"./p-6cd106e8.js";import"./p-f33b44a5.js";import"./p-9f1a0adc.js";import"./p-7833a3a9.js";import"./p-ffb89da5.js";import"./p-dfd7ee02.js";import"./p-da8336be.js";import"./p-e6a64715.js";import"./p-dc29c329.js";const Ue={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}};const Je=new Set(["u1","u2","u4","u8","s8","u16","s16"]),Le={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},ke=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Qe(e){return ke.has(e.type)}function We(t,i){if(!t||!i)return e(t||i);const s=e(t);if(s.functionDefinition&&i.rasterFunctionDefinition){const e=i.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),$e(s.functionDefinition.arguments,i),s.rasterFunctionDefinition=s.functionDefinition.toJSON()}else if("none"!==i.functionName?.toLowerCase()){Xe(s.functionArguments).Raster=i}return s}function $e(e,t){for(const i in e)"raster"===i.toLowerCase()&&("RasterFunctionVariable"===e[i].type?(e[i]=t.rasterFunctionDefinition,e[i].type="RasterFunctionTemplate"):"RasterFunctionTemplate"===e[i].type&&$e(e[i].arguments,t))}function Ke(t){const i=e(Ue[t.functionName+"Function"]),s=t.functionArguments;for(const e in s)"raster"===e.toLowerCase()?(i.arguments[e]=Ke(s[e]),i.arguments[e].type="RasterFunctionTemplate"):"colormap"===e.toLowerCase()?(i.arguments[e].value=ut(s[e]),i.arguments.ColorSchemeType.value=0):i.arguments[e].value=s[e];return i}function Ze(e,t){switch(t=t||{},e.type){case"raster-stretch":return it(e,t);case"class-breaks":return st(e,t);case"unique-value":return at(e,t);case"raster-colormap":return ot(e,t);case"vector-field":return et(e,t);case"raster-shaded-relief":return tt(e,t);case"flow":throw new Error("Unsupported rendering rule.")}}function Xe(e){const t=e?.Raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?Xe(t.functionArguments):e}const Ye={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function et(e,i){const s=new ee;s.functionName="VectorFieldRenderer";const{dataType:n,bandNames:r}=i,a="vector-uv"===n;let o,l;if(r&&2===r.length){const e=r.map((e=>e.toLowerCase()));o=e.indexOf("magnitude"),l=e.indexOf("direction")}-1!==o&&null!==o||(o=0,l=1);const u="arithmetic"===e.rotationType?1:2,c="flow-from"===e.flowRepresentation?0:1,p=e.visualVariables?e.visualVariables.find((e=>"Magnitude"===e.field)):new t,h={magnitudeBandID:o,directionBandID:l,isUVComponents:a,referenceSystem:u,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:Le[e.style.toLowerCase().replace("-","_")],minimumMagnitude:p.minDataValue,maximumMagnitude:p.maxDataValue,minimumSymbolSize:p.minSize,maximumSymbolSize:p.maxSize};s.functionArguments=h;const m=Ke(s);return i.convertToRFT?ee.fromJSON({rasterFunctionDefinition:m}):s}function tt(e,t){const i=t.convertToRFT;if("elevation"!==t.dataType&&("generic"!==t.dataType||1!==t.bandCount||"s16"!==t.pixelType&&"s32"!==t.pixelType&&"f32"!==t.pixelType&&"f64"!==t.pixelType))return new ee;const s=new ee;s.functionName="Hillshade";const n="traditional"===e.hillshadeType?0:1,r="none"===e.scalingType?1:3,a={HillshadeType:n,SlopeType:r,ZFactor:e.zFactor};return 0===n&&(a.Azimuth=e.azimuth,a.Altitude=e.altitude),3===r&&(a.PSPower=e.pixelSizePower,a.PSZFactor=e.pixelSizeFactor),s.functionArguments=a,s.variableName="Raster",e.colorRamp&&(s.functionName="ShadedRelief",i?a.ColorRamp=je(e.colorRamp):a.Colormap=De(e.colorRamp)),i?new ee({rasterFunctionDefinition:Ke(s)}):s}function it(e,t){const i=t.convertToRFT,s=new ee;s.functionName="Stretch";const n=Ye[Te.toJSON(e.stretchType)],r="u8",a={StretchType:n,Statistics:lt(e.statistics??[]),DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};if(null!=e.outputMin&&(a.Min=e.outputMin),null!=e.outputMax&&(a.Max=e.outputMax),n===Ye.standardDeviation?(a.NumberOfStandardDeviations=e.numberOfStandardDeviations,s.outputPixelType=r):n===Ye.percentClip?(a.MinPercent=e.minPercent,a.MaxPercent=e.maxPercent,s.outputPixelType=r):n===Ye.minMax?s.outputPixelType=r:n===Ye.sigmoid&&(a.SigmoidStrengthLevel=e.sigmoidStrengthLevel),s.functionArguments=a,s.variableName="Raster",e.colorRamp){const n=e.colorRamp,r=new ee;if(i)r.functionArguments={ColorRamp:je(n)};else{const i=Pe(n,!0);if(i)r.functionArguments={colorRamp:i};else if(!t.convertColorRampToColormap||"algorithmic"!==n.type&&"multipart"!==n.type){const t=e.colorRamp.toJSON();"algorithmic"===t.type?t.algorithm=t.algorithm||"esriCIELabAlgorithm":"multipart"===t.type&&t.colorRamps?.length&&t.colorRamps.forEach((e=>e.algorithm=e.algorithm||"esriCIELabAlgorithm")),r.functionArguments={colorRamp:t}}else r.functionArguments={Colormap:De(n)}}return r.variableName="Raster",r.functionName="Colormap",r.functionArguments.Raster=s,i?new ee({rasterFunctionDefinition:Ke(r)}):r}return i?new ee({rasterFunctionDefinition:Ke(s)}):s}function st(e,t){const i=[],s=[],n=[],r=[],a=1e-6,{pixelType:o,rasterAttributeTable:l}=t,u=null==l?null:l.features,c=rt(l);if(c&&u&&Array.isArray(u)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,i)=>{const s=t.symbol?.color;let n;s?.a&&null!=t.minValue&&null!=t.maxValue&&u.forEach((a=>{null!=t.minValue&&null!=t.maxValue&&(n=a.attributes[e.field],(n>=t.minValue&&n<t.maxValue||i===e.classBreakInfos.length-1&&n>=t.minValue)&&r.push([a.attributes[c],s.r,s.g,s.b]))}))}));const i=o?nt(r,o):r,s=new ee;return s.functionName="Colormap",s.functionArguments={},s.functionArguments.Colormap=i,s.variableName="Raster",t.convertToRFT?new ee({rasterFunctionDefinition:Ke(s)}):s}e.classBreakInfos.forEach(((e,t)=>{if(null==e.minValue||null==e.maxValue)return;const o=e.symbol&&e.symbol.color;o?.a?(0===t?i.push(e.minValue,e.maxValue+a):i.push(e.minValue+a,e.maxValue+a),s.push(t),r.push([t,o.r,o.g,o.b])):n.push(e.minValue,e.maxValue)}));const p=o?nt(r,o):r,h=new ee;h.functionName="Remap",h.functionArguments={InputRanges:i,OutputValues:s,NoDataRanges:n},h.variableName="Raster";const m=new ee;return m.functionName="Colormap",m.functionArguments={Colormap:p,Raster:h},t.convertToRFT?new ee({rasterFunctionDefinition:Ke(m)}):m}function nt(e,t){const i=Je.has(t)?be(t):null;return i&&e.push([Math.floor(i[0]-1),0,0,0],[Math.ceil(i[1]+1),0,0,0]),e}function rt(e){if(null==e)return;const{fields:t}=e,i=t&&t.find((e=>e&&e.name&&"value"===e.name.toLowerCase()));return i&&i.name}function at(e,t){const i=[],{pixelType:s,rasterAttributeTable:n}=t,r=null==n?null:n.features,a=rt(n),o=e.defaultSymbol?.color?.toRgb(),l=e.uniqueValueInfos;if(l)if(r){if(a){const t=new Map;l.forEach((e=>{const i=e.value,s=e.symbol?.color;null!=i&&s&&s.a&&t.set(String(i),s.toRgb())}));const s=e.field;r.forEach((({attributes:e})=>{const n=String(e[s]),r=e[a],l=t.get(n);l?i.push([r,...l]):o&&i.push([r,...o])}))}}else for(let e=0;e<l.length;e++){const t=l[e],s=t.symbol?.color,n=+t.value;if(s?.a){if(isNaN(n))return null;i.push([n,s.r,s.g,s.b])}}const u=s&&i.length>0?nt(i,s):i,c=new ee;return c.functionName="Colormap",c.functionArguments={},c.functionArguments.Colormap=u,c.variableName="Raster",t.convertToRFT?new ee({rasterFunctionDefinition:Ke(c)}):c}function ot(e,t){const i=e.extractColormap();if(!i||0===i.length)return null;const{pixelType:s}=t,n=s?nt(i,s):i,r=new ee;return r.functionName="Colormap",r.functionArguments={},r.functionArguments.Colormap=n,t.convertToRFT?new ee({rasterFunctionDefinition:Ke(r)}):r}function lt(e){const t=[];return e?.forEach((e=>{const i=e;if(Array.isArray(i))t.push(i);else{if(null==i.min||null==i.max)return;const e=[i.min,i.max,i.avg||0,i.stddev||0];t.push(e)}})),t}function ut(e){const t=[],i=[];return e.forEach((e=>{t.push(e[0]),i.push(Ie([...e.slice(1),255]))})),{type:"RasterColormap",values:t,colors:i}}let ct=class extends a{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.pixelType=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(e,t,i){this.layer.version<10.3||(t[i]=e)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(e,t,i){this.format&&this.format.toLowerCase().includes("jpg")&&null!=e&&(t[i]=e)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}get format(){return"vector-field"===this.layer.renderer?.type?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}writeLercVersion(e,t,i){"lerc"===this.format&&this.layer.version>=10.5&&(t[i]=e)}get version(){const e=this.layer;return e.commitProperty("bandIds"),e.commitProperty("format"),e.commitProperty("compressionQuality"),e.commitProperty("compressionTolerance"),e.commitProperty("interpolation"),e.commitProperty("noData"),e.commitProperty("noDataInterpretation"),e.commitProperty("mosaicRule"),e.commitProperty("rasterFunction"),e.commitProperty("adjustAspectRatio"),e.commitProperty("pixelFilter"),e.commitProperty("definitionExpression"),e.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let t=e.mosaicRule;const i=e.definitionExpression;return t?i&&i!==t.where&&(t=t.clone(),t.where=i):i&&(t=new se({where:i})),t}get rasterFunction(){const e=this.layer;let{rasterFunction:t}=e;const i=e.pixelFilter,s=!e.format||e.format.includes("jpg")||e.format.includes("png");t=this._addResampleRasterFunction(t);const n=e.multidimensionalSubset?.areaOfInterest;return n&&(t=this._addClipFunction(t,n)),s&&!i&&"vector-field"!==e.renderer?.type&&(t=this.combineRendererWithRenderingRule(t)),t}combineRendererWithRenderingRule(e){const t=this.layer,{rasterInfo:i,renderer:s}=t;if(e=e||t.rasterFunction,!s||!Qe(s))return e;return We(Ze(s,{rasterAttributeTable:i.attributeTable,pixelType:i.pixelType,dataType:i.dataType,bandNames:i.bandInfos.map((({name:e})=>e)),convertColorRampToColormap:t.version<10.6,convertToRFT:!!e?.rasterFunctionDefinition,bandCount:i.bandCount}),e)}_addResampleRasterFunction(e){if(!("vector-field"===this.layer.renderer?.type)||"Resample"===e?.functionName)return e;const t="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10,i=this.layer.serviceRasterInfo.pixelSize;let s=new ee({functionName:"Resample",functionArguments:{ResamplingType:t,InputCellSize:i}});return s=e?.rasterFunctionDefinition?new ee({rasterFunctionDefinition:Ke(s)}):s,We(s,e)}_addClipFunction(e,t){const i=new ee({functionName:"Clip",functionArguments:{ClippingGeometry:t.toJSON(),ClippingType:1}});return We(i,e)}};i([s()],ct.prototype,"layer",void 0),i([s({json:{write:!0}})],ct.prototype,"adjustAspectRatio",null),i([n("adjustAspectRatio")],ct.prototype,"writeAdjustAspectRatio",null),i([s({json:{write:!0}})],ct.prototype,"bandIds",null),i([s({json:{write:!0}})],ct.prototype,"compression",void 0),i([s({json:{write:!0}})],ct.prototype,"compressionQuality",null),i([n("compressionQuality")],ct.prototype,"writeCompressionQuality",null),i([s({json:{write:!0}})],ct.prototype,"compressionTolerance",null),i([n("compressionTolerance")],ct.prototype,"writeCompressionTolerance",null),i([s({json:{write:!0}})],ct.prototype,"format",null),i([s({type:String,json:{read:{reader:te.read},write:{writer:te.write}}})],ct.prototype,"interpolation",null),i([s({json:{write:!0}})],ct.prototype,"noData",null),i([s({type:String,json:{read:{reader:ie.read},write:{writer:ie.write}}})],ct.prototype,"noDataInterpretation",null),i([s({json:{write:!0}})],ct.prototype,"pixelType",void 0),i([s({json:{write:!0}})],ct.prototype,"lercVersion",void 0),i([n("lercVersion")],ct.prototype,"writeLercVersion",null),i([s({type:Number})],ct.prototype,"version",null),i([s({json:{write:!0}})],ct.prototype,"mosaicRule",null),i([s({json:{write:!0,name:"renderingRule"}})],ct.prototype,"rasterFunction",null),ct=i([r("esri.layers.mixins.ExportImageServiceParameters")],ct);let pt=class extends a{constructor(e){super(e),this.north=null,this.up=null,this.spatialReference=null}};i([s({type:Number,json:{write:!0}})],pt.prototype,"north",void 0),i([s({type:Number,json:{write:!0}})],pt.prototype,"up",void 0),i([s({type:o,json:{write:!0}})],pt.prototype,"spatialReference",void 0),pt=i([r("esri.rest.support.ImageAngleResult")],pt);const ht=pt;let mt=class extends a{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};i([s({type:Number,json:{read:!0,write:!0}})],mt.prototype,"value",void 0),i([s({type:String,json:{read:!0,write:!0}})],mt.prototype,"displayValue",void 0),i([s({type:Number,json:{read:!0,write:!0}})],mt.prototype,"uncertainty",void 0),mt=i([r("esri.rest.support.ImageMeasureResultValue")],mt);let dt=class extends mt{constructor(){super(...arguments),this.unit=null}};i([s({type:String,json:{read:l.read,write:l.write}})],dt.prototype,"unit",void 0),dt=i([r("esri.rest.support.ImageMeasureResultLengthValue")],dt);let yt=class extends mt{constructor(){super(...arguments),this.unit=null}};i([s({type:String,json:{read:u.read,write:u.write}})],yt.prototype,"unit",void 0),yt=i([r("esri.rest.support.ImageMeasureResultAreaValue")],yt);let gt=class extends mt{constructor(){super(...arguments),this.unit=null}};i([s({type:String,json:{read:c.read,write:c.write}})],gt.prototype,"unit",void 0),gt=i([r("esri.rest.support.ImageMeasureResultAngleValue")],gt);let ft=class extends a{constructor(){super(...arguments),this.name=null,this.sensorName=null}};i([s({type:String,json:{read:!0,write:!0}})],ft.prototype,"name",void 0),i([s({type:String,json:{read:!0,write:!0}})],ft.prototype,"sensorName",void 0),ft=i([r("esri.rest.support.BaseImageMeasureResult")],ft);let wt=class extends ft{constructor(){super(...arguments),this.area=null,this.perimeter=null}};i([s({type:yt,json:{read:!0,write:!0}})],wt.prototype,"area",void 0),i([s({type:dt,json:{read:!0,write:!0}})],wt.prototype,"perimeter",void 0),wt=i([r("esri.rest.support.ImageAreaResult")],wt);const vt=wt;let Rt=class extends ft{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};i([s({type:dt,json:{read:!0,write:!0}})],Rt.prototype,"distance",void 0),i([s({type:gt,json:{read:!0,write:!0}})],Rt.prototype,"azimuthAngle",void 0),i([s({type:gt,json:{read:!0,write:!0}})],Rt.prototype,"elevationAngle",void 0),Rt=i([r("esri.rest.support.ImageDistanceResult")],Rt);const bt=Rt;let St=class extends ft{constructor(){super(...arguments),this.height=null}};i([s({type:dt,json:{read:!0,write:!0}})],St.prototype,"height",void 0),St=i([r("esri.rest.support.ImageHeightResult")],St);const Ft=St;let xt=class extends a{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};i([s({json:{write:!0}})],xt.prototype,"catalogItemVisibilities",void 0),i([s({type:p,json:{write:!0}})],xt.prototype,"catalogItems",void 0),i([s({type:h,json:{write:!0}})],xt.prototype,"location",void 0),i([s({json:{write:!0}})],xt.prototype,"name",void 0),i([s({json:{write:!0}})],xt.prototype,"objectId",void 0),i([s({json:{write:!0}})],xt.prototype,"processedValues",void 0),i([s({json:{write:!0}})],xt.prototype,"properties",void 0),i([s({json:{write:!0}})],xt.prototype,"value",void 0),xt=i([r("esri.rest.support.ImageIdentifyResult")],xt);const It=xt;let jt=class extends a{constructor(){super(...arguments),this.geometries=null}};i([s({json:{write:!0}})],jt.prototype,"geometries",void 0),jt=i([r("esri.rest.support.ImagePixelLocationResult")],jt);const Dt=jt;let Tt=class extends ft{constructor(){super(...arguments),this.point=null}};i([s({type:h,json:{name:"point.value",read:!0,write:!0}})],Tt.prototype,"point",void 0),Tt=i([r("esri.rest.support.ImagePointResult")],Tt);const Pt=Tt;let Vt=class extends a{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};i([s({json:{write:!0}})],Vt.prototype,"attributes",void 0),i([s({type:h,json:{write:!0}})],Vt.prototype,"location",void 0),i([s({json:{write:!0}})],Vt.prototype,"locationId",void 0),i([s({json:{write:!0}})],Vt.prototype,"rasterId",void 0),i([s({json:{write:!0}})],Vt.prototype,"resolution",void 0),i([s({json:{write:!0}})],Vt.prototype,"pixelValue",void 0),Vt=i([r("esri.rest.support.ImageSample")],Vt);const Ct=Vt;let Nt=class extends a{constructor(){super(...arguments),this.samples=null}};i([s({type:[Ct],json:{write:!0}})],Nt.prototype,"samples",void 0),Nt=i([r("esri.rest.support.ImageSampleResult")],Nt);const At=Nt;function Ot(e){const t=e?.time;if(t&&(null!=t.start||null!=t.end)){const i=[];null!=t.start&&i.push(t.start),null==t.end||i.includes(t.end)||i.push(t.end),e.time=i.join(",")}}async function Mt(e,t,i){const s=qe(e),n=t.geometry?[t.geometry]:[],r=await Ge(n),a=t.toJSON();Ot(a);const o=r&&r[0];null!=o&&(a.geometry=o.toJSON());const l=_e({...s.query,f:"json",...a});return Ee(l,i)}async function Gt(e,t,i){const s=t.toJSON();null!=s.angleName&&(s.angleName=s.angleName.join(",")),null!=t.point&&t.point.spatialReference?.imageCoordinateSystem&&(s.point.spatialReference=Wt(t.point.spatialReference)),null!=t.spatialReference&&t.spatialReference.imageCoordinateSystem&&(s.spatialReference=$t(t.spatialReference));const n=qe(e),r=_e({...n.query,f:"json",...s}),a=Ee(r,i),{data:l}=await m(`${n.path}/computeAngles`,a);return l.spatialReference=l.spatialReference?null!=l.spatialReference.geodataXform?new o({wkid:0,imageCoordinateSystem:l.spatialReference}):o.fromJSON(l.spatialReference):null,"NaN"===l.north&&(l.north=null),"NaN"===l.up&&(l.up=null),new ht(l)}async function _t(e,t,i){const s=t.toJSON(),{geometries:n}=t;if(n)for(let e=0;e<n.length;e++)n[e].spatialReference?.imageCoordinateSystem&&(s.geometries.geometries[e].spatialReference=Wt(n[e].spatialReference));const r=qe(e),a=_e({...r.query,f:"json",...s}),o=Ee(a,i),{data:l}=await m(`${r.path}/computePixelLocation`,o);return Dt.fromJSON(l)}async function qt(e,t,i){const s=await Mt(e,t,i),n=qe(e),{data:r}=await m(`${n.path}/computeStatisticsHistograms`,s),{statistics:a}=r;return a?.length&&a.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a,histograms:r.histograms}}async function Et(e,t,i){const s=await Mt(e,t,i),n=qe(e),{data:r}=await m(`${n.path}/computeHistograms`,s);return{histograms:r.histograms}}async function zt(e,t,i){const s=t.toJSON();Ot(s),s.outFields?.length&&(s.outFields=s.outFields.join(","));const n=await Ge(t.geometry),r=n?.[0];null!=r&&(s.geometry=r.toJSON());const a=qe(e),o=_e({...a.query,f:"json",...s}),l=Ee(o,i),{data:u}=await m(`${a.path}/getSamples`,l),c=u?.samples?.map((e=>{const t="NaN"===e.value||""===e.value?null:e.value.split(" ").map((e=>Number(e)));return{...e,pixelValue:t}}));return At.fromJSON({samples:c})}async function Ht(e,t,i){const s=qe(e),n=t.geometry?[t.geometry]:[];return Ge(n).then((e=>{const n=t.toJSON(),r=e&&e[0];null!=r&&(n.geometry=JSON.stringify(r.toJSON()));const a=_e({...s.query,f:"json",...n}),o=Ee(a,i);return m(s.path+"/identify",o)})).then((e=>It.fromJSON(e.data)))}async function Bt(e,t,i){const s=await kt(e,t,[t.fromGeometry,t.toGeometry],i);return Ft.fromJSON(s)}async function Ut(e,t,i){const s=await kt(e,t,[t.geometry],i);return vt.fromJSON(s)}async function Jt(e,t,i){const s=await kt(e,t,[t.geometry],i);return Pt.fromJSON(s)}async function Lt(e,t,i){const s=await kt(e,t,[t.fromGeometry,t.toGeometry],i);return bt.fromJSON(s)}async function kt(e,t,i,s){const n=qe(e),r=await Ge(i),a=t.toJSON();null!=r[0]&&(a.fromGeometry=JSON.stringify(Qt(r[0]))),null!=r[1]&&(a.toGeometry=JSON.stringify(Qt(r[1])));const o=_e({...n.query,f:"json",...a}),l=Ee(o,s),{data:u}=await m(n.path+"/measure",l);return u}function Qt(e){const t=e.toJSON();return e.spatialReference?.imageCoordinateSystem&&(t.spatialReference=Wt(e.spatialReference)),t}function Wt(e){const{imageCoordinateSystem:t}=e;if(t){const{id:e,referenceServiceName:i}=t;return null!=e?i?{icsid:e,icsns:i}:{icsid:e}:{ics:t}}return e.toJSON()}function $t(e,t){const i=Wt(e),{icsid:s,icsns:n,wkid:r}=i;return null!=s?null==n||t?.toLowerCase().includes("/"+n.toLowerCase()+"/")?`0:${s}`:JSON.stringify(i):r?r.toString():JSON.stringify(i)}async function Kt(e,t,i){const s=qe(e),n=_e({...s?.query,f:"json"}),r=Ee(n,i),a=`${s?.path}/${t}/info`,o=m(`${a}`,r),l=m(`${a}/keyProperties`,r),u=await Promise.allSettled([o,l]),c="fulfilled"===u[0].status?u[0].value.data:null,p="fulfilled"===u[1].status?u[1].value.data:null;let y=null;c.statistics?.length&&(y=c.statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))));const g=d.fromJSON(c.extent),f=Math.ceil(g.width/c.pixelSizeX-.1),w=Math.ceil(g.height/c.pixelSizeY-.1),v=g.spatialReference,R=new h({x:c.pixelSizeX,y:c.pixelSizeY,spatialReference:v}),b=c.histograms?.length?c.histograms:null,S=new Ce({origin:c.origin,blockWidth:c.blockWidth,blockHeight:c.blockHeight,firstPyramidLevel:c.firstPyramidLevel,maximumPyramidLevel:c.maxPyramidLevel});return new Ve({width:f,height:w,bandCount:c.bandCount,extent:g,spatialReference:v,pixelSize:R,pixelType:c.pixelType.toLowerCase(),statistics:y,histograms:b,keyProperties:p,storageInfo:S})}var Zt;let Xt=Zt=class extends a{constructor(e){super(e),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new Zt(e({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};i([s({type:[String],json:{name:"angleName",write:!0}})],Xt.prototype,"angleNames",void 0),i([s({type:h,json:{write:!0}})],Xt.prototype,"point",void 0),i([s({type:o,json:{write:!0}})],Xt.prototype,"spatialReference",void 0),i([s({type:y,json:{write:!0}})],Xt.prototype,"rasterId",void 0),Xt=Zt=i([r("esri.rest.support.ImageAngleParameters")],Xt);const Yt=Xt;const ei=new g({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let ti=class extends a{constructor(){super(...arguments),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};i([s()],ti.prototype,"type",void 0),i([s({type:ei.apiValues,json:{read:ei.read,write:ei.write}})],ti.prototype,"measureOperation",void 0),i([s({type:se,json:{write:!0}})],ti.prototype,"mosaicRule",void 0),i([s({type:h,json:{write:!0}})],ti.prototype,"pixelSize",void 0),i([s({json:{write:!0}})],ti.prototype,"raster",void 0),ti=i([r("esri.rest.support.BaseImageMeasureParameters")],ti);var ii;let si=ii=class extends ti{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(e,t,i){null!=e&&(t.geometryType=w(e),t[i]=e.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new ii(e({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([s({types:f,json:{name:"fromGeometry",read:!0,write:!0}})],si.prototype,"geometry",void 0),i([n("geometry")],si.prototype,"writeGeometry",null),i([s({type:ei.apiValues,json:{write:ei.write}})],si.prototype,"measureOperation",null),i([s({json:{read:!0}})],si.prototype,"is3D",void 0),i([s({type:String,json:{read:l.read,write:l.write}})],si.prototype,"linearUnit",void 0),i([s({type:String,json:{read:u.read,write:u.write}})],si.prototype,"areaUnit",void 0),si=ii=i([r("esri.rest.support.ImageAreaParameters")],si);const ni=si;var ri;let ai=ri=class extends ti{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(e,t,i){null!=e&&(t.geometryType=w(e),t[i]=e.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new ri(e({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([s({type:h,json:{read:!0,write:!0}})],ai.prototype,"fromGeometry",void 0),i([n("fromGeometry")],ai.prototype,"writeFromGeometry",null),i([s({type:h,json:{read:!0,write:!0}})],ai.prototype,"toGeometry",void 0),i([s({type:ei.apiValues,json:{write:ei.write}})],ai.prototype,"measureOperation",null),i([s({json:{read:!0}})],ai.prototype,"is3D",void 0),i([s({type:String,json:{read:l.read,write:l.write}})],ai.prototype,"linearUnit",void 0),i([s({type:String,json:{read:c.read,write:c.write}})],ai.prototype,"angularUnit",void 0),ai=ri=i([r("esri.rest.support.ImageDistanceParameters")],ai);const oi=ai;var li;let ui=li=class extends ti{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(e,t,i){null!=e&&(t.geometryType=w(e),t[i]=e.toJSON())}get measureOperation(){return this.operationType}clone(){return new li(e({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([s({type:h,json:{read:!0}})],ui.prototype,"fromGeometry",void 0),i([n("fromGeometry")],ui.prototype,"writeFromGeometry",null),i([s({type:h,json:{read:!0,write:!0}})],ui.prototype,"toGeometry",void 0),i([s({type:ei.apiValues,json:{write:ei.write}})],ui.prototype,"measureOperation",null),i([s({json:{read:!0}})],ui.prototype,"operationType",void 0),i([s({type:String,json:{read:l.read,write:l.write}})],ui.prototype,"linearUnit",void 0),ui=li=i([r("esri.rest.support.ImageHeightParameters")],ui);const ci=ui;var pi;let hi=pi=class extends a{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=w(e),t[i]=JSON.stringify(e.toJSON()))}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=se.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}get renderingRule(){return R(b.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._get("rasterFunction")}set renderingRule(e){R(b.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",e)}get renderingRules(){return R(b.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._get("rasterFunctions")}set renderingRules(e){R(b.getLogger(this),"renderingRules",{replacement:"rasterFunctions",version:"4.27",warnOnce:!0}),this._set("rasterFunctions",e)}set rasterFunction(e){let t=e;t&&t.rasterFunction&&(t=ee.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}writeRasterFunction(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON())),e.rasterFunctionDefinition&&(t[i]=JSON.stringify(e.rasterFunctionDefinition))}writeRasterFunctions(e,t,i){null!=e&&(t[i]=JSON.stringify(e.map((e=>e.rasterFunctionDefinition||e.toJSON()))))}writePixelSize(e,t,i){null!=e&&(t[i]=JSON.stringify(e))}writeTimeExtent(e,t,i){if(null!=e){const s=null!=e.start?e.start.getTime():null,n=null!=e.end?e.end.getTime():null;t[i]=null!=s?null!=n?`${s},${n}`:`${s}`:null}}clone(){return new pi(e({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};i([s({json:{write:!0}})],hi.prototype,"geometry",void 0),i([n("geometry")],hi.prototype,"writeGeometry",null),i([s({type:se,json:{write:!0}})],hi.prototype,"mosaicRule",null),i([n("mosaicRule")],hi.prototype,"writeMosaicRule",null),i([s({type:ee})],hi.prototype,"renderingRule",null),i([s({type:[ee]})],hi.prototype,"renderingRules",null),i([s({type:ee,json:{write:!0,name:"renderingRule"}})],hi.prototype,"rasterFunction",null),i([n("rasterFunction")],hi.prototype,"writeRasterFunction",null),i([s({type:[ee],json:{write:!0,name:"renderingRules"}})],hi.prototype,"rasterFunctions",void 0),i([n("rasterFunctions")],hi.prototype,"writeRasterFunctions",null),i([s({type:h,json:{write:!0}})],hi.prototype,"pixelSize",void 0),i([n("pixelSize")],hi.prototype,"writePixelSize",null),i([s({type:Boolean,json:{write:!0}})],hi.prototype,"returnGeometry",void 0),i([s({type:Boolean,json:{write:!0}})],hi.prototype,"returnCatalogItems",void 0),i([s({type:Boolean,json:{write:!0}})],hi.prototype,"returnPixelValues",void 0),i([s({type:Number,json:{write:!0}})],hi.prototype,"maxItemCount",void 0),i([s({type:v,json:{write:{target:"time"}}})],hi.prototype,"timeExtent",void 0),i([n("timeExtent")],hi.prototype,"writeTimeExtent",null),i([s({json:{write:!0}})],hi.prototype,"raster",void 0),i([s({json:{write:!0}})],hi.prototype,"viewId",void 0),i([s({type:Boolean,json:{write:!0}})],hi.prototype,"processAsMultidimensional",void 0),hi=pi=i([r("esri.rest.support.ImageIdentifyParameters")],hi);const mi=hi;var di;let yi=di=class extends a{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(e,t,i){t.geometries={geometryType:"esriGeometryPoint",geometries:e.map((e=>e.toJSON()))}}clone(){return new di({geometries:this.geometries?.map((e=>e.clone()))??[],rasterId:this.rasterId})}};i([s({type:[h],json:{write:!0}})],yi.prototype,"geometries",void 0),i([n("geometries")],yi.prototype,"writeGeometry",null),i([s({type:y,json:{write:!0}})],yi.prototype,"rasterId",void 0),yi=di=i([r("esri.rest.support.ImagePixelLocationParameters")],yi);const gi=yi;var fi;let wi=fi=class extends ti{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(e,t,i){null!=e&&(t.geometryType=w(e),t[i]=e.toJSON())}get measureOperation(){const{is3D:e,geometry:t}=this;return"point"===t.type?e?"point-3D":"point":e?"centroid-3D":"centroid"}clone(){return new fi(e({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([s({types:f,json:{name:"fromGeometry",read:S}})],wi.prototype,"geometry",void 0),i([n("geometry")],wi.prototype,"writeGeometry",null),i([s({type:ei.apiValues,json:{read:ei.read,write:ei.write}})],wi.prototype,"measureOperation",null),i([s({json:{read:!0}})],wi.prototype,"is3D",void 0),wi=fi=i([r("esri.rest.support.ImagePointParameters")],wi);const vi=wi;var Ri;let bi=Ri=class extends a{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=w(e),t[i]=e.toJSON())}set locations(e){if(e?.length){const t=new F({spatialReference:e[0].spatialReference});t.points=e.map((e=>[e.x,e.y])),this._set("locations",e),this.geometry=t}}clone(){return new Ri(e({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};i([s({types:f,json:{read:S}})],bi.prototype,"geometry",void 0),i([n("geometry")],bi.prototype,"writeGeometry",null),i([s()],bi.prototype,"locations",null),i([s({type:String,json:{type:te.jsonValues,read:te.read,write:te.write}})],bi.prototype,"interpolation",void 0),i([s({type:se,json:{write:!0}})],bi.prototype,"mosaicRule",void 0),i([s({type:[String],json:{write:!0}})],bi.prototype,"outFields",void 0),i([s({type:h,json:{write:!0}})],bi.prototype,"pixelSize",void 0),i([s({type:String,json:{write:!0}})],bi.prototype,"raster",void 0),i([s({type:Boolean,json:{write:!0}})],bi.prototype,"returnFirstValueOnly",void 0),i([s({type:Number,json:{write:!0}})],bi.prototype,"sampleDistance",void 0),i([s({type:Number,json:{write:!0}})],bi.prototype,"sampleCount",void 0),i([s({type:Number,json:{write:!0}})],bi.prototype,"sliceId",void 0),i([s({type:v,json:{read:{source:"time"},write:{target:"time"}}})],bi.prototype,"timeExtent",void 0),bi=Ri=i([r("esri.rest.support.ImageSampleParameters")],bi);const Si=bi;const Fi=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),xi=G(_,{min:0,max:255});function Ii(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),i=t?.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return i?i.join("/"):null}const ji=t=>{let a=class extends t{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this._rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new ct({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.length<1||null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)})),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,i){null!=e&&"lerc"!==this.format&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?se.fromJSON(t):null}get fieldsIndex(){return this.fields?new T(this.fields):null}set format(e){e&&Fi.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=se.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const i=e||t.mosaicRule;return i?se.fromJSON(i):this._isMosaicRuleSupported(t)?se.fromJSON(t):null}writeMosaicRule(e,t,i){let s=this.mosaicRule;const n=this.definitionExpression;s?n&&n!==s.where&&(s=s.clone(),s.where=n):n&&(s=new se({where:n})),this._isValidCustomizedMosaicRule(s)&&(t[i]=s.toJSON())}writeNoData(e,t,i){null!=e&&"number"==typeof e&&(t[i]=xi(e))}readObjectIdField(e,t){if(!e){const i=t.fields.filter((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=i&&i[0]&&i[0].name}return e}get parsedUrl(){return P(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}set renderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("renderer",e)}readRenderer(e,t,i){const s=t?.layerDefinition?.drawingInfo?.renderer,n=le(s,i);return null==n?null:("vector-field"===n.type&&t.symbolTileSize&&!s.symbolTileSize&&(n.symbolTileSize=t.symbolTileSize),Qe(n)||b.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),n)}writeRenderer(e,t,i){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),"vector-field"===e.type&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const t=this._rasterAttributeTableFieldPrefix||"Raster.",i=new I({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),s=new I({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),n=new I({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let r=this.fields?e(this.fields):[];r.push(s),this.capabilities?.operations.supportsQuery&&this.fields&&this.fields.length>0&&r.push(i),this.version>=10.4&&null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&r.push(n),null!=this.rasterFunctionInfos&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{r.push(new I({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),this._isVectorDataSet()&&(r.push(new I({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),r.push(new I({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const{attributeTable:a}=this.rasterInfo??{};if(null!=a){const i=a.fields.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((i=>{const s=e(i);return s.name=t+i.name,s}));r=r.concat(i)}return r}get renderingRule(){return R(b.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._get("rasterFunction")}set renderingRule(e){R(b.getLogger(this),"renderingRule",{replacement:"rasterFunction",version:"4.27",warnOnce:!0}),this._set("rasterFunction",e)}set rasterFunction(e){let t=e;t&&t.rasterFunction&&(t=ee.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const i=t.rasterFunctionInfos;return t.renderingRule||i&&i.length&&"None"!==i[0].name?this._isRFTJson(t.renderingRule)?ee.fromJSON({rasterFunctionDefinition:t.renderingRule}):ee.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const i=e||t.extent.spatialReference;return i?o.fromJSON(i):null}readPixelType(e){return oe.fromJSON(e)||e}writePixelType(e,t,i){null!=this.serviceRasterInfo&&this.pixelType===this.serviceRasterInfo.pixelType||(t[i]=oe.toJSON(e))}readVersion(e,t){let i=t.currentVersion;return i||(i=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),i}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let i=e;const{renderer:s,symbolizer:n,pixelFilter:r,bandIds:a}=this;if(!this._isPicture()&&s&&n&&!r){const r=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(s.toJSON()),o=this._rasterJobHandler.instance;if(o){r&&(n.bind(),await o.updateSymbolizer(n,t),this._cachedRendererJson=s.toJSON());const l=await o.symbolize({bandIds:a,...e},t);i={extent:e.extent,pixelBlock:l}}else i={extent:e.extent,pixelBlock:n.symbolize({bandIds:a,...e})}}return i}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeAngles(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeAngles)throw new V("imagery-layer:compute-angles","this operation is not supported on the input image service");return e=C(Yt,e).clone(),Gt(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputePixelLocation)throw new V("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=C(gi,e).clone(),_t(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeHistograms)throw new V("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=C(ue,e).clone(),this._applyMosaicAndRenderingRules(e),Et(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeStatisticsHistograms)throw new V("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=C(ue,e).clone(),this._applyMosaicAndRenderingRules(e),qt(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const i=await this._fetchCapabilities(t?.signal);if(!("base-and-top"===e.operationType?i.mensuration.supportsHeightFromBaseAndTop:"base-and-top-shadow"===e.operationType?i.mensuration.supportsHeightFromBaseAndTopShadow:i.mensuration.supportsHeightFromTopAndTopShadow))throw new V("imagery-layer:measure-height","this operation is not supported on the input image service");return e=C(ci,e).clone(),this._applyMosaicAndRenderingRules(e),Bt(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const i=await this._fetchCapabilities(t?.signal);if(!(i.mensuration.supportsAreaAndPerimeter&&(!e.is3D||i.mensuration.supports3D)))throw new V("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=C(ni,e).clone(),this._applyMosaicAndRenderingRules(e),Ut(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const i=await this._fetchCapabilities(t?.signal);if(!(i.mensuration.supportsDistanceAndAngle&&(!e.is3D||i.mensuration.supports3D)))throw new V("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=C(oi,e).clone(),this._applyMosaicAndRenderingRules(e),Lt(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const i=await this._fetchCapabilities(t?.signal);if(!(i.mensuration.supportsPointOrCentroid&&(!e.is3D||i.mensuration.supports3D)))throw new V("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=C(vi,e).clone(),this._applyMosaicAndRenderingRules(e),Jt(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return null!=t?t.get(e):void 0}getFieldDomain(e,t){const i=this.getField(e);return i?i.domain:null}async fetchImage(e,t,i,s={}){if(null==e||null==t||null==i)throw new V("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const e=await this._generateRasterInfo(this.rasterFunction,{signal:s.signal});e&&(this.rasterInfo=e)}const n=this.getExportImageServiceParameters(e,t,i,s.timeExtent);if(null==n){if(s.requestAsImageElement&&this._canRequestImageElement(this.format)){const e=document.createElement("canvas");if(e.width=t,e.height=i,s.returnImageBitmap){return{imageBitmap:await Me(e,`${l(this.parsedUrl)}/exportImage`,s.signal)}}return{imageOrCanvasElement:e}}const{bandIds:n,rasterInfo:r}=this,a=(n?.length||r.bandCount)??0,o=t*i,u=r.pixelType,c=[];for(let e=0;e<a;e++)c.push(Se.createEmptyBand(u,o));return{pixelData:{pixelBlock:new Se({width:t,height:i,pixels:c,mask:new Uint8Array(o),pixelType:u}),extent:e}}}const r=!!s.requestAsImageElement&&!this.pixelFilter,a=r&&!!s.returnImageBitmap,o={imageServiceParameters:n,imageProps:{extent:e,width:t,height:i,format:this.format},requestAsImageElement:r,returnImageBitmap:a,signal:s.signal};return this._requestArrayBuffer(o)}fetchKeyProperties(e){return m(l(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((e=>e.data))}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new V("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):m(l(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((e=>p.fromJSON(e.data)))}getCatalogItemRasterInfo(e,t){const i={...t,query:this._getQueryParams()};return Kt(l(this.parsedUrl),e,i)}async getCatalogItemICSInfo(e,t){const{data:i}=await m(l(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),s=i&&i.ics;if(!s)return;let n=null;try{n=(await m(l(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!n||!n.spatialReference)return{ics:s,icsToPixelTransform:null,icsExtent:null,northDirection:null};const r=this.version>=10.7?m(l(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},a=n.spatialReference,u={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[n]}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},c=m(l(this.parsedUrl)+"/project",{query:this._getQueryParams(u),...t}).then((e=>e.data)).catch((()=>({}))),p=5,h=(n.xmin+n.xmax)/2,y=(n.ymax-n.ymin)/(p+1),g=n.ymin+y,f=[];for(let e=0;e<p;e++)f.push({x:h,y:g+y*e});const w={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:f}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},v=m(l(this.parsedUrl)+"/project",{query:this._getQueryParams(w),...t}).then((e=>e.data)).catch((()=>({}))),R=await Promise.all([r,c,v]);let b=R[0].ipxf;if(null==b){const e=s.geodataXform?.xf_0;"topup"===e?.name?.toLowerCase()&&6===e?.coefficients?.length&&(b={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const S=d.fromJSON(R[1]&&R[1].geometries&&R[1].geometries[0]);S&&(S.spatialReference=new o({wkid:0,imageCoordinateSystem:s}));const F=R[2].geometries?R[2].geometries.filter((e=>null!=e&&null!=e.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],x=F.length;if(x<3)return{ics:s,icsToPixelTransform:b,icsExtent:S,northDirection:null};let I=0,j=0,D=0,T=0;for(let e=0;e<x;e++)I+=F[e].x,j+=F[e].y,D+=F[e].x*F[e].x,T+=F[e].x*F[e].y;const P=(x*T-I*j)/(x*D-I*I);let V=0;const C=F[p-1].x>F[0].x,N=F[p-1].y>F[0].y;return P===1/0?V=N?90:270:0===P?V=C?0:180:P>0?V=C?180*Math.atan(P)/Math.PI:180*Math.atan(P)/Math.PI+180:P<0&&(V=N?180+180*Math.atan(P)/Math.PI:360+180*Math.atan(P)/Math.PI),{ics:s,icsToPixelTransform:b,icsExtent:S,northDirection:V}}async generateRasterInfo(e,t){if(e=C(ee,e),this.serviceRasterInfo&&(!e||"none"===e.functionName?.toLowerCase()||this._isVectorFieldResampleFunction(e)))return this.serviceRasterInfo;const i=Ii(e);if(!i)throw new V("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[i])return this._functionRasterInfos[i];const s={...t,query:this._getQueryParams()},n=ce(l(this.parsedUrl),e,s);this._functionRasterInfos[i]=n;try{return await n}catch(e){throw this._functionRasterInfos[i]=null,e}}getExportImageServiceParameters(e,t,i,s){e=e.clone().shiftCentralMeridian();const n=$t(e.spatialReference,l(this.parsedUrl));this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const r=this.exportImageServiceParameters.toJSON(),{bandIds:a,noData:o}=r;let{renderingRule:u}=r;const c=this.rasterFunction?.rasterFunctionDefinition,p=!this.renderer||"raster-stretch"===this.renderer.type;if(a?.length&&this._hasRasterFunction(this.rasterFunction)&&!c&&p){const e={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:a}};if("Stretch"===u.rasterFunction)e.rasterFunctionArguments.Raster=u.rasterFunctionArguments.Raster,u.rasterFunctionArguments.Raster=e;else if("Colormap"===u.rasterFunction){const t=u.rasterFunctionArguments.Raster;"Stretch"===t?.rasterFunction?(e.rasterFunctionArguments.Raster=t.rasterFunctionArguments.Raster,t.rasterFunctionArguments.Raster=e):(e.rasterFunctionArguments.Raster=t,u.rasterFunctionArguments.Raster=e)}else e.rasterFunctionArguments.Raster=u,u=e;r.bandIds=void 0}else r.bandIds=a?.join(",");o instanceof Array&&o.length>0&&(r.noData=o.join(","));const h=this._processMultidimensionalIntersection(null,s,this.exportImageServiceParameters.mosaicRule);if(h.isOutSide)return null;r.mosaicRule=null!=h.mosaicRule?JSON.stringify(h.mosaicRule):null,s=h.timeExtent,r.renderingRule=this._getRenderingRuleString(ee.fromJSON(u));const m={};if(null!=s){const{start:e,end:t}=s.toJSON();e&&t&&e===t?m.time=""+e:null==e&&null==t||(m.time=`${e??"null"},${t??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:t+","+i,...r,...m}}async getSamples(e,t){const i=await this._fetchCapabilities(t?.signal);if(!i?.operations.supportsGetSamples)throw new V("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=C(Si,e).clone();const{raster:s}=this;return s&&null==e.raster&&(e.raster=s),zt(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsIdentify)throw new V("imagery-layer:identify","identify operation is not supported on the input image service");e=C(mi,e).clone();const i=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(i.isOutSide)throw new V("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=i.timeExtent,e.mosaicRule=i.mosaicRule;const{raster:s,rasterFunction:n}=this;return n&&null==e.rasterFunction&&(e.rasterFunction=n),s&&null==e.raster&&(e.raster=s),Ht(this.url,e,this._getRequestOptions(t))}createQuery(){const e=new N;return e.outFields=["*"],e.returnGeometry=!0,e.where=this.definitionExpression||"1=1",e}async queryRasters(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),ze(this.url,e,t)}async queryObjectIds(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),He(this.url,e,t)}async queryRasterCount(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),Be(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new V("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:i,returnDomainValues:s,returnTopmostRaster:n,showNoDataRecords:r}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let a=!1,o=null,l=null;const u="raster.servicepixelvalue",c=this._rasterFunctionNamesIndex;if(null!=e.outFields&&(a=e.outFields.some((e=>!e.toLowerCase().includes(u))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().includes(u)&&e.length>u.length)).map((e=>{const t=e.slice(u.length+1);return[this._updateRenderingRulesFunctionName(t,c),t]}));o=t.map((e=>new ee({functionName:e[0]}))),l=t.map((e=>e[1]));const{rasterFunction:i}=this;0===o.length?i?.functionName?(o.push(i),l.push(i.functionName)):o=null:i?.functionName&&!o.some((e=>e.functionName===i.functionName))&&(o.push(i),l.push(i.functionName))}const p=null==e.outSpatialReference||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:h}=this;let m=e.timeExtent||this.timeExtent;if(h){const{isOutside:t,intersection:i}=fe(h,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(t)throw new V("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");i&&null!=i.timeExtent&&(m=i.timeExtent)}const d=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,m),y=this._getQueryParams({geometry:e.geometry,timeExtent:m,mosaicRule:d,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:o,pixelSize:i,returnCatalogItems:a,returnGeometry:p,raster:this.raster,maxItemCount:n?1:null});delete y.f;const g=new mi(y);try{await this._generateRasterInfo(this.rasterFunction);const i=await Ht(this.url,g,{signal:t?.signal,query:{...this.customParameters}}),n=e.outFields,o=null!=i.value&&i.value.toLowerCase().includes("nodata");if(!(a&&!p&&i?.catalogItems?.features.length&&(r||!o)))return this._processVisibleRastersResponse(i,{returnDomainValues:s,templateRRFunctionNames:l,showNoDataRecords:r,templateFields:n});const u=this.objectIdField||"ObjectId",c=i.catalogItems?.features??[],h=c.map((e=>e.attributes?.[u])),m=new N({objectIds:h,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[u]}),d=await this.queryRasters(m);return d?.features?.length&&d.features.forEach((t=>{c.forEach((i=>{i.attributes[u]===t.attributes[u]&&(i.geometry=new A(t.geometry),null!=e.outSpatialReference&&(i.geometry.spatialReference=e.outSpatialReference))}))})),this._processVisibleRastersResponse(i,{returnDomainValues:s,templateRRFunctionNames:l,showNoDataRecords:r,templateFields:n})}catch{throw new V("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const i=m(l(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>e.data?.statistics)),s=m(l(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>e.data?.histograms)),n=await Promise.all([i,s]);return n[0]&&n[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):Fe(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return we(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,i=null!=this.serviceRasterInfo?Promise.resolve(this.serviceRasterInfo):pe(l(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then((e=>(this._set("serviceRasterInfo",e),this._set("multidimensionalInfo",e.multidimensionalInfo),e))),s=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,n=this._getRasterFunctionInfos();return Promise.all([i,s,n]).then((e=>{e[1]?this._set("rasterInfo",e[1]):this._set("rasterInfo",e[0]),e[2]&&this._set("rasterFunctionInfos",e[2]),this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this._set("renderer",null),b.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("renderer",this._configRenderer(this.renderer)),this.addHandles([O((()=>this.rasterFunction),(e=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}))]);const{serviceRasterInfo:t}=this;null!=t.multidimensionalInfo&&this._updateMultidimensionalDefinition(t)}))}_combineMosaicRuleWithTimeExtent(e,t){const i=this.timeInfo,{multidimensionalInfo:s}=this.serviceRasterInfo;if(null==e||null==s||null==t||null==i?.startField)return e;const{startField:n}=i,r=s.variables.some((e=>e.dimensions.some((e=>e.name===n))))?n:"StdTime";if(e=e.clone(),"mosaic-dataset"===this.sourceType)return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter((e=>e.dimensionName!==r)),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const a=e.multidimensionalDefinition.filter((e=>e.dimensionName===r)),o=null!=t.start?t.start.getTime():null,l=null!=t.end?t.end.getTime():null,u=null==o||null==l||o===l,c=u?[o||l]:[[o,l]],p=this.version>=10.8;if(a.length)a.forEach((e=>{e.dimensionName===r&&(p?(e.dimensionName=null,e.isSlice=!1,e.values=[]):(e.isSlice=u,e.values=c))}));else if(!p){const t=e.multidimensionalDefinition.filter((e=>null!=e.variableName&&null==e.dimensionName));t.length?t.forEach((e=>{e.dimensionName=r,e.isSlice=u,e.values=c})):e.multidimensionalDefinition.push(new ve({variableName:"",dimensionName:r,isSlice:u,values:c}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return null==e?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter((e=>!(!e.variableName&&!e.dimensionName))),0===e.multidimensionalDefinition.length&&(e.multidimensionalDefinition=null)),"mosaic-dataset"!==this.sourceType&&null==e.multidimensionalDefinition?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQuery)throw new V("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=null!=e?C(N,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new ge;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>{})),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:i}=this;return"unique-value"===e.type&&this._hasRasterFunction(i)&&1===t?.bandCount&&["u8","s8"].includes(t.pixelType)||null!=t&&null!=e&&he(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let t=this.sourceJSON;if(!t){const{data:i,ssl:s}=await m(l(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=i,this.sourceJSON=t,s&&(this.url=this.url.replace(/^http:/i,"https:"))}if(t.capabilities?.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly")>-1)throw new V("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?"esriImageServiceSourceTypeMosaicDataset"===e.serviceSourceType:e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const t=this._isMosaicDataset(e),i=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return t||i}_isVectorFieldResampleFunction(e){if(null==e)return!1;const{functionName:t,functionArguments:i}=e,s="resample"===t?.toLowerCase(),n=i?.ResampleType||i?.resampleType;return s&&(7===n||10===n)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const t=this._isPicture(),{rasterInfo:i}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){if(!this.bandIds&&i.bandCount>=3){const e=me(i);!e||3===i.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}e||(e=de(i,{bandIds:this.bandIds,variableName:this.rasterFunction?null:this.mosaicRule?.multidimensionalDefinition?.[0].variableName}));const t=ye(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=t,this.symbolizer.rasterInfo=i):this.symbolizer=new Ne({rendererJSON:t,rasterInfo:i}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:null!=e.pixelBlock?e.pixelBlock.clone():null}}_getQueryParams(e){e&&null!=e.renderingRule&&"string"!=typeof e.renderingRule&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:i}=this;return{raster:t,viewId:i,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,t,i){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):Ae(e,t,i)}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;if(this.loaded)return t;if(t&&this.version>=10.3){if(1===t.length&&"none"===t[0].name.toLowerCase())return t;const i=await m(l(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e});return i.data?.rasterFunctionInfos}return null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:i,returnImageBitmap:s,signal:n}=e;if(i&&this._canRequestImageElement(t.format)){const i=`${l(this.parsedUrl)}/exportImage`,{data:r}=await m(i,{responseType:s?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:n});if(r instanceof Blob){return{imageBitmap:await Me(r,i,n),params:t}}return{imageOrCanvasElement:r,params:t}}const r=this._initJobHandler(),a=m(l(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:n}),o=(await Promise.all([a,r]))[0].data,u=t.format||"jpgpng";let c=u;if("bsq"!==c&&"bip"!==c&&(c=Oe(o)),!c)throw new V("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(o)));const p={signal:n},h="gif"===u||"bmp"===u||u.includes("png")&&("png"===c||"jpg"===c)?Ae(o,{useCanvas:!0,...t},p):this._decodePixelBlock(o,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:u},p);return{pixelData:{pixelBlock:await h,extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch((()=>null))}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=Re(e,{multidimensionalSubset:this.multidimensionalSubset});if(null!=t&&t.length>0){this.mosaicRule=this.mosaicRule||new se;const e=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&"none"!==this.rasterFunction.functionName?.toLowerCase()&&t.forEach((e=>e.variableName="")),t=t.filter((({variableName:e,dimensionName:t})=>e&&"*"!==e||t)),!e?.length&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const i=e.value,{templateRRFunctionNames:s,showNoDataRecords:n,returnDomainValues:r,templateFields:a}=t,o=e.processedValues;let l=e.catalogItems&&e.catalogItems.features,u=e.properties&&e.properties.Values&&e.properties.Values.map((e=>e.replaceAll(/ /gi,", ")))||[];const c=this.objectIdField||"ObjectId",p="string"==typeof i&&i.toLowerCase().includes("nodata"),h=[];if(i&&!l&&!p){const e={};e[c]=0;u=[i],l=[new M(this.fullExtent,null,e)]}if(!l)return[];let m,d,y;this._updateResponseFieldNames(l,a),p&&!n&&(l=[]);for(let e=0;e<l.length;e++){if(m=l[e],null!=i){if(d=u[e],y=this.rasterFunction&&o&&o.length>0&&s&&s.length>0&&s.includes(this.rasterFunction.functionName)?o[s.indexOf(this.rasterFunction.functionName)]:i,"nodata"===d.toLowerCase()&&!n)continue;const t="Raster.ItemPixelValue",r="Raster.ServicePixelValue";m.attributes[t]=d,m.attributes[r]=y,this._updateFeatureWithMagDirValues(m,d);const a=this.fields&&this.fields.length>0;let l=this.rasterFunction&&null!=this.serviceRasterInfo.attributeTable?a?d:i:y;this.rasterFunction||(l=a?d:i),this._updateFeatureWithRasterAttributeTableValues(m,l)}if(m.sourceLayer=m.layer=this,r&&this._updateFeatureWithDomainValues(m),s&&o&&s.length===o.length)for(let e=0;e<s.length;e++){const t="Raster.ServicePixelValue."+s[e];m.attributes[t]=o[e]}h.push(l[e])}return h}_processMultidimensionalIntersection(e,t,i){const{multidimensionalSubset:s}=this;if(!s)return{isOutSide:!1,timeExtent:t,mosaicRule:i=this._combineMosaicRuleWithTimeExtent(i,t)};if(s){const{isOutside:i,intersection:n}=fe(s,{geometry:e,timeExtent:t});if(i)return{isOutSide:!0,timeExtent:null,mosaicRule:null};n&&null!=n.timeExtent&&(t=n.timeExtent)}if(null!=(i=this._combineMosaicRuleWithTimeExtent(i,t))&&i.multidimensionalDefinition){const{isOutside:e}=fe(s,{multidimensionalDefinition:i.multidimensionalDefinition});if(e)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:i}}_updateFeatureWithRasterAttributeTableValues(e,t){const i=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(null==i)return;const{features:s,fields:n}=i,r=n.map((e=>e.name)).filter((e=>"value"===e.toLowerCase())),a=r&&r[0];if(!a)return;const o=s.filter((e=>e.attributes[a]===(null!=t?parseInt(t,10):null)));o&&o[0]&&n.forEach((t=>{const i=this._rasterAttributeTableFieldPrefix+t.name;e.attributes[i]=o[0].attributes[t.name]}))}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const i=t.split(/,\s*/).map((e=>parseFloat(e))),s=i.map((e=>[e])),n=i.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),r=new Se({height:1,width:1,pixelType:"f32",pixels:s,statistics:n});null!=this.pixelFilter&&this.pixelFilter({pixelBlock:r,extent:new d(0,0,0,0,this.spatialReference)});const a="esriImageServiceDataTypeVector-MagDir"===this.serviceDataType?[r.pixels[0][0],r.pixels[1][0]]:xe([r.pixels[0][0],r.pixels[1][0]]);e.attributes["Raster.Magnitude"]=a[0],e.attributes["Raster.Direction"]=a[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const i=e.attributes[t.name];if(null!=i){const s=t.domain.codedValues.find((e=>e.code===i));s&&(e.attributes[t.name]=s.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const i=this.fieldsIndex;null!=i&&e.forEach((e=>{if(e&&e.attributes)for(const s of t){const t=i.get(s)?.name;t&&t!==s&&(e.attributes[s]=e.attributes[t],delete e.attributes[t])}}))}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return null!=e&&null!=e.functionName&&"none"!==e.functionName.toLowerCase()}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const i=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(i)?t.get(i):e}_isRFTJson(e){return e&&e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return"esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:i,rasterFunction:s}=this;s&&e instanceof ue&&null==e.rasterFunction&&(e.rasterFunction=s),i&&null==e.mosaicRule&&(e.mosaicRule=i),t&&null==e.raster&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:i,advancedQueryCapabilities:s,maxRecordCount:n}=e,r=t.includes("image"),a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!!(e.spatialReference||e.extent&&e.extent.spatialReference),l=t.includes("edit"),u=t.includes("mensuration")&&o,c=null==e.mensurationCapabilities?[]:e.mensurationCapabilities.toLowerCase().split(",").map((e=>e.trim())),p=u&&c.includes("basic");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:r,supportsExportImage:r,supportsIdentify:r,supportsMeasure:u,supportsDownload:t.includes("download"),supportsQuery:t.includes("catalog")&&e.fields&&e.fields.length>0,supportsGetSamples:i>=10.2&&r,supportsProject:i>=10.3&&r,supportsComputeStatisticsHistograms:i>=10.4&&r,supportsQueryBoundary:i>=10.6&&r,supportsCalculateVolume:i>=10.7&&a,supportsComputePixelLocation:i>=10.7&&t.includes("catalog"),supportsComputeAngles:i>=10.91,supportsAdd:l,supportsDelete:l,supportsEditing:l,supportsUpdate:l,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:n,maxRecordCountFactor:void 0,supportsStatistics:!!s?.supportsStatistics,supportsOrderBy:!!s?.supportsOrderBy,supportsDistinct:!!s?.supportsDistinct,supportsPagination:!!s?.supportsPagination,supportsStandardizedQueriesOnly:!!s?.useStandardizedQueries,supportsPercentileStatistics:!!s?.supportsPercentileStatistics,supportsCentroid:!!s?.supportsReturningGeometryCentroid,supportsDistance:!!s?.supportsQueryWithDistance,supportsExtent:!!s?.supportsReturningQueryExtent,supportsGeometryProperties:!!s?.supportsReturningGeometryProperties,supportsHavingClause:!!s?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!s?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0},mensuration:{supportsDistanceAndAngle:p,supportsAreaAndPerimeter:p,supportsPointOrCentroid:p,supportsHeightFromBaseAndTop:u&&c.includes("base-top height"),supportsHeightFromBaseAndTopShadow:u&&c.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:u&&c.includes("top-top shadow height"),supports3D:u&&c.includes("3d")}}}};function l(e){return e?.path??""}return i([s()],a.prototype,"_functionRasterInfos",void 0),i([s()],a.prototype,"_rasterJobHandler",void 0),i([s()],a.prototype,"_cachedRendererJson",void 0),i([s({readOnly:!0})],a.prototype,"_serviceSupportsMosaicRule",void 0),i([x("_serviceSupportsMosaicRule",["currentVersion","fields"])],a.prototype,"readServiceSupportsMosaicRule",null),i([s()],a.prototype,"_rasterAttributeTableFieldPrefix",void 0),i([s({readOnly:!0})],a.prototype,"_rasterFunctionNamesIndex",null),i([s()],a.prototype,"adjustAspectRatio",void 0),i([s({type:[y],json:{write:!0}})],a.prototype,"bandIds",void 0),i([x("bandIds")],a.prototype,"readBandIds",null),i([s({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),i([x("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),i([s({type:Number})],a.prototype,"compressionQuality",void 0),i([n("compressionQuality")],a.prototype,"writeCompressionQuality",null),i([s({type:Number})],a.prototype,"compressionTolerance",void 0),i([n("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),i([s({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),i([s({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],a.prototype,"defaultMosaicRule",void 0),i([x("defaultMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultMosaicRule",null),i([s({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],a.prototype,"definitionExpression",void 0),i([s({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),i([s()],a.prototype,"rasterInfo",void 0),i([s({readOnly:!0,type:[I]})],a.prototype,"fields",void 0),i([s({readOnly:!0})],a.prototype,"fieldsIndex",null),i([s({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],a.prototype,"format",null),i([x("service","format",["serviceDataType"])],a.prototype,"readFormat",null),i([s({type:d})],a.prototype,"fullExtent",void 0),i([s({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),i([s({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),i([s({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),i([s({type:String,json:{type:te.jsonValues,read:te.read,write:te.write}})],a.prototype,"interpolation",void 0),i([s()],a.prototype,"minScale",void 0),i([x("service","minScale")],a.prototype,"readMinScale",null),i([s()],a.prototype,"maxScale",void 0),i([x("service","maxScale")],a.prototype,"readMaxScale",null),i([s({type:se})],a.prototype,"mosaicRule",null),i([x("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),i([n("mosaicRule")],a.prototype,"writeMosaicRule",null),i([s()],a.prototype,"multidimensionalInfo",void 0),i([s({type:ne,json:{write:!0}})],a.prototype,"multidimensionalSubset",void 0),i([s({json:{type:y}})],a.prototype,"noData",void 0),i([n("noData")],a.prototype,"writeNoData",null),i([s({type:String,json:{type:ie.jsonValues,read:ie.read,write:ie.write}})],a.prototype,"noDataInterpretation",void 0),i([s({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),i([x("objectIdField")],a.prototype,"readObjectIdField",null),i([s({})],a.prototype,"geometryType",void 0),i([s({})],a.prototype,"typeIdField",void 0),i([s({})],a.prototype,"types",void 0),i([s({readOnly:!0})],a.prototype,"parsedUrl",null),i([s({type:Function})],a.prototype,"pixelFilter",void 0),i([s()],a.prototype,"raster",void 0),i([s({readOnly:!0})],a.prototype,"sourceType",void 0),i([x("sourceType",["serviceSourceType","fields"])],a.prototype,"readSourceType",null),i([s()],a.prototype,"viewId",void 0),i([s({types:re,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:ae,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],a.prototype,"renderer",null),i([x("renderer")],a.prototype,"readRenderer",null),i([n("renderer")],a.prototype,"writeRenderer",null),i([s()],a.prototype,"symbolizer",void 0),i([s(j)],a.prototype,"opacity",void 0),i([s({readOnly:!0})],a.prototype,"rasterFields",null),i([s({constructOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),i([s({type:ee})],a.prototype,"renderingRule",null),i([s({type:ee,json:{name:"renderingRule"}})],a.prototype,"rasterFunction",null),i([x("rasterFunction",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRasterFunction",null),i([s()],a.prototype,"serviceDataType",void 0),i([s({readOnly:!0,type:o})],a.prototype,"spatialReference",void 0),i([x("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),i([s({json:{type:oe.jsonValues}})],a.prototype,"pixelType",void 0),i([x("pixelType")],a.prototype,"readPixelType",null),i([n("pixelType")],a.prototype,"writePixelType",null),i([s({constructOnly:!0,type:Ve})],a.prototype,"serviceRasterInfo",void 0),i([s()],a.prototype,"sourceJSON",void 0),i([s(D)],a.prototype,"url",void 0),i([s({readOnly:!0})],a.prototype,"version",void 0),i([x("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=i([r("esri.layers.mixins.ArcGISImageService")],a),a};let Di=class extends(q(E(z(H(B(ji(U(J(L(k(Q))))))))))){constructor(...e){super(...e),this.legendEnabled=!0,this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(W).then((()=>this._fetchService(t)))),Promise.resolve(this)}writeOperationalLayerType(e,t,i){const s="vector-field"===this.renderer?.type;t[i]=s?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}createPopupTemplate(e){const t=this.rasterFields,i=this.title,s=new Set;let n=!1,r=!1;this.capabilities&&(n=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,r="esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType);const a=new Set;n&&a.add("raster.itempixelvalue");for(const e of t){const t=e.name.toLowerCase();a.has(t)||t.includes("raster.servicepixelvalue.")||s.add(e.name)}return r&&s.add("raster.magnitude").add("raster.direction"),$({fields:t,title:i},{...e,visibleFieldNames:s})}queryFeatures(e,t){return this.queryRasters(e,t).then((e=>{if(e?.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryFeatureCount(e,t){return this.queryRasterCount(e,t)}redraw(){this.emit("redraw")}serviceSupportsSpatialReference(e){return K(this,e)}};i([s(Z)],Di.prototype,"legendEnabled",void 0),i([s({type:["show","hide"]})],Di.prototype,"listMode",void 0),i([s({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Di.prototype,"isReference",void 0),i([s({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],Di.prototype,"operationalLayerType",void 0),i([n("web-map","operationalLayerType")],Di.prototype,"writeOperationalLayerType",null),i([s(X)],Di.prototype,"popupEnabled",void 0),i([s({type:Y,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],Di.prototype,"popupTemplate",void 0),i([s({readOnly:!0})],Di.prototype,"defaultPopupTemplate",null),i([s({readOnly:!0,json:{read:!1}})],Di.prototype,"type",void 0),Di=i([r("esri.layers.ImageryLayer")],Di);const Ti=Di;export default Ti;
//# sourceMappingURL=p-751e9df4.js.map