{"version":3,"names":["cedarColors","blue","gray","red","white","convertCedar","cedar","title","json","version","type","dataSource","convertData","id","background","cursorCrosshair","style","color","width","horizontalLineVisible","verticalLineVisible","content","text","font","size","series","axes","convertAxes","map","set","index","push","convertSet","legend","convertLegend","visible","category","label","weight","body","position","convertChartType","source","name","value","query","datasets","x","field","y","colorType","markerSymbol","fillSymbol","outline","lineSymbol","dataLabels","axesVisible","convertFontSize","labels","valueFormat","convertValueFormat","grid","url","layer","layerType","data","processed","dataItems","features","f","attributes","seriesConfig","intlOptions","notation","minimumFractionDigits","maximumFractionDigits","characterLimit","_cedar","cedarChartCss","CedarChart","async","this","loadChart","componentWillRender","console","debug","configUrl","response","fetch","chartConfig","cedarUrl","chartType","_a","chartTitle","config","JSON","stringify","loadingComplete","evt","dataError","error","updateComplete","render","renderChart","h","Host","renderSource","onClick","_ev","sourceEl","classList","toggle","class","ref","el","replace","renderBarChart","renderLineChart","renderPieChart","renderScatterChart","cedarTableCss","CedarTable","renderTable","Object","keys","column","row"],"sources":["./src/util/converter.ts","./src/components/cedar-chart/cedar-chart.css?tag=cedar-chart&encapsulation=shadow","./src/components/cedar-chart/cedar-chart.tsx","./src/components/cedar-table/cedar-table.css?tag=cedar-table&encapsulation=shadow","./src/components/cedar-table/cedar-table.tsx"],"sourcesContent":["/**\n * This script will convert Cedar chart definitions into ArcGIS Chart specifications. \n * \n * Not all chart types or functionality is supported yet. This script is an initial version that will progressively add more conversion capabilities.\n */\n\nimport { \n  CategoryFormatOptions, \n  DateTimeFormatOptions, \n  NumberFormatOptions, \n  WebChart, \n  WebChartAxis, \n  WebChartDataSources, \n  WebChartLegend, \n  WebChartSeriesType \n} from \"@arcgis/charts-spec\";\n\n// @ts-ignore - where to get Color type?\nconst cedarColors:Record<any,Color> = {\n  blue: [0, 121, 193, 255],\n  gray: [128, 128, 128, 200],\n  red: [255, 0, 0, 200],\n  white: [255, 255, 255, 255]\n}\n\n/**\n * Draft function for converting Cedar bar charts to ArcGIS Charts\n * @param cedar\n * @returns\n */\nexport function convertCedar(cedar, title=\"\") {\n\n  const json: WebChart = {\n    //@ts-ignore\n    version: \"1.0.0\",\n    type: \"chart\",\n    dataSource: convertData(cedar),\n    id: \"Chart\",\n    background: cedarColors.white,\n    cursorCrosshair: {\n      type: \"cursorCrosshair\",\n      style: {\n        type: \"esriSLS\",\n        style: \"esriSLSDash\",\n        color: cedarColors.red,\n        width: 1,\n      },\n      horizontalLineVisible: true,\n      verticalLineVisible: true,\n    },\n    title: {\n      type: \"chartText\",\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.gray,\n        text: title,\n        font: {\n          size: 20,\n        },\n      },\n    },\n    series: [],\n    // @ts-ignore // we'll add this below\n    axes: [],\n  };\n\n  json.axes = convertAxes(cedar);\n\n  cedar.series.map((set, index) => {\n    json.series.push(convertSet(cedar, set, index));\n\n  });\n\n  json.legend = convertLegend(cedar);\n\n  return json;\n}\n\n/**\n * Creates an ArcGIS Charts legend from Cedar definition\n * @param cedar Cedar definition\n * @returns \n */\nfunction convertLegend(cedar: any): WebChartLegend {\n  return {\n    type: \"chartLegend\",\n    visible: true,\n    title: {\n      type: \"chartText\",\n      visible: true,\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.white,\n        text: cedar.series[0].category.label,\n        font: {\n          size: 14,\n          weight: \"bold\",\n        },\n      },\n    },\n    body: {\n      type: \"esriTS\",\n      color: cedarColors.white,\n      font: {\n        size: 12,\n      },\n    },\n    position: \"right\",\n  };\n}\n\n/**\n * Creates an ArcGIS Charts Set (a single Series) from Cedar definition\n * @param cedar Cedar definition\n */\nfunction convertSet(cedar: any, set: any, index: any): WebChartSeriesType {\n  return {\n    type: convertChartType(cedar),\n    id: set.source || `chart${index}`,\n    name: set.value.label,\n    query: cedar.datasets[0].query || {},\n    x: set.category.field,\n    y: set.value.field,\n    colorType: \"singleColor\",\n    // stackedType: \"sideBySide\",\n    markerSymbol: {\n      type: \"esriSMS\",\n      style: \"esriSMSCircle\",\n      size: 5\n    },\n    fillSymbol: {\n      type: \"esriSFS\",\n      color: [0, 121, 193, 200],\n      outline: {\n        type: \"esriSLS\",\n        color: cedarColors.white,\n        width: 1,\n      },\n    },\n    lineSymbol: {\n      type: \"esriSLS\",\n      width: 1\n    },\n    dataLabels: {\n      type: \"chartText\",\n      visible: false,\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.blue,\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Creates an ArcGIS Charts axis pair from Cedar definition\n * @param cedar Cedar definition\n * @returns Dependent and independent axes based on category, number, or time\n */\nfunction convertAxes(cedar: any): [WebChartAxis, WebChartAxis?] {\n  return [\n    {\n      type: \"chartAxis\",\n      visible: axesVisible(cedar),\n      title: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          text: cedar.series[0].category.label,\n          font: convertFontSize(cedar)\n        }\n      },\n      labels: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          font: convertFontSize(cedar)\n        }\n      },\n      valueFormat: convertValueFormat(cedar.series[0].category),\n      lineSymbol: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 2\n      }\n    },\n    {\n      type: \"chartAxis\",\n      visible: axesVisible(cedar),\n      title: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          text: cedar.series[0].value.label,\n          font: convertFontSize(cedar)\n        }\n      },\n      labels: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          font: convertFontSize(cedar)\n        }\n      },\n      valueFormat: convertValueFormat(cedar.series[0].value),\n      grid: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 1\n      },\n      lineSymbol: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 2\n      }\n    }\n  ];\n}\n\n/**\n * Creates an ArcGIS Charts data source for feature layer in inline from the Cedar definition\n * @param cedar Cedar definition\n * @returns \n */\nfunction convertData(cedar): WebChartDataSources {\n\n  let dataSource = {} as WebChartDataSources;\n  // Dynamic data\n  if(!!cedar.datasets[0].url) {\n    dataSource = {\n      type: \"layer\",\n      layer: {\n        layerType: \"ArcGISFeatureLayer\",\n        id: \"\",\n        url: cedar.datasets[0].url,\n      },\n    }\n  }\n  // Inline data\n  if(!!cedar.datasets[0].data) {\n    dataSource = {\n      type: \"inline\",\n      processed: true,\n      data: {\n        dataItems: cedar.datasets[0].data.features.map((f) => {\n          return f.attributes\n        }),\n      },\n    }\n  }\n\n  return dataSource;\n\n}\n\n/**\n * Convert Cedar axis config to ArcGIS charts axis config\n * Defaults to Category\n * @param seriesConfig \n * @returns \n */\nfunction convertValueFormat( seriesConfig ) {\n  if(seriesConfig?.type === \"timestamp\") {\n    return ({\n      type: \"date\",\n      intlOptions: {}\n    } as DateTimeFormatOptions);\n  } else if(seriesConfig.type === \"number\") {\n    return ({\n      type: \"number\",\n      intlOptions: {\n        style: \"decimal\",\n        notation: \"compact\",\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }\n    } as NumberFormatOptions);\n  } else {\n    return({\n      type: \"category\",\n      characterLimit: 11,\n      intlOptions: {}\n    } as CategoryFormatOptions);\n  }\n   \n}\n\nfunction convertChartType(cedar) {\n  switch(cedar.type) {\n    case 'sparkline': {\n      return 'lineSeries';\n    }\n    case 'line': {\n      return 'lineSeries';\n    }\n    case 'bar': {\n      return 'barSeries';\n    }\n  }\n}\n\nfunction convertFontSize( _cedar ) {\n  return({\n    size: 14\n  })\n}\nfunction axesVisible( cedar ) {\n  return cedar.type !== 'sparkline';\n}\n\n",":host {\n  display: block;\n}\n.chart {\n  height: 100%;\n}\n.source {\n  display: none;\n  \n  z-index: 1000;\n  overflow: auto;\n  height: 300px;\n  border: 1px solid gray;\n  \n  grid-template-columns: 50% 50%;\n  grid-column-gap: 0px;\n}\n.source-cedar {\n  grid-column: 1;\n  overflow: auto;\n}\n.source-chart {\n  grid-column: 2;\n  overflow: auto;\n}\n.source.visible {\n  display: grid;\n}","import { Component, Host, h, State, Listen, Prop, Watch } from '@stencil/core';\n// import { feature_layer_chart } from '../../data/charts';\n\n// import \"arcgis-charts-components\";\nimport '@arcgis/charts-components';\n// import \"arcgis-charts-components/dist/components/index\";\n// import { setAssetPath  } from \"@arcgis/charts-components/dist/components\";\nimport { WebChart } from '@arcgis/charts-spec';\n\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-bar-chart\";\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-scatter-plot\";\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-histogram\";\n\nimport \"@arcgis/charts-components/dist/arcgis-charts-components/arcgis-charts-components.css\";\nimport { convertCedar } from '../../util/converter';\n\n// import { defineCustomElements } from \"@arcgis/charts-components/dist/loader\";\n// // Local assets\n// defineCustomElements(window);\n\n// TODO: load charts only when chart used: https://stackoverflow.com/questions/60633526/how-to-use-an-external-third-party-library-in-stencil-js\n\n@Component({\n  tag: 'cedar-chart',\n  styleUrl: 'cedar-chart.css',\n  shadow: true,\n})\nexport class CedarChart {\n  \n  /** \n   * URL to an ArcGIS Charts config\n   */\n  @Prop() configUrl:string = null;\n\n  /**\n   * URL to an ArcGIS Cedar Config\n   */\n  @Prop() cedarUrl:string = null;\n\n  /**\n   * Optional inline data override to cedar\n   * This is a FeatureSet, for cedar\n   * If a general array is used, it will need to drop 'attributes'\n   */\n  @Prop() data:any = null\n\n  /**\n   * Optional Chart title\n   */\n  @Prop() chartTitle:string = \"\";\n\n  /** \n   * ArcGIS Charts Config\n   */\n  @Prop({mutable: true, reflect: true}) config: WebChart = null;\n\n  /**\n   * ArcGIS Cedar Config\n   */\n  @Prop({mutable: true, reflect: true}) cedar:any = null;\n\n  @State() chartType: 'bar' | 'line' | 'sparkline' = 'bar';\n  \n  /**\n   * Final stored state to render.\n   * Prevents circular updates with the config Prop\n   */\n  @State() chartConfig: WebChart = null;\n  \n  async componentWillLoad() {\n    await this.loadChart();\n  }\n  \n  componentWillRender() {\n    console.debug(\"cedar-chart: componentWillRender()\");\n  }\n\n  \n  @Watch('cedar')\n  @Watch('cedarUrl')\n  @Watch('data')\n  @Watch('config')\n  async loadChart() {\n    if(!!this.configUrl) {\n      console.debug(\"cedar-chart: loadChart(configUrl)\", this.configUrl);\n      const response = await fetch(this.configUrl);\n      this.chartConfig = await response.json();\n    } else if (!!this.cedarUrl) {\n      console.debug(\"cedar-chart: loadChart(cedarUrl)\", this.cedarUrl);\n      const response = await fetch(this.cedarUrl);\n      this.cedar = await response.json();\n      \n      // TODO: move this to check the final ArcGIS chart type.\n      this.chartType = this.cedar?.type;\n\n      // If component is sending in specific data\n      // e.g. telemetry data\n      if(!!this.data) {\n        this.cedar.datasets[0].data.features = this.data;\n      }\n      console.debug(\"cedar-chart: Chart cedar converting...\", {\n        cedar: this.cedar,\n      });\n      this.chartConfig = convertCedar( this.cedar, this.chartTitle );\n    } else if (!!this.cedar) {\n      console.debug(\"cedar-chart: loadChart(cedar)\", this.cedar);\n\n      this.chartConfig = convertCedar( this.cedar, this.chartTitle || \"\" );\n    } else if (!!this.config) {\n      console.debug(\"cedar-chart: loadChart(config)\", this.cedar);\n      this.chartConfig = this.config;\n    } else {\n      console.debug(\"cedar-chart: no load option?\");\n\n    }\n    console.debug(\"cedar-chart: Chart config loaded\", {\n      cedar: this.cedar,\n      configUrl: this.configUrl,\n      cedarUrl: this.cedarUrl,\n      config: this.config,\n      json: JSON.stringify(this.config)\n    })\n  }\n\n  @Listen('arcgisChartsDataProcessComplete')\n  loadingComplete(evt)  {\n    console.debug(\"arcgisChartsDataProcessComplete\", evt);\n  }\n\n  @Listen('arcgisChartsDataProcessError')\n  dataError(evt) {\n    console.error(\"arcgisChartsDataProcessError\", evt);\n  }\n\n  @Listen('arcgisChartsUpdateComplete')\n  updateComplete(evt) {\n    console.debug(\"arcgisChartsUpdateComplete\", evt);\n  }\n\n  render() {\n    console.debug(\"cedar-chart: Rendering chart\", {config: this.chartConfig})\n    let content = null;\n    if(!!this.chartConfig) {\n     content = this.renderChart(this.chartConfig)\n    }\n    return (\n      <Host>\n        <slot></slot>\n        {content}\n        {/* {this.renderSource()} */}\n      </Host>\n    );\n  }\n\n  private sourceEl;\n  renderSource() {\n    return( [\n      <a onClick={(_ev) => this.sourceEl.classList.toggle('visible')}>source</a>\n      ,\n      <div class=\"source\" ref={(el) => this.sourceEl = el}>\n        <code class=\"source-cedar\">\n          Cedar\n          {JSON.stringify(this.cedar)}\n        </code>\n        <code class=\"source-chart\">\n          ArcGIS Charts\n          {JSON.stringify(this.config)}\n        </code>\n      </div>]\n    )\n  }\n  renderChart(config) {\n    const type = config.chartType || config.series[0].type.replace(/Series/,'');\n    console.debug(\"cedar-chart: renderChart\", {type, config})\n\n    switch(type) {\n      case 'bar': {\n        return this.renderBarChart(config);\n      }\n      case 'line': {\n        return this.renderLineChart(config);\n      }\n      case 'sparkline': {\n        return this.renderLineChart(config);\n      }\n      case 'pie': {\n        return this.renderPieChart(config);\n      }\n      case 'scatter': {\n        return this.renderScatterChart(config);\n      }      \n      default: {\n        return (<strong>`{type}` is not a recognized chart type</strong>)\n      }\n    }\n  }\n\n\n  renderPieChart(config) {\n    return ([\n      <h3>Pie Chart</h3>,\n      <arcgis-charts-pie-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-pie-chart>\n    ]\n    )\n  }\n\n\n  renderScatterChart(config) {\n    return ([\n      <h3>Scatter Plot</h3>,\n      <arcgis-charts-scatter-plot \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-scatter-plot>\n    ]\n    )\n  }  \n\n  renderLineChart(config) {\n    return ([\n      <h3>Line Chart</h3>,\n      <arcgis-charts-line-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-line-chart>\n    ]\n      \n    )\n  }\n\n\n  renderBarChart(config) {\n    console.debug(\"rendering Bar Chart\", {config})\n    return ([\n      <h3>Bar Chart</h3>,\n      <arcgis-charts-bar-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-bar-chart>\n    ]\n    )\n  }\n\n}\n",":host {\n  display: block;\n}\ntable {\n  font-weight: 400;\n}\nthead {\n  border-bottom: 1px solid gray;\n}","import { Component, Host, Prop, h } from '@stencil/core';\n// import { fetchTelemetry } from '../../util/telemetry';\n// import { ITelemetryResponse } from '@esri/telemetry-reporting-client';\n\n@Component({\n  tag: 'cedar-table',\n  styleUrl: 'cedar-table.css',\n  shadow: true,\n})\nexport class CedarTable {\n\n  @Prop() data:any;\n\n  // @State() report:ITelemetryResponse;\n\n  // async componentWillLoad() {\n  //   this.report = await fetchTelemetry();\n  //   console.log(\"telemetry response\", this.report)\n  // }\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n        <table>\n          {this.renderTable()}\n        </table>\n      </Host>\n    );\n  }\n\n  renderTable() {\n    return([\n      <thead>\n        <tr>\n          {Object.keys(this.data[0]).map((column) => {\n            return <th>{column}</th>\n          })}\n        </tr>\n      </thead>,\n      <tbody>\n        {this.data.map(row => {\n          return (<tr>\n          {Object.keys(row).map((column) => {\n              return (<th>{row[column]}</th>)\n            })}\n          </tr>)\n        })}\n\n      </tbody>\n    ])\n  }\n\n}\n"],"mappings":"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"}