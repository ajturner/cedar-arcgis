{"file":"cedar-chart.entry.esm.js","mappings":"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","names":[],"sources":["./node_modules/@arcgis/charts-components/dist/arcgis-charts-components/arcgis-charts-components.css","./src/util/converter.ts","./src/components/cedar-chart/cedar-chart.css?tag=cedar-chart&encapsulation=shadow","./src/components/cedar-chart/cedar-chart.tsx"],"sourcesContent":[":root{--arcgis-charts-curtain-opacity:1;--arcgis-charts-popup-ol-padding:2em;--arcgis-charts-popup-body-padding-left:0;--arcgis-charts-default-width:100%;--arcgis-charts-default-height:100%}","/**\n * This script will convert Cedar chart definitions into ArcGIS Chart specifications. \n * \n * Not all chart types or functionality is supported yet. This script is an initial version that will progressively add more conversion capabilities.\n */\n\nimport { \n  CategoryFormatOptions, \n  DateTimeFormatOptions, \n  NumberFormatOptions, \n  WebChart, \n  WebChartAxis, \n  WebChartDataSources, \n  WebChartLegend, \n  WebChartSeriesType \n} from \"@arcgis/charts-spec\";\n\n// @ts-ignore - where to get Color type?\nconst cedarColors:Record<any,Color> = {\n  blue: [0, 121, 193, 255],\n  gray: [128, 128, 128, 200],\n  red: [255, 0, 0, 200],\n  white: [255, 255, 255, 255]\n}\n\n/**\n * Draft function for converting Cedar bar charts to ArcGIS Charts\n * @param cedar\n * @returns\n */\nexport function convertCedar(cedar, title=\"\") {\n\n  const json: WebChart = {\n    //@ts-ignore\n    version: \"1.0.0\",\n    type: \"chart\",\n    dataSource: convertData(cedar),\n    id: \"Chart\",\n    background: cedarColors.white,\n    cursorCrosshair: {\n      type: \"cursorCrosshair\",\n      style: {\n        type: \"esriSLS\",\n        style: \"esriSLSDash\",\n        color: cedarColors.red,\n        width: 1,\n      },\n      horizontalLineVisible: true,\n      verticalLineVisible: true,\n    },\n    title: {\n      type: \"chartText\",\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.gray,\n        text: title,\n        font: {\n          size: 20,\n        },\n      },\n    },\n    series: [],\n    // @ts-ignore // we'll add this below\n    axes: [],\n  };\n\n  json.axes = convertAxes(cedar);\n\n  cedar.series.map((set, index) => {\n    json.series.push(convertSet(cedar, set, index));\n\n  });\n\n  json.legend = convertLegend(cedar);\n\n  return json;\n}\n\n/**\n * Creates an ArcGIS Charts legend from Cedar definition\n * @param cedar Cedar definition\n * @returns \n */\nfunction convertLegend(cedar: any): WebChartLegend {\n  return {\n    type: \"chartLegend\",\n    visible: true,\n    title: {\n      type: \"chartText\",\n      visible: true,\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.white,\n        text: cedar.series[0].category.label,\n        font: {\n          size: 14,\n          weight: \"bold\",\n        },\n      },\n    },\n    body: {\n      type: \"esriTS\",\n      color: cedarColors.white,\n      font: {\n        size: 12,\n      },\n    },\n    position: \"right\",\n  };\n}\n\n/**\n * Creates an ArcGIS Charts Set (a single Series) from Cedar definition\n * @param cedar Cedar definition\n */\nfunction convertSet(cedar: any, set: any, index: any): WebChartSeriesType {\n  return {\n    type: convertChartType(cedar),\n    id: set.source || `chart${index}`,\n    name: set.value.label,\n    query: cedar.datasets[0].query || {},\n    x: set.category.field,\n    y: set.value.field,\n    colorType: \"singleColor\",\n    // stackedType: \"sideBySide\",\n    markerSymbol: {\n      type: \"esriSMS\",\n      style: \"esriSMSCircle\",\n      size: 5\n    },\n    fillSymbol: {\n      type: \"esriSFS\",\n      color: [0, 121, 193, 200],\n      outline: {\n        type: \"esriSLS\",\n        color: cedarColors.white,\n        width: 1,\n      },\n    },\n    lineSymbol: {\n      type: \"esriSLS\",\n      width: 1\n    },\n    dataLabels: {\n      type: \"chartText\",\n      visible: false,\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.blue,\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Creates an ArcGIS Charts axis pair from Cedar definition\n * @param cedar Cedar definition\n * @returns Dependent and independent axes based on category, number, or time\n */\nfunction convertAxes(cedar: any): [WebChartAxis, WebChartAxis?] {\n  return [\n    {\n      type: \"chartAxis\",\n      visible: axesVisible(cedar),\n      title: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          text: cedar.series[0].category.label,\n          font: convertFontSize(cedar)\n        }\n      },\n      labels: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          font: convertFontSize(cedar)\n        }\n      },\n      valueFormat: convertValueFormat(cedar.series[0].category),\n      lineSymbol: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 2\n      }\n    },\n    {\n      type: \"chartAxis\",\n      visible: axesVisible(cedar),\n      title: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          text: cedar.series[0].value.label,\n          font: convertFontSize(cedar)\n        }\n      },\n      labels: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          font: convertFontSize(cedar)\n        }\n      },\n      valueFormat: convertValueFormat(cedar.series[0].value),\n      grid: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 1\n      },\n      lineSymbol: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 2\n      }\n    }\n  ];\n}\n\n/**\n * Creates an ArcGIS Charts data source for feature layer in inline from the Cedar definition\n * @param cedar Cedar definition\n * @returns \n */\nfunction convertData(cedar): WebChartDataSources {\n\n  let dataSource = {} as WebChartDataSources;\n  // Dynamic data\n  if(!!cedar.datasets[0].url) {\n    dataSource = {\n      type: \"layer\",\n      layer: {\n        layerType: \"ArcGISFeatureLayer\",\n        id: \"\",\n        url: cedar.datasets[0].url,\n      },\n    }\n  }\n  // Inline data\n  if(!!cedar.datasets[0].data) {\n    dataSource = {\n      type: \"inline\",\n      processed: true,\n      data: {\n        dataItems: cedar.datasets[0].data.features.map((f) => {\n          return f.attributes\n        }),\n      },\n    }\n  }\n\n  return dataSource;\n\n}\n\n/**\n * Convert Cedar axis config to ArcGIS charts axis config\n * Defaults to Category\n * @param seriesConfig \n * @returns \n */\nfunction convertValueFormat( seriesConfig ) {\n  if(seriesConfig?.type === \"timestamp\") {\n    return ({\n      type: \"date\",\n      intlOptions: {}\n    } as DateTimeFormatOptions);\n  } else if(seriesConfig.type === \"number\") {\n    return ({\n      type: \"number\",\n      intlOptions: {\n        style: \"decimal\",\n        notation: \"compact\",\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }\n    } as NumberFormatOptions);\n  } else {\n    return({\n      type: \"category\",\n      characterLimit: 11,\n      intlOptions: {}\n    } as CategoryFormatOptions);\n  }\n   \n}\n\nfunction convertChartType(cedar) {\n  switch(cedar.type) {\n    case 'sparkline': {\n      return 'lineSeries';\n    }\n    case 'line': {\n      return 'lineSeries';\n    }\n    case 'bar': {\n      return 'barSeries';\n    }\n  }\n}\n\nfunction convertFontSize( _cedar ) {\n  return({\n    size: 14\n  })\n}\nfunction axesVisible( cedar ) {\n  return cedar.type !== 'sparkline';\n}\n\n",":host {\n  display: block;\n}\n.chart {\n  height: 100%;\n}\n.source {\n  display: none;\n  \n  z-index: 1000;\n  overflow: auto;\n  height: 300px;\n  border: 1px solid gray;\n  \n  grid-template-columns: 50% 50%;\n  grid-column-gap: 0px;\n}\n.source-cedar {\n  grid-column: 1;\n  overflow: auto;\n}\n.source-chart {\n  grid-column: 2;\n  overflow: auto;\n}\n.source.visible {\n  display: grid;\n}","import { Component, Host, h, State, Listen, Prop, Watch } from '@stencil/core';\n// import { feature_layer_chart } from '../../data/charts';\n\n// import \"arcgis-charts-components\";\nimport '@arcgis/charts-components';\n// import \"arcgis-charts-components/dist/components/index\";\n// import { setAssetPath  } from \"@arcgis/charts-components/dist/components\";\nimport { WebChart } from '@arcgis/charts-spec';\n\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-bar-chart\";\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-scatter-plot\";\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-histogram\";\n\nimport \"@arcgis/charts-components/dist/arcgis-charts-components/arcgis-charts-components.css\";\nimport { convertCedar } from '../../util/converter';\n\n// import { defineCustomElements } from \"@arcgis/charts-components/dist/loader\";\n// // Local assets\n// defineCustomElements(window);\n\n// TODO: load charts only when chart used: https://stackoverflow.com/questions/60633526/how-to-use-an-external-third-party-library-in-stencil-js\n\n@Component({\n  tag: 'cedar-chart',\n  styleUrl: 'cedar-chart.css',\n  shadow: true,\n})\nexport class CedarChart {\n  \n  /** \n   * URL to an ArcGIS Charts config\n   */\n  @Prop() configUrl:string = null;\n\n  /**\n   * URL to an ArcGIS Cedar Config\n   */\n  @Prop() cedarUrl:string = null;\n\n  /**\n   * Optional inline data override to cedar\n   * This is a FeatureSet, for cedar\n   * If a general array is used, it will need to drop 'attributes'\n   */\n  @Prop() data:any = null\n\n  /**\n   * Optional Chart title\n   */\n  @Prop() chartTitle:string = \"\";\n\n  /** \n   * ArcGIS Charts Config\n   */\n  @Prop({mutable: true, reflect: true}) config: WebChart = null;\n\n  /**\n   * ArcGIS Cedar Config\n   */\n  @Prop({mutable: true, reflect: true}) cedar:any = null;\n\n  @State() chartType: 'bar' | 'line' | 'sparkline' = 'bar';\n  \n  /**\n   * Final stored state to render.\n   * Prevents circular updates with the config Prop\n   */\n  @State() chartConfig: WebChart = null;\n  \n  async componentWillLoad() {\n    await this.loadChart();\n  }\n  \n  componentWillRender() {\n    console.debug(\"cedar-chart: componentWillRender()\");\n  }\n\n  \n  // @Watch('cedar')\n  // @Watch('cedarUrl')\n  // @Watch('data')\n  // @Watch('config')\n  async loadChart() {\n    if(!!this.configUrl) {\n      console.debug(\"cedar-chart: loadChart(configUrl)\", this.configUrl);\n      const response = await fetch(this.configUrl);\n      this.chartConfig = await response.json();\n    } else if (!!this.cedarUrl) {\n      console.debug(\"cedar-chart: loadChart(cedarUrl)\", this.cedarUrl);\n      const response = await fetch(this.cedarUrl);\n      this.cedar = await response.json();\n      \n      // TODO: move this to check the final ArcGIS chart type.\n      this.chartType = this.cedar?.type;\n\n      // If component is sending in specific data\n      // e.g. telemetry data\n      if(!!this.data) {\n        this.cedar.datasets[0].data.features = this.data;\n      }\n      console.debug(\"cedar-chart: Chart cedar converting...\", {\n        cedar: this.cedar,\n      });\n      this.chartConfig = convertCedar( this.cedar, this.chartTitle );\n    } else if (!!this.cedar) {\n      console.debug(\"cedar-chart: loadChart(cedar)\", this.cedar);\n\n      this.chartConfig = convertCedar( this.cedar, this.chartTitle || \"\" );\n    } else if (!!this.config) {\n      console.debug(\"cedar-chart: loadChart(config)\", this.cedar);\n      this.chartConfig = this.config;\n    } else {\n      console.debug(\"cedar-chart: no load option?\");\n\n    }\n    console.debug(\"cedar-chart: Chart config loaded\", {\n      cedar: this.cedar,\n      configUrl: this.configUrl,\n      cedarUrl: this.cedarUrl,\n      config: this.config,\n      json: JSON.stringify(this.config)\n    })\n  }\n\n  @Listen('arcgisChartsDataProcessComplete')\n  loadingComplete(evt)  {\n    console.debug(\"arcgisChartsDataProcessComplete\", evt);\n  }\n\n  @Listen('arcgisChartsDataProcessError')\n  dataError(evt) {\n    console.error(\"arcgisChartsDataProcessError\", evt);\n  }\n\n  @Listen('arcgisChartsUpdateComplete')\n  updateComplete(evt) {\n    console.debug(\"arcgisChartsUpdateComplete\", evt);\n  }\n\n  render() {\n    console.debug(\"cedar-chart: Rendering chart\", {config: this.chartConfig})\n    let content = null;\n    if(!!this.chartConfig) {\n     content = this.renderChart(this.chartConfig)\n    }\n    return (\n      <Host>\n        <slot></slot>\n        {content}\n        {/* {this.renderSource()} */}\n      </Host>\n    );\n  }\n\n  private sourceEl;\n  renderSource() {\n    return( [\n      <a onClick={(_ev) => this.sourceEl.classList.toggle('visible')}>source</a>\n      ,\n      <div class=\"source\" ref={(el) => this.sourceEl = el}>\n        <code class=\"source-cedar\">\n          Cedar\n          {JSON.stringify(this.cedar)}\n        </code>\n        <code class=\"source-chart\">\n          ArcGIS Charts\n          {JSON.stringify(this.config)}\n        </code>\n      </div>]\n    )\n  }\n  renderChart(config) {\n    const type = config.chartType || config.series[0].type.replace(/Series/,'');\n    console.debug(\"cedar-chart: renderChart\", {type, config})\n\n    switch(type) {\n      case 'bar': {\n        return this.renderBarChart(config);\n      }\n      case 'line': {\n        return this.renderLineChart(config);\n      }\n      case 'sparkline': {\n        return this.renderLineChart(config);\n      }\n      case 'pie': {\n        return this.renderPieChart(config);\n      }\n      case 'scatter': {\n        return this.renderScatterChart(config);\n      }      \n      default: {\n        return (<strong>`{type}` is not a recognized chart type</strong>)\n      }\n    }\n  }\n\n\n  renderPieChart(config) {\n    return ([\n      <h3>Pie Chart</h3>,\n      <arcgis-charts-pie-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-pie-chart>\n    ]\n    )\n  }\n\n\n  renderScatterChart(config) {\n    return ([\n      <h3>Scatter Plot</h3>,\n      <arcgis-charts-scatter-plot \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-scatter-plot>\n    ]\n    )\n  }  \n\n  renderLineChart(config) {\n    return ([\n      <h3>Line Chart</h3>,\n      <arcgis-charts-line-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-line-chart>\n    ]\n      \n    )\n  }\n\n\n  renderBarChart(config) {\n    console.debug(\"rendering Bar Chart\", {config})\n    return ([\n      <h3>Bar Chart</h3>,\n      <arcgis-charts-bar-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-bar-chart>\n    ]\n    )\n  }\n\n}\n"],"version":3}