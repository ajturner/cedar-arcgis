{"version":3,"names":["arcgisChartsBarChartCss","ArcGISChartsBarChart","constructor","hostRef","this","skipNextUpdate","noRenderProps","dataUpdateNeededProps","updatedProps","Set","config","undefined","inlineData","rotation","actionMode","legendPosition","legendVisibility","view","layer","selectionData","returnSelectionOIDs","returnSelectionIndexes","returnFeaturesExtent","filterBySelection","disableInteractions","queueChartCreation","useAnimatedCharts","hideLicenceWatermark","enableResponsiveFeatures","autoDisposeChart","placeholder","selectionTheme","chartLimits","tooltipFormatter","dataLabelFormatter","guideTooltipFormatter","xAxisLabelFormatter","yAxisLabelFormatter","noDataOptions","disableTogglingLegendItems","hideLoaderAnimation","runtimeDataFilters","usePopupTemplateFieldsInfo","showNotifyPanel","handleChartOutputDataChange","event","arcgisChartsDataProcessComplete","emit","detail","handleLegendItemVisibilityChanged","arcgisChartsLegendItemVisibilityChange","handleUpdateCompleted","arcgisChartsUpdateComplete","handleSeriesColorsChange","arcgisChartsSeriesColorChange","handleSelection","arcgisChartsSelectionComplete","handleTooManySelectedElements","notifyHeading","strings","tooManySelectedElements","title","notifyMessage","message","notifyOptions","kind","autoClose","duration","active","handleAlertClosed","target","el","handleAxesMinMaxChange","arcgisChartsAxesMinMaxChange","async","newView","oldView","addExtentChangeListener","refresh","addLayerListeners","rotationChange","newRotation","updateRotation","legendPositionChange","newLegendPosition","updateLegendPosition","legendVisibilityChange","newLegendVisibility","updateLegendVisibility","filterBySelectionChanged","resetAxesBounds","heading","options","chart","notify","Promise","resolve","errorMessage","errorHeading","resetZoom","switchSelection","clearSelection","props","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","updateData","updateExtent","dataUpdateIsNeeded","viewExtentUpdated","axes","minimum","maximum","componentDidUpdate","componentShouldUpdate","args","value","propName","add","isNoRenderProp","includes","arcgisChartsNoRenderPropChange","shouldUpdate","fetchComponentLocaleStrings","getAssetPath","debouncedChartUpdate","fastq.promise","Array","from","dataUpdateNeeded","some","updatedProp","clear","update","newChartConfig","updateOptions","gatherComponentOptions","component","dataUpdated","updateGlobalOptions","gatherComponentGlobalOptions","maximumNumberOfSimultaneousUpdates","chartRef","createChartInstance","chartCreationProcessing","validateSeriesType","WebChartTypes","BarSeries","dataSource","isValidDataSource","push","e","name","ErrorKeywords","ChartDisposed","dispose","innerHTML","errorAlert","QueryFeaturesError","arcgisChartsDataProcessError","details","removeLayerListeners","removeExtentChangeListener","render","notifyPanel","h","ArcgisChartsNotifyPanel","chartStyles","notifyStyles","Host","Slot","actionBar","class","ref","layerFilterListener","addLayerFilterListener","layerRendererListener","addLayerRendererListener","extentChangeListener","remove","checkForIncompatibleChartVersion","chartVersion","version","getChartVersionInfo","versionStatus","WebChartVersionStatus","Newer","incompatibleChartVersion","formatMessage","firstCreation","createChart","chartContainer","chartConfig","globalOptions","assetsDirs","arcgisChartsScatterPlotCss","ArcGISChartsScatterPlot","ignoreSmoothRenderingLimit","ScatterSeries","cedarColors","blue","gray","red","white","convertCedar","cedar","json","type","convertData","id","background","cursorCrosshair","style","color","width","horizontalLineVisible","verticalLineVisible","content","text","font","size","series","convertAxes","map","set","index","convertSet","legend","convertLegend","visible","category","label","weight","body","position","convertChartType","source","query","datasets","x","field","y","colorType","markerSymbol","fillSymbol","outline","lineSymbol","dataLabels","axesVisible","convertFontSize","labels","valueFormat","convertValueFormat","grid","url","layerType","data","processed","dataItems","features","f","attributes","seriesConfig","intlOptions","notation","minimumFractionDigits","maximumFractionDigits","characterLimit","_cedar","cedarChartCss","CedarChart","loadChart","componentWillRender","console","debug","configUrl","response","fetch","cedarUrl","chartType","chartTitle","JSON","stringify","loadingComplete","evt","dataError","error","updateComplete","renderChart","renderSource","onClick","_ev","sourceEl","classList","toggle","replace","renderBarChart","renderLineChart","renderPieChart","renderScatterChart"],"sources":["./node_modules/@arcgis/charts-components/dist/collection/components/arcgis-charts-bar-chart/arcgis-charts-bar-chart.css?tag=arcgis-charts-bar-chart&encapsulation=shadow","./node_modules/@arcgis/charts-components/dist/collection/components/arcgis-charts-bar-chart/arcgis-charts-bar-chart.js","./node_modules/@arcgis/charts-components/dist/collection/components/arcgis-charts-scatter-plot/arcgis-charts-scatter-plot.css?tag=arcgis-charts-scatter-plot&encapsulation=shadow","./node_modules/@arcgis/charts-components/dist/collection/components/arcgis-charts-scatter-plot/arcgis-charts-scatter-plot.js","./src/util/converter.ts","./src/components/cedar-chart/cedar-chart.css?tag=cedar-chart&encapsulation=shadow","./src/components/cedar-chart/cedar-chart.tsx"],"sourcesContent":[".hide {\n  display: none;\n}\n\n.show {\n  display: block;\n}\n\n.notifyPanel {\n  flex: 0 1 auto;\n}\n\n.barSeries {\n  flex-grow: 1;\n}\n.barSeries > div {\n  justify-content: center;\n  align-items: center;\n}\n.barSeries .arcgis-charts-modal-inside {\n  padding: 1em;\n  padding-left: 0;\n}\n.barSeries .arcgis-charts-modal-inside ol {\n  padding-left: 2em;\n}\n.barSeries .arcgis-charts-modal-curtain {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 2001;\n  background-color: white;\n  opacity: 0.5;\n  opacity: 1;\n}\n.barSeries .arcgis-charts-modal-content {\n  background: rgba(255, 255, 255, 0.8);\n  color: black;\n  display: inline-block;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  max-width: 90%;\n  max-height: 90%;\n  overflow: auto;\n  z-index: 2002;\n  position: absolute;\n  max-width: 90%;\n  max-height: 90%;\n  width: auto !important;\n  height: auto !important;\n  margin: auto !important;\n  inset: auto !important;\n  left: auto !important;\n  top: auto !important;\n}\n.barSeries .arcgis-charts-modal-header {\n  display: block;\n  width: 100%;\n  min-height: 1.8em;\n  background: rgba(0, 0, 0, 0.05);\n}\n.barSeries .arcgis-charts-modal-close {\n  display: block;\n  position: absolute;\n  top: 0.3em;\n  right: 0.3em;\n  background: url(\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=\") center center/80% no-repeat rgba(100, 100, 100, 0.1);\n  width: 1.2em;\n  height: 1.2em;\n  cursor: pointer;\n}\n.barSeries .arcgis-charts-modal-title {\n  font-weight: bold;\n  font-size: 110%;\n  padding: 0.5em 1.2em 0.5em 1em;\n}\n\n:host {\n  width: var(--arcgis-charts-bar-chart-width, var(--arcgis-charts-default-width));\n  height: var(--arcgis-charts-bar-chart-height, var(--arcgis-charts-default-height));\n  display: flex;\n  flex-direction: row;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See LICENSE.md for details.\n * v1.0.0-beta.517\n */\nimport { h, Host, getAssetPath } from \"@stencil/core\";\nimport { WebChartTypes, WebChartVersionStatus } from \"@arcgis/charts-spec\";\nimport { createChart } from \"@arcgis/charts-js\";\nimport { fetchComponentLocaleStrings, ErrorKeywords, validateSeriesType, getChartVersionInfo, formatMessage, updateRotation } from \"@arcgis/charts-shared-utils\";\nimport * as fastq from \"fastq\";\nimport { Slot } from \"../../interfaces\";\nimport { updateLegendPosition, updateLegendVisibility, gatherComponentGlobalOptions, isValidDataSource, resetAxesBounds, gatherComponentOptions } from \"../../utils/config-update\";\nimport { ArcgisChartsNotifyPanel } from \"../functional/ArcgisChartsNotifyPanel\";\nimport { addLayerFilterListener, addLayerRendererListener, addExtentChangeListener } from \"../../utils/watch-handlers\";\nimport { maximumNumberOfSimultaneousUpdates } from \"../../utils/interfaces\";\n/**\n * @slot action-bar - A slot for adding arcgis-charts-action-bar component or calcite-action-bar.\n */\nexport class ArcGISChartsBarChart {\n  constructor() {\n    /**\n     * Property to be used to skip the next round of update\n     * @category Private\n     */\n    this.skipNextUpdate = false;\n    /**\n     * List of props which should not trigger a render when changed\n     * @category Private\n     */\n    this.noRenderProps = [\"rotation\", \"legendPosition\", \"legendVisibility\", \"view\"];\n    /**\n     * List of props which should trigger a data update\n     * @category Private\n     */\n    this.dataUpdateNeededProps = [\"forceDataUpdate\", \"runtimeDataFilters\", \"inlineData\", \"returnFeaturesExtent\"];\n    /**\n     * List of all the properties updated since the last update. Useful when multiple properties are updated\n     * within the same time frame, while some of them require some extra logic to be applied.\n     * @category Private\n     */\n    this.updatedProps = new Set();\n    this.config = undefined;\n    this.inlineData = undefined;\n    this.rotation = undefined;\n    this.actionMode = undefined;\n    this.legendPosition = undefined;\n    this.legendVisibility = undefined;\n    this.view = undefined;\n    this.layer = undefined;\n    this.selectionData = undefined;\n    this.returnSelectionOIDs = undefined;\n    this.returnSelectionIndexes = undefined;\n    this.returnFeaturesExtent = undefined;\n    this.filterBySelection = undefined;\n    this.disableInteractions = undefined;\n    this.queueChartCreation = undefined;\n    this.useAnimatedCharts = undefined;\n    this.hideLicenceWatermark = undefined;\n    this.enableResponsiveFeatures = undefined;\n    this.autoDisposeChart = undefined;\n    this.placeholder = undefined;\n    this.selectionTheme = undefined;\n    this.chartLimits = undefined;\n    this.tooltipFormatter = undefined;\n    this.dataLabelFormatter = undefined;\n    this.guideTooltipFormatter = undefined;\n    this.xAxisLabelFormatter = undefined;\n    this.yAxisLabelFormatter = undefined;\n    this.noDataOptions = undefined;\n    this.disableTogglingLegendItems = undefined;\n    this.hideLoaderAnimation = undefined;\n    this.runtimeDataFilters = undefined;\n    this.usePopupTemplateFieldsInfo = undefined;\n    this.showNotifyPanel = false;\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart data has been processed\n   * emitting an event carrying the data\n   * @param event The event carrying the chart data processed by the core\n   * @category Custom-event handler\n   */\n  handleChartOutputDataChange(event) {\n    // every time the data is processed we check whether it's empty so we can display a message on the chart (see componentDidUpdate())\n    this.arcgisChartsDataProcessComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating a legend item visibility has been changed\n   * emitting an event carrying the item id and its new visibility\n   * @param event The event carrying the item id and its new visibility\n   * @category Custom-event handler\n   */\n  handleLegendItemVisibilityChanged(event) {\n    this.arcgisChartsLegendItemVisibilityChange.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating a chart is updated\n   * @param event The event carrying the ValidationStatus\n   * @category Custom-event handler\n   */\n  handleUpdateCompleted(event) {\n    this.arcgisChartsUpdateComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart series color\n   * have been assigned\n   * @param event The event carrying the series colors\n   * @category Custom-event handler\n   */\n  handleSeriesColorsChange(event) {\n    this.arcgisChartsSeriesColorChange.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container\n   * on selection of one or multiple columns\n   * @param event The event carrying the selected elements\n   * @category Custom-event handler\n   */\n  handleSelection(event) {\n    this.arcgisChartsSelectionComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container\n   * when more elements than the authorized limit have been selected.\n   * @category Custom-event handler\n   */\n  handleTooManySelectedElements() {\n    // TODO t9n these messages. Only English is available for now\n    this.notifyHeading = this.strings.tooManySelectedElements.title;\n    this.notifyMessage = this.strings.tooManySelectedElements.message;\n    this.notifyOptions = {\n      kind: \"warning\",\n      autoClose: true,\n      duration: \"fast\",\n      active: true\n    };\n    this.showNotifyPanel = true;\n  }\n  /**\n   * Listener on event coming from the closure of a calcite-alert.\n   * The handler helps keeping in sync the boolean `showNotifyPanel` with the panel's state.\n   * @param event\n   * @category Custom-event handler\n   */\n  handleAlertClosed(event) {\n    // If the calcite-alert (notify panel) from this component is getting closed, we flag it\n    if (event.target === this.el) {\n      // we don't want the component to re-render so we skip the next update\n      this.skipNextUpdate = true;\n      this.showNotifyPanel = false;\n    }\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart axes\n   * min and max values have been computed\n   * @param event The event carrying the axes min and max\n   * @category Custom-event handler\n   */\n  handleAxesMinMaxChange(event) {\n    this.arcgisChartsAxesMinMaxChange.emit(event.detail);\n  }\n  /**\n   * Called every time the view prop is updated.\n   * Add a listener to it to keep the chart in sync.\n   * @category Watch handler\n   */\n  async viewChange(newView, oldView) {\n    await this.addExtentChangeListener();\n    // The \"view\" property is flagged as a non-render prop to avoid an unnecessary update when the\n    // view is assigned to the component (the update will happen through the view listeners), so we\n    // only need to explicitly ask for a refresh when the view is removed from the component\n    if (oldView !== undefined && newView === undefined) {\n      await this.refresh();\n    }\n  }\n  /**\n   * Called every time the layer prop is updated.\n   * Adds listeners to it to keep the chart in sync.\n   * @category Watch handler\n   */\n  async layerChange() {\n    await this.addLayerListeners();\n  }\n  /**\n   * Called every time the rotation property is updated\n   * @param newRotation The new rotation value for the chart\n   * @category Watch handler\n   */\n  rotationChange(newRotation) {\n    this.config = updateRotation(newRotation, this.config);\n  }\n  /**\n   * Called every time the position of the legend is updated\n   * @param newLegendPosition The new position of the legend\n   * @category Watch handler\n   */\n  legendPositionChange(newLegendPosition) {\n    this.config = updateLegendPosition(newLegendPosition, this.config);\n  }\n  /**\n   * Called every time the visibility of the legend is updated\n   * @param newLegendVisibility The new visibility of the legend\n   * @category Watch handler\n   */\n  legendVisibilityChange(newLegendVisibility) {\n    this.config = updateLegendVisibility(newLegendVisibility, this.config);\n  }\n  /**\n   * Called every time the filter by selection is updated.\n   * Resets the axes min/max.\n   * @category Watch handler\n   */\n  filterBySelectionChanged() {\n    this.config = resetAxesBounds(this.config);\n  }\n  /**\n   * Notify method allows passing external messages to the chart component.\n   * It can be used to pass validation or information messages.\n   * In a situation where a config update is overriding your notification modal,\n   * consider waiting for the `arcgisChartsUpdateComplete` event.\n   * @category Public\n   */\n  async notify(message, heading, options) {\n    if (this.chart !== undefined) {\n      this.chart.notify(message, heading, options);\n    }\n    return Promise.resolve(undefined);\n  }\n  /**\n   * Triggers an alert to display an error message.\n   * @category Public\n   * @param errorMessage\n   */\n  async errorAlert(errorMessage) {\n    this.notifyHeading = this.strings.errorHeading;\n    this.notifyMessage = errorMessage;\n    this.notifyOptions = {\n      kind: \"danger\",\n      autoClose: true,\n      active: true\n    };\n    this.showNotifyPanel = true;\n  }\n  /**\n   * Resets the chart zoom to bring it back to full extent\n   * @category Public\n   */\n  async resetZoom() {\n    if (this.chart !== undefined)\n      this.chart.resetZoom();\n    return Promise.resolve(undefined);\n  }\n  /**\n   * Switches the selection on the chart.\n   * @category Public\n   */\n  async switchSelection() {\n    // for now we don't allow the switch selection when the filter by selection is on\n    if (this.chart !== undefined && this.filterBySelection !== true)\n      await this.chart.switchSelection();\n  }\n  /**\n   * Clears all selection on the chart.\n   * @category Public\n   */\n  async clearSelection() {\n    if (this.chart !== undefined) {\n      this.chart.clearSelection();\n      // to handle the full data reset we call the componentDidUpdate to trigger a chart update\n      if (this.filterBySelection === true) {\n        await this.refresh();\n      }\n    }\n  }\n  /**\n   * Re-render the chart.\n   * @param props.updateData Indicates whether to fetch new data. Default: true.\n   * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.\n   * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;\n   * @category Public\n   */\n  async refresh(props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const { updateData = true, resetAxesBounds = false, updateExtent = false } = props !== null && props !== void 0 ? props : {};\n    if (updateData === true)\n      this.dataUpdateIsNeeded();\n    this.viewExtentUpdated = updateExtent;\n    // Resetting the axes bounds\n    if (resetAxesBounds === true) {\n      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.axes) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? true : delete _c.minimum;\n      (_f = (_e = (_d = this.config) === null || _d === void 0 ? void 0 : _d.axes) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? true : delete _f.maximum;\n      (_j = (_h = (_g = this.config) === null || _g === void 0 ? void 0 : _g.axes) === null || _h === void 0 ? void 0 : _h[1]) === null || _j === void 0 ? true : delete _j.minimum;\n      (_m = (_l = (_k = this.config) === null || _k === void 0 ? void 0 : _k.axes) === null || _l === void 0 ? void 0 : _l[1]) === null || _m === void 0 ? true : delete _m.maximum;\n    }\n    await this.componentDidUpdate();\n    // reset the boolean for the next update \n    this.viewExtentUpdated = false;\n  }\n  /**\n   * Prevents render for noRenderProps\n   * @category Lifecycle\n   */\n  componentShouldUpdate(...args) {\n    const [value, , propName] = args;\n    // Flagging the property. This list will be used when the chart update is actually called.\n    this.updatedProps.add(propName);\n    const isNoRenderProp = this.noRenderProps.includes(propName);\n    if (isNoRenderProp === true) {\n      this.arcgisChartsNoRenderPropChange.emit({ propName, value });\n    }\n    const shouldUpdate = this.skipNextUpdate === false && isNoRenderProp === false;\n    this.skipNextUpdate = false;\n    return shouldUpdate;\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentWillLoad() {\n    ({ strings: this.strings } = await fetchComponentLocaleStrings(this.el, getAssetPath(`.`)));\n    // We define the function that will be called to update the chart. We use the external library fastq to queue the updates\n    // to make sure only one update is executed at a time\n    this.debouncedChartUpdate = fastq.promise(async () => {\n      if (this.chart !== undefined) {\n        const updatedProps = Array.from(this.updatedProps);\n        // if one of the properties updated require a data update, we flag it\n        // multiple properties can be updated within the same time frame, which will trigger only one Stencil lifecycle\n        const dataUpdateNeeded = updatedProps.some((updatedProp) => this.dataUpdateNeededProps.includes(updatedProp));\n        // clearing the list for the next update\n        this.updatedProps.clear();\n        return await this.chart.update({\n          newChartConfig: this.config,\n          updateOptions: gatherComponentOptions({ component: this, dataUpdated: dataUpdateNeeded, viewExtentUpdated: this.viewExtentUpdated }),\n          updateGlobalOptions: gatherComponentGlobalOptions(this)\n        });\n      }\n    }, maximumNumberOfSimultaneousUpdates);\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentDidLoad() {\n    if (this.chartRef !== undefined) {\n      await this.createChartInstance();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentDidUpdate() {\n    var _a;\n    // If this.chartCreationProcessing is still running we need to wait for it to be done before updating the chart\n    if (this.chart === undefined && this.chartCreationProcessing !== undefined)\n      await this.chartCreationProcessing;\n    // Controlling the series type to display a console error if the type is not the expected one\n    // We still proceed to the update to let the config validator deal with the invalid config\n    await validateSeriesType([WebChartTypes.BarSeries], this.config);\n    if (this.config !== undefined && this.chart !== undefined && this.showNotifyPanel === false) {\n      try {\n        const dataSource = (_a = this.config) === null || _a === void 0 ? void 0 : _a.dataSource;\n        // Calling for the chart update if the data source is valid and the debounce function exists\n        if (isValidDataSource(this.inlineData, dataSource) && this.debouncedChartUpdate !== undefined) {\n          await this.debouncedChartUpdate.push({});\n        }\n      }\n      catch (e) {\n        if (this.chartRef !== undefined && this.config !== undefined) {\n          if (e.name === ErrorKeywords.ChartDisposed) {\n            this.chart.dispose();\n            this.chartRef.innerHTML = \"\";\n            await this.createChartInstance(false);\n          }\n          else {\n            this.errorAlert(e === null || e === void 0 ? void 0 : e.message);\n            if (e.name === ErrorKeywords.QueryFeaturesError) {\n              // sending an event if a query failed.\n              // We don't automatically recreate the chart in that scenario as it would lead to the same result.\n              this.arcgisChartsDataProcessError.emit(e.details);\n            }\n          }\n        }\n      }\n    }\n    else if (this.chart === undefined &&\n      this.chartCreationProcessing === undefined &&\n      this.showNotifyPanel === false) {\n      await this.createChartInstance();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  async disconnectedCallback() {\n    if (this.chart !== undefined) {\n      this.removeLayerListeners();\n      this.removeExtentChangeListener();\n      this.chart.dispose();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  render() {\n    var _a;\n    const notifyPanel = this.showNotifyPanel === true ? (h(ArcgisChartsNotifyPanel, { heading: this.notifyHeading, message: this.notifyMessage, options: this.notifyOptions })) : null;\n    // TODO: implement stronger way to know when to keep the chart visible\n    const chartStyles = this.showNotifyPanel === true && ((_a = this.notifyOptions) === null || _a === void 0 ? void 0 : _a.kind) === \"danger\"\n      ? \"hide\"\n      : `${WebChartTypes.BarSeries} show`;\n    const notifyStyles = this.showNotifyPanel === true ? \"show notifyPanel\" : \"hide\";\n    return (h(Host, null, h(\"slot\", { name: Slot.actionBar }), h(\"div\", { class: chartStyles, ref: (el) => {\n        this.chartRef = el;\n      } }), h(\"div\", { class: notifyStyles }, notifyPanel)));\n  }\n  /**\n   * Util function that can be used to trigger a data update next time the chart is updated\n   * @category Private\n   */\n  dataUpdateIsNeeded() {\n    this.updatedProps.add(\"forceDataUpdate\");\n  }\n  /**\n   * Adds the listener to listen to the layer definitionExpression and renderer changes\n   * @category Private\n   */\n  async addLayerListeners() {\n    // removing existing listeners before adding new ones\n    this.removeLayerListeners();\n    this.layerFilterListener = await addLayerFilterListener({\n      layer: this.layer,\n      component: this\n    });\n    this.layerRendererListener = await addLayerRendererListener({\n      layer: this.layer,\n      component: this\n    });\n  }\n  /**\n   * Adds a listener to listen to the view's extent change\n   * @category Private\n   */\n  async addExtentChangeListener() {\n    // removing existing listeners before adding new ones\n    this.removeExtentChangeListener();\n    this.extentChangeListener = await addExtentChangeListener({\n      view: this.view,\n      layer: this.layer,\n      component: this\n    });\n  }\n  /**\n   * Removes the listeners added to listen to the layer definitionExpression and renderer changes\n   * @category Private\n   */\n  removeLayerListeners() {\n    if (this.layerFilterListener !== undefined)\n      this.layerFilterListener.remove();\n    if (this.layerRendererListener !== undefined)\n      this.layerRendererListener.remove();\n  }\n  /**\n   * Removes the listener added to listen to the view's extent change\n   * @category Private\n   */\n  removeExtentChangeListener() {\n    if (this.extentChangeListener !== undefined)\n      this.extentChangeListener.remove();\n  }\n  /**\n   * If the chart config version is newer than the current one, display a message in a popup.\n   * @category Private\n   */\n  checkForIncompatibleChartVersion() {\n    var _a;\n    const chartVersion = (_a = this.config) === null || _a === void 0 ? void 0 : _a.version;\n    if (getChartVersionInfo(chartVersion).versionStatus === WebChartVersionStatus.Newer) {\n      this.notifyHeading = this.strings.incompatibleChartVersion.title;\n      this.notifyMessage = formatMessage(this.strings.incompatibleChartVersion.message, {\n        chartVersion: chartVersion !== null && chartVersion !== void 0 ? chartVersion : \"\"\n      });\n      this.notifyOptions = {\n        kind: \"warning\",\n        autoClose: true,\n        active: true\n      };\n      this.showNotifyPanel = true;\n    }\n  }\n  /**\n   * creates arcgis chart instance\n   * @param firstCreation Indicates whether it's the first time the component is created\n   * @category Private\n   */\n  async createChartInstance(firstCreation = true) {\n    var _a, _b;\n    // Controlling the series type to display a console error if the type is not the expected one\n    // We still proceed to the creation to let the config validator deal with the invalid config\n    await validateSeriesType([WebChartTypes.BarSeries], this.config);\n    this.checkForIncompatibleChartVersion();\n    this.updatedProps.clear();\n    try {\n      const dataSource = (_a = this.config) === null || _a === void 0 ? void 0 : _a.dataSource;\n      if (isValidDataSource(this.inlineData, dataSource)) {\n        this.chartCreationProcessing = createChart({\n          chartContainer: this.chartRef,\n          chartConfig: this.config,\n          options: gatherComponentOptions({ component: this }),\n          globalOptions: gatherComponentGlobalOptions(this)\n        });\n      }\n      this.chart = await this.chartCreationProcessing;\n      // after creating the chart we add listeners on the feature layer and view\n      // only adding them if it's the first component creation. `createChartInstance()` can be called\n      // when an update failed, and in that case we don't need to add again the listeners given the view\n      // or layer didn't change\n      if (firstCreation === true) {\n        await this.addLayerListeners();\n        await this.addExtentChangeListener();\n      }\n    }\n    catch (e) {\n      // sending an event if a query failed\n      if (e.name === ErrorKeywords.QueryFeaturesError) {\n        this.arcgisChartsDataProcessError.emit(e.details);\n      }\n      // displaying the error\n      this.errorAlert(e === null || e === void 0 ? void 0 : e.message);\n      // disposing the chart\n      (_b = this.chart) === null || _b === void 0 ? void 0 : _b.dispose();\n      this.chartCreationProcessing = undefined;\n      this.chart = undefined;\n    }\n  }\n  static get is() { return \"arcgis-charts-bar-chart\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"arcgis-charts-bar-chart.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"arcgis-charts-bar-chart.css\"]\n    };\n  }\n  static get assetsDirs() { return [\"t9n\"]; }\n  static get properties() {\n    return {\n      \"config\": {\n        \"type\": \"unknown\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"WebChart | WebMapWebChart\",\n          \"resolved\": \"WebChart | WebMapWebChart | undefined\",\n          \"references\": {\n            \"WebChart\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            },\n            \"WebMapWebChart\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"ArcGIS Web Chart Specification that defines the chart component\\nWhen the `config` prop is updated, it closes the modal opened via `notify` method.\"\n        }\n      },\n      \"inlineData\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"InlineData<WebChartGenericDataItem>\",\n          \"resolved\": \"InlineData<WebChartGenericDataItem> | undefined\",\n          \"references\": {\n            \"InlineData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            },\n            \"WebChartGenericDataItem\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used for specifying inline data (raw or processed) for the chart\"\n        }\n      },\n      \"rotation\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Whether to rotate the chart\"\n        },\n        \"attribute\": \"rotation\",\n        \"reflect\": false\n      },\n      \"actionMode\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ActionModes\",\n          \"resolved\": \"\\\"monoSelection\\\" | \\\"multiSelection\\\" | \\\"multiSelectionWithCtrlKey\\\" | \\\"none\\\" | \\\"zoom\\\" | undefined\",\n          \"references\": {\n            \"ActionModes\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Defines the cursor behavior on the chart (zoom, selection...)\"\n        },\n        \"attribute\": \"action-mode\",\n        \"reflect\": false\n      },\n      \"legendPosition\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"WebChartLegendPositions\",\n          \"resolved\": \"\\\"bottom\\\" | \\\"left\\\" | \\\"right\\\" | \\\"top\\\"\",\n          \"references\": {\n            \"WebChartLegendPositions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used by the legend position change action.\"\n        },\n        \"attribute\": \"legend-position\",\n        \"reflect\": false\n      },\n      \"legendVisibility\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used by the legend visibility change action.\"\n        },\n        \"attribute\": \"legend-visibility\",\n        \"reflect\": false\n      },\n      \"view\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"__esri.MapView | __esri.SceneView\",\n          \"resolved\": \"MapView | SceneView | undefined\",\n          \"references\": {\n            \"___esri\": {\n              \"location\": \"global\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to access to the FeatureLayerView instance in order to perform client-side queries.\"\n        }\n      },\n      \"layer\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"__esri.FeatureLayer\",\n          \"resolved\": \"FeatureLayer | undefined\",\n          \"references\": {\n            \"___esri\": {\n              \"location\": \"global\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to perform queries.\\nIf the layer is a FeatureLayer and the `view` property is provided, it will be used to access the FeatureLayerView instance\\nin order to perform client-side queries.\"\n        }\n      },\n      \"selectionData\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"SelectionData\",\n          \"resolved\": \"SelectionData | undefined\",\n          \"references\": {\n            \"SelectionData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"When this property is set it will apply a selection on the chart matching the provided selection.\"\n        }\n      },\n      \"returnSelectionOIDs\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"true\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates if the object ids need to be computed whenever a selection is made on or passed to the chart.\\nOnly considered for a data source using a feature layer.\"\n        },\n        \"attribute\": \"return-selection-o-i-ds\",\n        \"reflect\": false\n      },\n      \"returnSelectionIndexes\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates if the selection indexes need to be computed whenever a selection is made on or passed to the chart.\"\n        },\n        \"attribute\": \"return-selection-indexes\",\n        \"reflect\": false\n      },\n      \"returnFeaturesExtent\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Allows the features extent to be returned, through the `arcgisChartsDataProcessComplete` and `arcgisChartsSelectionComplete` events payload.\\n Applies only to:\\n - charts using an aggregation\\n- data source using a feature layer compatible with envelope aggregation\\n The extent(IExtent) is returned through a property called`arcgis_charts_features_extent`.\"\n        },\n        \"attribute\": \"return-features-extent\",\n        \"reflect\": false\n      },\n      \"filterBySelection\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Filters all chart elements based on selection.\"\n        },\n        \"attribute\": \"filter-by-selection\",\n        \"reflect\": false\n      },\n      \"disableInteractions\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Boolean to disable all interactions on the chart.\"\n        },\n        \"attribute\": \"disable-interactions\",\n        \"reflect\": true\n      },\n      \"queueChartCreation\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To ensure that charts are built one by one. True by default\"\n        },\n        \"attribute\": \"queue-chart-creation\",\n        \"reflect\": true\n      },\n      \"useAnimatedCharts\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To activate the animations on the chart. False by default\"\n        },\n        \"attribute\": \"use-animated-charts\",\n        \"reflect\": true\n      },\n      \"hideLicenceWatermark\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To hide the licence watermark. False by default\"\n        },\n        \"attribute\": \"hide-licence-watermark\",\n        \"reflect\": true\n      },\n      \"enableResponsiveFeatures\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To enable the responsive features. True by default\"\n        },\n        \"attribute\": \"enable-responsive-features\",\n        \"reflect\": true\n      },\n      \"autoDisposeChart\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To auto-dispose a chart if a new one is created in the same container. False by default\"\n        },\n        \"attribute\": \"auto-dispose-chart\",\n        \"reflect\": true\n      },\n      \"placeholder\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"It is a string that provides a brief hint to the user to indicate needed information to create a chart.\"\n        },\n        \"attribute\": \"placeholder\",\n        \"reflect\": false\n      },\n      \"selectionTheme\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"SelectionTheme\",\n          \"resolved\": \"SelectionTheme | undefined\",\n          \"references\": {\n            \"SelectionTheme\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to provide a customized theme for the selected and non selected elements.\\nIf no style is provided for the selected elements, a default selection is applied.\\nIf no style is provided for the non selected elements, the chart's style is applied.\"\n        }\n      },\n      \"chartLimits\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ChartElementLimit\",\n          \"resolved\": \"ChartElementLimit | undefined\",\n          \"references\": {\n            \"ChartElementLimit\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to customize the number maximum of bars allowed on the chart.\\nThe chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation\\nor update of the chart, or render the elements up to the given limits.\"\n        }\n      },\n      \"tooltipFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"BarAndLineTooltipFormatCallback\",\n          \"resolved\": \"((props: BarAndLineTooltipFormatCallbackProps) => string) | undefined\",\n          \"references\": {\n            \"BarAndLineTooltipFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"dataLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"BarAndLineDataLabelFormatCallback\",\n          \"resolved\": \"((statValue: number, percent?: number | undefined) => string) | undefined\",\n          \"references\": {\n            \"BarAndLineDataLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"guideTooltipFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"GuideTooltipFormatCallback\",\n          \"resolved\": \"((props: GuideTooltipFormatCallbackProps) => string) | undefined\",\n          \"references\": {\n            \"GuideTooltipFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"xAxisLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AxisLabelFormatCallback\",\n          \"resolved\": \"((value: string | number | Date) => string) | undefined\",\n          \"references\": {\n            \"AxisLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates whether to show the Arcgis charts notify panel. False by default\\nA callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"yAxisLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AxisLabelFormatCallback\",\n          \"resolved\": \"((value: string | number | Date) => string) | undefined\",\n          \"references\": {\n            \"AxisLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"noDataOptions\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"NoDataOptions\",\n          \"resolved\": \"NoDataOptions | undefined\",\n          \"references\": {\n            \"NoDataOptions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to set the chart's behavior when its data set is empty\"\n        }\n      },\n      \"disableTogglingLegendItems\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Used to disable the toggling of series via the legend items.\"\n        },\n        \"attribute\": \"disable-toggling-legend-items\",\n        \"reflect\": false\n      },\n      \"hideLoaderAnimation\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Used to hide the loader animation (curtain and spinner), showed by default at every update.\"\n        },\n        \"attribute\": \"hide-loader-animation\",\n        \"reflect\": false\n      },\n      \"runtimeDataFilters\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"WebChartDataFilters\",\n          \"resolved\": \"undefined | { geometry?: IPoint | IPolyline | IPolygon | IPolygonWithCurves | IEnvelope | IExtent | undefined; timeExtent?: [number, number] | undefined; gdbVersion?: string | undefined; distance?: number | undefined; units?: RESTUnits | undefined; where?: string | undefined; }\",\n          \"references\": {\n            \"WebChartDataFilters\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to apply runtime filters to the chart's data while in Feature Layer mode.\"\n        }\n      },\n      \"usePopupTemplateFieldsInfo\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Can be set to true to read the fields from layer.popupTemplate and use their alias when rendering tooltips\"\n        },\n        \"attribute\": \"use-popup-template-fields-info\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"showNotifyPanel\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"arcgisChartsDataProcessError\",\n        \"name\": \"arcgisChartsDataProcessError\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered when an error occurred while fetching of processing the data for the chart\"\n        },\n        \"complexType\": {\n          \"original\": \"any\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"arcgisChartsDataProcessComplete\",\n        \"name\": \"arcgisChartsDataProcessComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart data is received from the core\"\n        },\n        \"complexType\": {\n          \"original\": \"WebChartGenericDataItem\",\n          \"resolved\": \"WebChartGenericDataItem\",\n          \"references\": {\n            \"WebChartGenericDataItem\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsLegendItemVisibilityChange\",\n        \"name\": \"arcgisChartsLegendItemVisibilityChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once a legend item visibility has been changed\"\n        },\n        \"complexType\": {\n          \"original\": \"LegendItemVisibility\",\n          \"resolved\": \"LegendItemVisibility\",\n          \"references\": {\n            \"LegendItemVisibility\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsUpdateComplete\",\n        \"name\": \"arcgisChartsUpdateComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart is updated\"\n        },\n        \"complexType\": {\n          \"original\": \"ValidationStatus\",\n          \"resolved\": \"ValidationStatus\",\n          \"references\": {\n            \"ValidationStatus\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsSeriesColorChange\",\n        \"name\": \"arcgisChartsSeriesColorChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart series color have been assigned\"\n        },\n        \"complexType\": {\n          \"original\": \"SeriesSymbolsMap\",\n          \"resolved\": \"Map<number, SeriesSymbols | undefined>\",\n          \"references\": {\n            \"SeriesSymbolsMap\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsAxesMinMaxChange\",\n        \"name\": \"arcgisChartsAxesMinMaxChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Event triggered once the chart axes min/max values are computed\"\n        },\n        \"complexType\": {\n          \"original\": \"CalculatedMinMaxBoundsPayload[]\",\n          \"resolved\": \"CalculatedMinMaxBoundsPayload[]\",\n          \"references\": {\n            \"CalculatedMinMaxBoundsPayload\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsSelectionComplete\",\n        \"name\": \"arcgisChartsSelectionComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a bar\"\n        },\n        \"complexType\": {\n          \"original\": \"SelectionData\",\n          \"resolved\": \"SelectionData\",\n          \"references\": {\n            \"SelectionData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsNoRenderPropChange\",\n        \"name\": \"arcgisChartsNoRenderPropChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Event triggered when a no-render prop is changed\"\n        },\n        \"complexType\": {\n          \"original\": \"{ propName: string, value: boolean | WebChartLegendPositions }\",\n          \"resolved\": \"{ propName: string; value: boolean | WebChartLegendPositions; }\",\n          \"references\": {\n            \"WebChartLegendPositions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"notify\": {\n        \"complexType\": {\n          \"signature\": \"(message?: string, heading?: string, options?: NotifyOptions) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"NotifyOptions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Notify method allows passing external messages to the chart component.\\nIt can be used to pass validation or information messages.\\nIn a situation where a config update is overriding your notification modal,\\nconsider waiting for the `arcgisChartsUpdateComplete` event.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"errorAlert\": {\n        \"complexType\": {\n          \"signature\": \"(errorMessage?: string) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"errorMessage\"\n                }],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Triggers an alert to display an error message.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"errorMessage\"\n            }]\n        }\n      },\n      \"resetZoom\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Resets the chart zoom to bring it back to full extent\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"switchSelection\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Switches the selection on the chart.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"clearSelection\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Clears all selection on the chart.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"refresh\": {\n        \"complexType\": {\n          \"signature\": \"(props?: { updateData?: boolean | undefined; resetAxesBounds?: boolean | undefined; updateExtent?: boolean | undefined; } | undefined) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Re-render the chart.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"props.updateData Indicates whether to fetch new data. Default: true.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"props.updateExtent Indicates whether the view's extent is to update. Default: false.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"view\",\n        \"methodName\": \"viewChange\"\n      }, {\n        \"propName\": \"layer\",\n        \"methodName\": \"layerChange\"\n      }, {\n        \"propName\": \"rotation\",\n        \"methodName\": \"rotationChange\"\n      }, {\n        \"propName\": \"legendPosition\",\n        \"methodName\": \"legendPositionChange\"\n      }, {\n        \"propName\": \"legendVisibility\",\n        \"methodName\": \"legendVisibilityChange\"\n      }, {\n        \"propName\": \"filterBySelection\",\n        \"methodName\": \"filterBySelectionChanged\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"arcgisChartsJSDataProcessComplete\",\n        \"method\": \"handleChartOutputDataChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSLegendItemVisibilityChange\",\n        \"method\": \"handleLegendItemVisibilityChanged\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSUpdateComplete\",\n        \"method\": \"handleUpdateCompleted\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSSeriesColorChange\",\n        \"method\": \"handleSeriesColorsChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSSelectionComplete\",\n        \"method\": \"handleSelection\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSTooManySelectedElements\",\n        \"method\": \"handleTooManySelectedElements\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"calciteAlertClose\",\n        \"method\": \"handleAlertClosed\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSAxesMinMaxChange\",\n        \"method\": \"handleAxesMinMaxChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\n",".hide {\n  display: none;\n}\n\n.show {\n  display: block;\n}\n\n.notifyPanel {\n  flex: 0 1 auto;\n}\n\n.scatterSeries {\n  flex-grow: 1;\n}\n.scatterSeries > div {\n  justify-content: center;\n  align-items: center;\n}\n.scatterSeries .arcgis-charts-modal-inside {\n  padding: 1em;\n  padding-left: 0;\n}\n.scatterSeries .arcgis-charts-modal-inside ol {\n  padding-left: 2em;\n}\n.scatterSeries .arcgis-charts-modal-curtain {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 2001;\n  background-color: white;\n  opacity: 0.5;\n  opacity: 1;\n}\n.scatterSeries .arcgis-charts-modal-content {\n  background: rgba(255, 255, 255, 0.8);\n  color: black;\n  display: inline-block;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  max-width: 90%;\n  max-height: 90%;\n  overflow: auto;\n  z-index: 2002;\n  position: absolute;\n  max-width: 90%;\n  max-height: 90%;\n  width: auto !important;\n  height: auto !important;\n  margin: auto !important;\n  inset: auto !important;\n  left: auto !important;\n  top: auto !important;\n}\n.scatterSeries .arcgis-charts-modal-header {\n  display: block;\n  width: 100%;\n  min-height: 1.8em;\n  background: rgba(0, 0, 0, 0.05);\n}\n.scatterSeries .arcgis-charts-modal-close {\n  display: block;\n  position: absolute;\n  top: 0.3em;\n  right: 0.3em;\n  background: url(\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=\") center center/80% no-repeat rgba(100, 100, 100, 0.1);\n  width: 1.2em;\n  height: 1.2em;\n  cursor: pointer;\n}\n.scatterSeries .arcgis-charts-modal-title {\n  font-weight: bold;\n  font-size: 110%;\n  padding: 0.5em 1.2em 0.5em 1em;\n}\n\n:host {\n  width: var(--arcgis-charts-scatter-plot-width, var(--arcgis-charts-default-width));\n  height: var(--arcgis-charts-scatter-plot-height, var(--arcgis-charts-default-height));\n  display: flex;\n  flex-direction: row;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See LICENSE.md for details.\n * v1.0.0-beta.517\n */\nimport { h, Host, getAssetPath } from \"@stencil/core\";\nimport { WebChartTypes, WebChartVersionStatus } from \"@arcgis/charts-spec\";\nimport { createChart } from \"@arcgis/charts-js\";\nimport { fetchComponentLocaleStrings, ErrorKeywords, validateSeriesType, getChartVersionInfo, formatMessage } from \"@arcgis/charts-shared-utils\";\nimport * as fastq from \"fastq\";\nimport { Slot } from \"../../interfaces\";\nimport { updateLegendPosition, updateLegendVisibility, isValidDataSource, gatherComponentGlobalOptions, resetAxesBounds, gatherComponentOptions } from \"../../utils/config-update\";\nimport { ArcgisChartsNotifyPanel } from \"../functional/ArcgisChartsNotifyPanel\";\nimport { addLayerFilterListener, addLayerRendererListener, addExtentChangeListener } from \"../../utils/watch-handlers\";\nimport { maximumNumberOfSimultaneousUpdates } from \"../../utils/interfaces\";\n/**\n * @slot action-bar - A slot for adding arcgis-charts-action-bar component or calcite-action-bar.\n */\nexport class ArcGISChartsScatterPlot {\n  constructor() {\n    /**\n     * Property to be used to skip the next round of update\n     * @category Private\n     */\n    this.skipNextUpdate = false;\n    /**\n     * List of props which should not trigger a render when changed\n     * @category Private\n     */\n    this.noRenderProps = [\"legendPosition\", \"legendVisibility\", \"view\"];\n    /**\n     * List of props which should trigger a data update\n     * @category Private\n     */\n    this.dataUpdateNeededProps = [\"forceDataUpdate\", \"runtimeDataFilters\", \"inlineData\", \"returnFeaturesExtent\"];\n    /**\n     * List of all the properties updated since the last update. Useful when multiple properties are updated\n     * within the same time frame, while some of them require some extra logic to be applied.\n     * @category Private\n     */\n    this.updatedProps = new Set();\n    this.config = undefined;\n    this.inlineData = undefined;\n    this.actionMode = undefined;\n    this.legendPosition = undefined;\n    this.legendVisibility = undefined;\n    this.view = undefined;\n    this.layer = undefined;\n    this.selectionData = undefined;\n    this.returnSelectionOIDs = undefined;\n    this.returnSelectionIndexes = undefined;\n    this.filterBySelection = undefined;\n    this.disableInteractions = undefined;\n    this.disableTogglingLegendItems = undefined;\n    this.queueChartCreation = undefined;\n    this.useAnimatedCharts = undefined;\n    this.hideLicenceWatermark = undefined;\n    this.enableResponsiveFeatures = undefined;\n    this.autoDisposeChart = undefined;\n    this.placeholder = undefined;\n    this.selectionTheme = undefined;\n    this.ignoreSmoothRenderingLimit = undefined;\n    this.tooltipFormatter = undefined;\n    this.dataLabelFormatter = undefined;\n    this.guideTooltipFormatter = undefined;\n    this.xAxisLabelFormatter = undefined;\n    this.yAxisLabelFormatter = undefined;\n    this.noDataOptions = undefined;\n    this.hideLoaderAnimation = undefined;\n    this.runtimeDataFilters = undefined;\n    this.usePopupTemplateFieldsInfo = undefined;\n    this.showNotifyPanel = false;\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart data has been processed.\n   * emitting an event carrying the chart data, the trendline points and the r2 statistic\n   * @param event The event carrying the chart data processed by the core\n   * @category Custom-event handler\n   */\n  handleChartOutputDataChange(event) {\n    // every time the data is processed we check whether it's empty so we can display a message on the chart (see componentDidUpdate())\n    this.arcgisChartsDataProcessComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating a legend item visibility has been changed.\n   * emitting an event carrying the item id and its new visibility\n   * @param event The event carrying the item id and its new visibility\n   * @category Custom-event handler\n   */\n  handleLegendItemVisibilityChanged(event) {\n    this.arcgisChartsLegendItemVisibilityChange.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating a chart is updated\n   * @param event The event carrying the ValidationStatus\n   * @category Custom-event handler\n   */\n  handleUpdateCompleted(event) {\n    this.arcgisChartsUpdateComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container indicating the chart axes\n   * min and max values have been computed\n   * @param event The event carrying the axes min and max\n   * @category Custom-event handler\n   */\n  handleAxesMinMaxChange(event) {\n    this.arcgisChartsAxesMinMaxChange.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container\n   * on selection of one or multiple markers\n   * @param event The event carrying the selected elements\n   * @category Custom-event handler\n   */\n  handleSelection(event) {\n    this.arcgisChartsSelectionComplete.emit(event.detail);\n  }\n  /**\n   * Listener on event coming from the chart container\n   * when more elements than the authorized limit have been selected.\n   * @category Custom-event handler\n   */\n  handleTooManySelectedElements() {\n    // TODO t9n these messages. Only English is available for now\n    this.notifyHeading = this.strings.tooManySelectedElements.title;\n    this.notifyMessage = this.strings.tooManySelectedElements.message;\n    this.notifyOptions = {\n      kind: \"warning\",\n      autoClose: true,\n      duration: \"fast\",\n      active: true\n    };\n    this.showNotifyPanel = true;\n  }\n  /**\n   * Listener on event coming from the closure of a calcite-alert.\n   * The handler helps keeping in sync the boolean `showNotifyPanel` with the panel's state.\n   * @param event\n   * @category Custom-event handler\n   */\n  handleAlertClosed(event) {\n    // If the calcite-alert (notify panel) from this component is getting closed, we flag it\n    if (event.target === this.el) {\n      // we don't want the component to re-render so we skip the next update\n      this.skipNextUpdate = true;\n      this.showNotifyPanel = false;\n    }\n  }\n  /**\n   * Called every time the view prop is updated.\n   * Add a listener to it to keep the chart in sync.\n   * @category Watch handler\n   */\n  async viewChange(newView, oldView) {\n    await this.addExtentChangeListener();\n    // The \"view\" property is flagged as a non-render prop to avoid an unnecessary update when the\n    // view is assigned to the component (the update will happen through the view listeners), so we\n    // only need to explicitly ask for a refresh when the view is removed from the component\n    if (oldView !== undefined && newView === undefined) {\n      await this.refresh();\n    }\n  }\n  /**\n   * Called every time the layer prop is updated.\n   * Adds listeners to it to keep the chart in sync.\n   * @category Watch handler\n   */\n  async layerChange() {\n    await this.addLayerListeners();\n  }\n  /**\n   * Called every time the position of the legend is updated\n   * @param newLegendPosition The new position of the legend\n   * @category Watch handler\n   */\n  legendPositionChange(newLegendPosition) {\n    this.config = updateLegendPosition(newLegendPosition, this.config);\n  }\n  /**\n   * Called every time the visibility of the legend is updated\n   * @param newLegendVisibility The new visibility of the legend\n   * @category Watch handler\n   */\n  legendVisibilityChange(newLegendVisibility) {\n    this.config = updateLegendVisibility(newLegendVisibility, this.config);\n  }\n  /**\n   * Called every time the filter by selection is updated.\n   * Resets the axes min/max.\n   * @category Watch handler\n   */\n  filterBySelectionChanged() {\n    this.config = resetAxesBounds(this.config);\n  }\n  /**\n   * Notify method allows passing external messages to the chart component.\n   * It can be used to pass validation or information messages.\n   * In a situation where a config update is overriding your notification modal,\n   * consider waiting for the `arcgisChartsUpdateComplete` event.\n   * @category Public\n   */\n  async notify(message, heading, options) {\n    if (this.chart !== undefined) {\n      this.chart.notify(message, heading, options);\n    }\n    return Promise.resolve(undefined);\n  }\n  /**\n   * Triggers an alert to display an error message.\n   * @category Public\n   * @param errorMessage\n   */\n  async errorAlert(errorMessage) {\n    this.notifyHeading = this.strings.errorHeading;\n    this.notifyMessage = errorMessage;\n    this.notifyOptions = {\n      kind: \"danger\",\n      autoClose: true,\n      active: true\n    };\n    this.showNotifyPanel = true;\n  }\n  /**\n   * Resets the chart zoom to bring it back to full extent\n   * @category Public\n   */\n  async resetZoom() {\n    if (this.chart !== undefined)\n      this.chart.resetZoom();\n    return Promise.resolve(undefined);\n  }\n  /**\n   * Switches the selection on the chart.\n   * @category Public\n   */\n  async switchSelection() {\n    // for now we don't allow the switch selection when the filter by selection is on\n    if (this.chart !== undefined && this.filterBySelection !== true)\n      await this.chart.switchSelection();\n  }\n  /**\n   * Clears all selection on the chart.\n   * @category Public\n   */\n  async clearSelection() {\n    if (this.chart !== undefined) {\n      this.chart.clearSelection();\n      // to handle the full data reset we call the componentDidUpdate to trigger a chart update\n      if (this.filterBySelection === true) {\n        await this.refresh();\n      }\n    }\n  }\n  /**\n   * Re-render the chart.\n   * @param props.updateData Indicates whether to fetch new data. Default: true.\n   * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.\n   * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.\n   * @category Public\n   */\n  async refresh(props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const { updateData = true, resetAxesBounds = false, updateExtent = false } = props !== null && props !== void 0 ? props : {};\n    ;\n    this.viewExtentUpdated = updateExtent;\n    if (updateData === true)\n      this.dataUpdateIsNeeded();\n    // Resetting the axes bounds\n    if (resetAxesBounds === true) {\n      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.axes) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? true : delete _c.minimum;\n      (_f = (_e = (_d = this.config) === null || _d === void 0 ? void 0 : _d.axes) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? true : delete _f.maximum;\n      (_j = (_h = (_g = this.config) === null || _g === void 0 ? void 0 : _g.axes) === null || _h === void 0 ? void 0 : _h[1]) === null || _j === void 0 ? true : delete _j.minimum;\n      (_m = (_l = (_k = this.config) === null || _k === void 0 ? void 0 : _k.axes) === null || _l === void 0 ? void 0 : _l[1]) === null || _m === void 0 ? true : delete _m.maximum;\n    }\n    await this.componentDidUpdate();\n    // reset the boolean for the next update \n    this.viewExtentUpdated = false;\n  }\n  /**\n   * Prevents render for noRenderProps\n   * @category Lifecycle\n   */\n  componentShouldUpdate(...args) {\n    const [, , propName] = args;\n    // Flagging the property. This list will be used when the chart update is actually called.\n    this.updatedProps.add(propName);\n    const shouldUpdate = this.skipNextUpdate === false && this.noRenderProps.includes(propName) === false;\n    this.skipNextUpdate = false;\n    return shouldUpdate;\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentWillLoad() {\n    ({ strings: this.strings } = await fetchComponentLocaleStrings(this.el, getAssetPath(`.`)));\n    // We define the function that will be called to update the chart. We use the external library fastq to queue the updates\n    // to make sure only one update is executed at a time\n    this.debouncedChartUpdate = fastq.promise(async () => {\n      if (this.chart !== undefined) {\n        const updatedProps = Array.from(this.updatedProps);\n        // if one of the properties updated require a data update, we flag it\n        // multiple properties can be updated within the same time frame, which will trigger only one Stencil lifecycle\n        const dataUpdateNeeded = updatedProps.some((updatedProp) => this.dataUpdateNeededProps.includes(updatedProp));\n        // clearing the list for the next update\n        this.updatedProps.clear();\n        return await this.chart.update({\n          newChartConfig: this.config,\n          updateOptions: gatherComponentOptions({ component: this, dataUpdated: dataUpdateNeeded, viewExtentUpdated: this.viewExtentUpdated }),\n          updateGlobalOptions: gatherComponentGlobalOptions(this)\n        });\n      }\n    }, maximumNumberOfSimultaneousUpdates);\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentDidLoad() {\n    if (this.chartRef !== undefined) {\n      await this.createChartInstance();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  async componentDidUpdate() {\n    var _a;\n    // If this.chartCreationProcessing is still running we need to wait for it to be done before updating the chart\n    if (this.chart === undefined && this.chartCreationProcessing !== undefined)\n      await this.chartCreationProcessing;\n    // Controlling the series type to display a console error if the type is not the expected one\n    // We still proceed to the update to let the config validator deal with the invalid config\n    await validateSeriesType([WebChartTypes.ScatterSeries], this.config);\n    if (this.config !== undefined && this.chart !== undefined && this.showNotifyPanel === false) {\n      try {\n        const dataSource = (_a = this.config) === null || _a === void 0 ? void 0 : _a.dataSource;\n        // Calling for the chart update if the data source is valid and the debounce function exists\n        if (isValidDataSource(this.inlineData, dataSource) && this.debouncedChartUpdate !== undefined) {\n          await this.debouncedChartUpdate.push({});\n        }\n      }\n      catch (e) {\n        if (this.chartRef !== undefined && this.config !== undefined) {\n          if (e.name === ErrorKeywords.ChartDisposed) {\n            this.chart.dispose();\n            this.chartRef.innerHTML = \"\";\n            await this.createChartInstance(false);\n          }\n          else {\n            this.errorAlert(e === null || e === void 0 ? void 0 : e.message);\n            if (e.name === ErrorKeywords.QueryFeaturesError) {\n              // sending an event if a query failed.\n              // We don't automatically recreate the chart in that scenario as it would lead to the same result.\n              this.arcgisChartsDataProcessError.emit(e.details);\n            }\n          }\n        }\n      }\n    }\n    else if (this.chart === undefined &&\n      this.chartCreationProcessing === undefined &&\n      this.showNotifyPanel === false) {\n      await this.createChartInstance();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  async disconnectedCallback() {\n    if (this.chart !== undefined) {\n      this.removeLayerListeners();\n      this.removeExtentChangeListener();\n      this.chart.dispose();\n    }\n  }\n  /**\n   * @category Lifecycle\n   */\n  render() {\n    var _a;\n    const notifyPanel = this.showNotifyPanel === true ? (h(ArcgisChartsNotifyPanel, { heading: this.notifyHeading, message: this.notifyMessage, options: this.notifyOptions })) : null;\n    // TODO: implement stronger way to know when to keep the chart visible\n    const chartStyles = this.showNotifyPanel === true && ((_a = this.notifyOptions) === null || _a === void 0 ? void 0 : _a.kind) === \"danger\"\n      ? \"hide\"\n      : `${WebChartTypes.ScatterSeries} show`;\n    const notifyStyles = this.showNotifyPanel === true ? \"show notifyPanel\" : \"hide\";\n    return (h(Host, null, h(\"slot\", { name: Slot.actionBar }), h(\"div\", { class: chartStyles, ref: (el) => {\n        this.chartRef = el;\n      } }), h(\"div\", { class: notifyStyles }, notifyPanel)));\n  }\n  /**\n   * Util function that can be used to trigger a data update next time the chart is updated\n   * @category Private\n   */\n  dataUpdateIsNeeded() {\n    this.updatedProps.add(\"forceDataUpdate\");\n  }\n  /**\n   * Adds the listener to listen to the layer definitionExpression and renderer changes\n   * @category Private\n   */\n  async addLayerListeners() {\n    // removing existing listeners before adding new ones\n    this.removeLayerListeners();\n    this.layerFilterListener = await addLayerFilterListener({\n      layer: this.layer,\n      component: this\n    });\n    this.layerRendererListener = await addLayerRendererListener({\n      layer: this.layer,\n      component: this\n    });\n  }\n  /**\n   * Adds a listener to listen to the view's extent change\n   * @category Private\n   */\n  async addExtentChangeListener() {\n    // removing existing listeners before adding new ones\n    this.removeExtentChangeListener();\n    this.extentChangeListener = await addExtentChangeListener({\n      view: this.view,\n      layer: this.layer,\n      component: this\n    });\n  }\n  /**\n   * Removes the listeners added to listen to the layer definitionExpression and renderer changes\n   * @category Private\n   */\n  removeLayerListeners() {\n    if (this.layerFilterListener !== undefined)\n      this.layerFilterListener.remove();\n    if (this.layerRendererListener !== undefined)\n      this.layerRendererListener.remove();\n  }\n  /**\n   * Removes the listener added to listen to the view's extent change\n   * @category Private\n   */\n  removeExtentChangeListener() {\n    if (this.extentChangeListener !== undefined)\n      this.extentChangeListener.remove();\n  }\n  /**\n   * If the chart config version is newer than the current one, display a message in a popup.\n   * @category Private\n   */\n  checkForIncompatibleChartVersion() {\n    var _a;\n    const chartVersion = (_a = this.config) === null || _a === void 0 ? void 0 : _a.version;\n    if (getChartVersionInfo(chartVersion).versionStatus === WebChartVersionStatus.Newer) {\n      this.notifyHeading = this.strings.incompatibleChartVersion.title;\n      this.notifyMessage = formatMessage(this.strings.incompatibleChartVersion.message, {\n        chartVersion: chartVersion !== null && chartVersion !== void 0 ? chartVersion : \"\"\n      });\n      this.notifyOptions = {\n        kind: \"warning\",\n        autoClose: true,\n        active: true\n      };\n      this.showNotifyPanel = true;\n    }\n  }\n  /**\n   * creates arcgis chart instance\n   * @param firstCreation Indicates whether it's the first time the component is created\n   * @category Private\n   */\n  async createChartInstance(firstCreation = true) {\n    var _a, _b;\n    // Controlling the series type to display a console error if the type is not the expected one\n    // We still proceed to the creation to let the config validator deal with the invalid config\n    await validateSeriesType([WebChartTypes.ScatterSeries], this.config);\n    this.checkForIncompatibleChartVersion();\n    this.updatedProps.clear();\n    try {\n      const dataSource = (_a = this.config) === null || _a === void 0 ? void 0 : _a.dataSource;\n      if (isValidDataSource(this.inlineData, dataSource)) {\n        this.chartCreationProcessing = createChart({\n          chartContainer: this.chartRef,\n          chartConfig: this.config,\n          options: gatherComponentOptions({ component: this }),\n          globalOptions: gatherComponentGlobalOptions(this)\n        });\n      }\n      this.chart = await this.chartCreationProcessing;\n      // after creating the chart we add listeners on the feature layer and view\n      // only adding them if it's the first component creation. `createChartInstance()` can be called\n      // when an update failed, and in that case we don't need to add again the listeners given the view\n      // or layer didn't change\n      if (firstCreation === true) {\n        await this.addLayerListeners();\n        await this.addExtentChangeListener();\n      }\n    }\n    catch (e) {\n      // sending an event if a query failed\n      if (e.name === ErrorKeywords.QueryFeaturesError) {\n        this.arcgisChartsDataProcessError.emit(e.details);\n      }\n      // displaying the error\n      this.errorAlert(e === null || e === void 0 ? void 0 : e.message);\n      // disposing the chart\n      (_b = this.chart) === null || _b === void 0 ? void 0 : _b.dispose();\n      this.chartCreationProcessing = undefined;\n      this.chart = undefined;\n    }\n  }\n  static get is() { return \"arcgis-charts-scatter-plot\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"arcgis-charts-scatter-plot.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"arcgis-charts-scatter-plot.css\"]\n    };\n  }\n  static get assetsDirs() { return [\"t9n\"]; }\n  static get properties() {\n    return {\n      \"config\": {\n        \"type\": \"unknown\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"WebChart | WebMapWebChart\",\n          \"resolved\": \"WebChart | WebMapWebChart | undefined\",\n          \"references\": {\n            \"WebChart\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            },\n            \"WebMapWebChart\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"ArcGIS Web Chart Specification that defines the chart component\\nWhen the `config` prop is updated, it closes the modal opened via `notify` method.\"\n        }\n      },\n      \"inlineData\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"InlineData<WebChartScatterPlotDataItem>\",\n          \"resolved\": \"InlineData<WebChartScatterPlotDataItem> | undefined\",\n          \"references\": {\n            \"InlineData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            },\n            \"WebChartScatterPlotDataItem\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used for specifying inline data (raw or processed) for the chart\"\n        }\n      },\n      \"actionMode\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ActionModes\",\n          \"resolved\": \"\\\"monoSelection\\\" | \\\"multiSelection\\\" | \\\"multiSelectionWithCtrlKey\\\" | \\\"none\\\" | \\\"zoom\\\" | undefined\",\n          \"references\": {\n            \"ActionModes\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Defines the cursor behavior on the chart (zoom, selection...)\"\n        },\n        \"attribute\": \"action-mode\",\n        \"reflect\": false\n      },\n      \"legendPosition\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"WebChartLegendPositions\",\n          \"resolved\": \"\\\"bottom\\\" | \\\"left\\\" | \\\"right\\\" | \\\"top\\\"\",\n          \"references\": {\n            \"WebChartLegendPositions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used by the legend position change action.\"\n        },\n        \"attribute\": \"legend-position\",\n        \"reflect\": false\n      },\n      \"legendVisibility\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used by the legend visibility change action.\"\n        },\n        \"attribute\": \"legend-visibility\",\n        \"reflect\": false\n      },\n      \"view\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"__esri.MapView | __esri.SceneView\",\n          \"resolved\": \"MapView | SceneView | undefined\",\n          \"references\": {\n            \"___esri\": {\n              \"location\": \"global\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to access to the FeatureLayerView instance in order to perform client-side queries.\"\n        }\n      },\n      \"layer\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"__esri.FeatureLayer\",\n          \"resolved\": \"FeatureLayer | undefined\",\n          \"references\": {\n            \"___esri\": {\n              \"location\": \"global\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to perform queries.\\nIf the layer is a FeatureLayer and the `view` property is provided, it will be used to access the FeatureLayerView instance\\nin order to perform client-side queries.\"\n        }\n      },\n      \"selectionData\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"SelectionData\",\n          \"resolved\": \"SelectionData | undefined\",\n          \"references\": {\n            \"SelectionData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"When this property is set it will apply a selection on the chart matching the provided selection.\"\n        }\n      },\n      \"returnSelectionOIDs\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"true\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates if the object ids need to be computed whenever a selection is made on or passed to the chart.\\nOnly considered for a data source using a feature layer.\"\n        },\n        \"attribute\": \"return-selection-o-i-ds\",\n        \"reflect\": false\n      },\n      \"returnSelectionIndexes\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates if the selection indexes need to be computed whenever a selection is made on or passed to the chart.\"\n        },\n        \"attribute\": \"return-selection-indexes\",\n        \"reflect\": false\n      },\n      \"filterBySelection\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Filters all chart elements based on selection.\"\n        },\n        \"attribute\": \"filter-by-selection\",\n        \"reflect\": false\n      },\n      \"disableInteractions\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Boolean to disable all interactions on the chart.\"\n        },\n        \"attribute\": \"disable-interactions\",\n        \"reflect\": true\n      },\n      \"disableTogglingLegendItems\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Used to disable the toggling of trend line via the legend items.\"\n        },\n        \"attribute\": \"disable-toggling-legend-items\",\n        \"reflect\": false\n      },\n      \"queueChartCreation\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To ensure that charts are built one by one. True by default\"\n        },\n        \"attribute\": \"queue-chart-creation\",\n        \"reflect\": true\n      },\n      \"useAnimatedCharts\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To activate the animations on the chart. False by default\"\n        },\n        \"attribute\": \"use-animated-charts\",\n        \"reflect\": true\n      },\n      \"hideLicenceWatermark\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To hide the licence watermark. False by default\"\n        },\n        \"attribute\": \"hide-licence-watermark\",\n        \"reflect\": true\n      },\n      \"enableResponsiveFeatures\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To enable the responsive features. True by default\"\n        },\n        \"attribute\": \"enable-responsive-features\",\n        \"reflect\": true\n      },\n      \"autoDisposeChart\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"To auto-dispose a chart if a new one is created in the same container. False by default\"\n        },\n        \"attribute\": \"auto-dispose-chart\",\n        \"reflect\": true\n      },\n      \"placeholder\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"It is a string that provides a brief hint to the user to indicate needed information to create a chart.\"\n        },\n        \"attribute\": \"placeholder\",\n        \"reflect\": false\n      },\n      \"selectionTheme\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"SelectionTheme\",\n          \"resolved\": \"SelectionTheme | undefined\",\n          \"references\": {\n            \"SelectionTheme\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to provide a customized theme for the selected and non selected elements.\\nIf no style is provided for the selected elements, a default selection is applied.\\nIf no style is provided for the non selected elements, the chart's style is applied.\"\n        }\n      },\n      \"ignoreSmoothRenderingLimit\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Can be used to disable the default setting that uses debounce functions to handle the visibility of markers\\nthat are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed\\n(via chart cursor or scrollbar), to increase performance.\\nThis property will be set when the chart is created and cannot be updated after that.\\nIt's recommended that this property should only be set to true for small datasets.\\nThe default value is false.\"\n        },\n        \"attribute\": \"ignore-smooth-rendering-limit\",\n        \"reflect\": false\n      },\n      \"tooltipFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ScatterPlotLabelFormatCallback\",\n          \"resolved\": \"((x: number, y: number, sizePolicyValue?: number | undefined) => string) | undefined\",\n          \"references\": {\n            \"ScatterPlotLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"dataLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ScatterPlotLabelFormatCallback\",\n          \"resolved\": \"((x: number, y: number, sizePolicyValue?: number | undefined) => string) | undefined\",\n          \"references\": {\n            \"ScatterPlotLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"guideTooltipFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"GuideTooltipFormatCallback\",\n          \"resolved\": \"((props: GuideTooltipFormatCallbackProps) => string) | undefined\",\n          \"references\": {\n            \"GuideTooltipFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"xAxisLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AxisLabelFormatCallback\",\n          \"resolved\": \"((value: string | number | Date) => string) | undefined\",\n          \"references\": {\n            \"AxisLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Indicates whether to show the Arcgis charts notify panel. False by default\\nA callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"yAxisLabelFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AxisLabelFormatCallback\",\n          \"resolved\": \"((value: string | number | Date) => string) | undefined\",\n          \"references\": {\n            \"AxisLabelFormatCallback\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.\"\n        }\n      },\n      \"noDataOptions\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"NoDataOptions\",\n          \"resolved\": \"NoDataOptions | undefined\",\n          \"references\": {\n            \"NoDataOptions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to set the chart's behavior when its data set is empty\"\n        }\n      },\n      \"hideLoaderAnimation\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Used to hide the loader animation (curtain and spinner), showed by default at every update.\"\n        },\n        \"attribute\": \"hide-loader-animation\",\n        \"reflect\": false\n      },\n      \"runtimeDataFilters\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"WebChartDataFilters\",\n          \"resolved\": \"undefined | { geometry?: IPoint | IPolyline | IPolygon | IPolygonWithCurves | IEnvelope | IExtent | undefined; timeExtent?: [number, number] | undefined; gdbVersion?: string | undefined; distance?: number | undefined; units?: RESTUnits | undefined; where?: string | undefined; }\",\n          \"references\": {\n            \"WebChartDataFilters\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }],\n          \"text\": \"Used to apply runtime filters to the chart's data while in Feature Layer mode.\"\n        }\n      },\n      \"usePopupTemplateFieldsInfo\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"Category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"default\",\n              \"text\": \"false\"\n            }],\n          \"text\": \"Can be set to true to read the fields from layer.popupTemplate and use their alias when rendering tooltips\"\n        },\n        \"attribute\": \"use-popup-template-fields-info\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"showNotifyPanel\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"arcgisChartsDataProcessError\",\n        \"name\": \"arcgisChartsDataProcessError\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered when an error occurred while fetching of processing the data for the chart\"\n        },\n        \"complexType\": {\n          \"original\": \"any\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"arcgisChartsDataProcessComplete\",\n        \"name\": \"arcgisChartsDataProcessComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart data is received from the core\"\n        },\n        \"complexType\": {\n          \"original\": \"WebChartScatterPlotDataItem\",\n          \"resolved\": \"WebChartScatterPlotDataItem\",\n          \"references\": {\n            \"WebChartScatterPlotDataItem\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsLegendItemVisibilityChange\",\n        \"name\": \"arcgisChartsLegendItemVisibilityChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once a legend item visibility has been changed\"\n        },\n        \"complexType\": {\n          \"original\": \"LegendItemVisibility\",\n          \"resolved\": \"LegendItemVisibility\",\n          \"references\": {\n            \"LegendItemVisibility\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsUpdateComplete\",\n        \"name\": \"arcgisChartsUpdateComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart is updated\"\n        },\n        \"complexType\": {\n          \"original\": \"ValidationStatus\",\n          \"resolved\": \"ValidationStatus\",\n          \"references\": {\n            \"ValidationStatus\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsAxesMinMaxChange\",\n        \"name\": \"arcgisChartsAxesMinMaxChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered once the chart axes min/max values are computed\"\n        },\n        \"complexType\": {\n          \"original\": \"CalculatedMinMaxBoundsPayload[]\",\n          \"resolved\": \"CalculatedMinMaxBoundsPayload[]\",\n          \"references\": {\n            \"CalculatedMinMaxBoundsPayload\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-spec\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"arcgisChartsSelectionComplete\",\n        \"name\": \"arcgisChartsSelectionComplete\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"event\",\n              \"text\": undefined\n            }],\n          \"text\": \"Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a marker\"\n        },\n        \"complexType\": {\n          \"original\": \"SelectionData\",\n          \"resolved\": \"SelectionData\",\n          \"references\": {\n            \"SelectionData\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-shared-utils\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"notify\": {\n        \"complexType\": {\n          \"signature\": \"(message?: string, heading?: string, options?: NotifyOptions) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"NotifyOptions\": {\n              \"location\": \"import\",\n              \"path\": \"@arcgis/charts-js\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Notify method allows passing external messages to the chart component.\\nIt can be used to pass validation or information messages.\\nIn a situation where a config update is overriding your notification modal,\\nconsider waiting for the `arcgisChartsUpdateComplete` event.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"errorAlert\": {\n        \"complexType\": {\n          \"signature\": \"(errorMessage?: string) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"errorMessage\"\n                }],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Triggers an alert to display an error message.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"errorMessage\"\n            }]\n        }\n      },\n      \"resetZoom\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Resets the chart zoom to bring it back to full extent\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"switchSelection\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Switches the selection on the chart.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"clearSelection\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Clears all selection on the chart.\",\n          \"tags\": [{\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      },\n      \"refresh\": {\n        \"complexType\": {\n          \"signature\": \"(props?: { updateData?: boolean | undefined; resetAxesBounds?: boolean | undefined; updateExtent?: boolean | undefined; } | undefined) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Re-render the chart.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"props.updateData Indicates whether to fetch new data. Default: true.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"props.updateExtent Indicates whether the view's extent is to update. Default: false.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"props.resetAxesBounds Option to reset the axes bounds along with the refresh.\"\n            }, {\n              \"name\": \"category\",\n              \"text\": \"Public\"\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"view\",\n        \"methodName\": \"viewChange\"\n      }, {\n        \"propName\": \"layer\",\n        \"methodName\": \"layerChange\"\n      }, {\n        \"propName\": \"legendPosition\",\n        \"methodName\": \"legendPositionChange\"\n      }, {\n        \"propName\": \"legendVisibility\",\n        \"methodName\": \"legendVisibilityChange\"\n      }, {\n        \"propName\": \"filterBySelection\",\n        \"methodName\": \"filterBySelectionChanged\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"arcgisChartsJSDataProcessComplete\",\n        \"method\": \"handleChartOutputDataChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSLegendItemVisibilityChange\",\n        \"method\": \"handleLegendItemVisibilityChanged\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSUpdateComplete\",\n        \"method\": \"handleUpdateCompleted\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSAxesMinMaxChange\",\n        \"method\": \"handleAxesMinMaxChange\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSSelectionComplete\",\n        \"method\": \"handleSelection\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"arcgisChartsJSTooManySelectedElements\",\n        \"method\": \"handleTooManySelectedElements\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"calciteAlertClose\",\n        \"method\": \"handleAlertClosed\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\n","/**\n * This script will convert Cedar chart definitions into ArcGIS Chart specifications. \n * \n * Not all chart types or functionality is supported yet. This script is an initial version that will progressively add more conversion capabilities.\n */\n\nimport { \n  CategoryFormatOptions, \n  DateTimeFormatOptions, \n  NumberFormatOptions, \n  WebChart, \n  WebChartAxis, \n  WebChartDataSources, \n  WebChartLegend, \n  WebChartSeriesType \n} from \"@arcgis/charts-spec\";\n\n// @ts-ignore - where to get Color type?\nconst cedarColors:Record<any,Color> = {\n  blue: [0, 121, 193, 255],\n  gray: [128, 128, 128, 200],\n  red: [255, 0, 0, 200],\n  white: [255, 255, 255, 255]\n}\n\n/**\n * Draft function for converting Cedar bar charts to ArcGIS Charts\n * @param cedar\n * @returns\n */\nexport function convertCedar(cedar, title=\"\") {\n\n  const json: WebChart = {\n    //@ts-ignore\n    version: \"1.0.0\",\n    type: \"chart\",\n    dataSource: convertData(cedar),\n    id: \"Chart\",\n    background: cedarColors.white,\n    cursorCrosshair: {\n      type: \"cursorCrosshair\",\n      style: {\n        type: \"esriSLS\",\n        style: \"esriSLSDash\",\n        color: cedarColors.red,\n        width: 1,\n      },\n      horizontalLineVisible: true,\n      verticalLineVisible: true,\n    },\n    title: {\n      type: \"chartText\",\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.gray,\n        text: title,\n        font: {\n          size: 20,\n        },\n      },\n    },\n    series: [],\n    // @ts-ignore // we'll add this below\n    axes: [],\n  };\n\n  json.axes = convertAxes(cedar);\n\n  cedar.series.map((set, index) => {\n    json.series.push(convertSet(cedar, set, index));\n\n  });\n\n  json.legend = convertLegend(cedar);\n\n  return json;\n}\n\n/**\n * Creates an ArcGIS Charts legend from Cedar definition\n * @param cedar Cedar definition\n * @returns \n */\nfunction convertLegend(cedar: any): WebChartLegend {\n  return {\n    type: \"chartLegend\",\n    visible: true,\n    title: {\n      type: \"chartText\",\n      visible: true,\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.white,\n        text: cedar.series[0].category.label,\n        font: {\n          size: 14,\n          weight: \"bold\",\n        },\n      },\n    },\n    body: {\n      type: \"esriTS\",\n      color: cedarColors.white,\n      font: {\n        size: 12,\n      },\n    },\n    position: \"right\",\n  };\n}\n\n/**\n * Creates an ArcGIS Charts Set (a single Series) from Cedar definition\n * @param cedar Cedar definition\n */\nfunction convertSet(cedar: any, set: any, index: any): WebChartSeriesType {\n  return {\n    type: convertChartType(cedar),\n    id: set.source || `chart${index}`,\n    name: set.value.label,\n    query: cedar.datasets[0].query || {},\n    x: set.category.field,\n    y: set.value.field,\n    colorType: \"singleColor\",\n    // stackedType: \"sideBySide\",\n    markerSymbol: {\n      type: \"esriSMS\",\n      style: \"esriSMSCircle\",\n      size: 5\n    },\n    fillSymbol: {\n      type: \"esriSFS\",\n      color: [0, 121, 193, 200],\n      outline: {\n        type: \"esriSLS\",\n        color: cedarColors.white,\n        width: 1,\n      },\n    },\n    lineSymbol: {\n      type: \"esriSLS\",\n      width: 1\n    },\n    dataLabels: {\n      type: \"chartText\",\n      visible: false,\n      content: {\n        type: \"esriTS\",\n        color: cedarColors.blue,\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Creates an ArcGIS Charts axis pair from Cedar definition\n * @param cedar Cedar definition\n * @returns Dependent and independent axes based on category, number, or time\n */\nfunction convertAxes(cedar: any): [WebChartAxis, WebChartAxis?] {\n  return [\n    {\n      type: \"chartAxis\",\n      visible: axesVisible(cedar),\n      title: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          text: cedar.series[0].category.label,\n          font: convertFontSize(cedar)\n        }\n      },\n      labels: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          font: convertFontSize(cedar)\n        }\n      },\n      valueFormat: convertValueFormat(cedar.series[0].category),\n      lineSymbol: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 2\n      }\n    },\n    {\n      type: \"chartAxis\",\n      visible: axesVisible(cedar),\n      title: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          text: cedar.series[0].value.label,\n          font: convertFontSize(cedar)\n        }\n      },\n      labels: {\n        type: \"chartText\",\n        visible: axesVisible(cedar),\n        content: {\n          type: \"esriTS\",\n          color: cedarColors.gray,\n          font: convertFontSize(cedar)\n        }\n      },\n      valueFormat: convertValueFormat(cedar.series[0].value),\n      grid: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 1\n      },\n      lineSymbol: {\n        type: \"esriSLS\",\n        color: cedarColors.gray,\n        width: 2\n      }\n    }\n  ];\n}\n\n/**\n * Creates an ArcGIS Charts data source for feature layer in inline from the Cedar definition\n * @param cedar Cedar definition\n * @returns \n */\nfunction convertData(cedar): WebChartDataSources {\n\n  let dataSource = {} as WebChartDataSources;\n  // Dynamic data\n  if(!!cedar.datasets[0].url) {\n    dataSource = {\n      type: \"layer\",\n      layer: {\n        layerType: \"ArcGISFeatureLayer\",\n        id: \"\",\n        url: cedar.datasets[0].url,\n      },\n    }\n  }\n  // Inline data\n  if(!!cedar.datasets[0].data) {\n    dataSource = {\n      type: \"inline\",\n      processed: true,\n      data: {\n        dataItems: cedar.datasets[0].data.features.map((f) => {\n          return f.attributes\n        }),\n      },\n    }\n  }\n\n  return dataSource;\n\n}\n\n/**\n * Convert Cedar axis config to ArcGIS charts axis config\n * Defaults to Category\n * @param seriesConfig \n * @returns \n */\nfunction convertValueFormat( seriesConfig ) {\n  if(seriesConfig?.type === \"timestamp\") {\n    return ({\n      type: \"date\",\n      intlOptions: {}\n    } as DateTimeFormatOptions);\n  } else if(seriesConfig.type === \"number\") {\n    return ({\n      type: \"number\",\n      intlOptions: {\n        style: \"decimal\",\n        notation: \"compact\",\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }\n    } as NumberFormatOptions);\n  } else {\n    return({\n      type: \"category\",\n      characterLimit: 11,\n      intlOptions: {}\n    } as CategoryFormatOptions);\n  }\n   \n}\n\nfunction convertChartType(cedar) {\n  switch(cedar.type) {\n    case 'sparkline': {\n      return 'lineSeries';\n    }\n    case 'line': {\n      return 'lineSeries';\n    }\n    case 'bar': {\n      return 'barSeries';\n    }\n  }\n}\n\nfunction convertFontSize( _cedar ) {\n  return({\n    size: 14\n  })\n}\nfunction axesVisible( cedar ) {\n  return cedar.type !== 'sparkline';\n}\n\n",":host {\n  display: block;\n}\n.chart {\n  height: 100%;\n}\n.source {\n  display: none;\n  \n  z-index: 1000;\n  overflow: auto;\n  height: 300px;\n  border: 1px solid gray;\n  \n  grid-template-columns: 50% 50%;\n  grid-column-gap: 0px;\n}\n.source-cedar {\n  grid-column: 1;\n  overflow: auto;\n}\n.source-chart {\n  grid-column: 2;\n  overflow: auto;\n}\n.source.visible {\n  display: grid;\n}","import { Component, Host, h, State, Listen, Prop, Watch } from '@stencil/core';\n// import { feature_layer_chart } from '../../data/charts';\n\n// import \"arcgis-charts-components\";\nimport '@arcgis/charts-components';\n// import \"arcgis-charts-components/dist/components/index\";\n// import { setAssetPath  } from \"@arcgis/charts-components/dist/components\";\nimport { WebChart } from '@arcgis/charts-spec';\n\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-bar-chart\";\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-scatter-plot\";\n// import \"@arcgis/charts-components/dist/components/arcgis-charts-histogram\";\n\nimport \"@arcgis/charts-components/dist/arcgis-charts-components/arcgis-charts-components.css\";\nimport { convertCedar } from '../../util/converter';\n\n// import { defineCustomElements } from \"@arcgis/charts-components/dist/loader\";\n// // Local assets\n// defineCustomElements(window);\n\n// TODO: load charts only when chart used: https://stackoverflow.com/questions/60633526/how-to-use-an-external-third-party-library-in-stencil-js\n\n@Component({\n  tag: 'cedar-chart',\n  styleUrl: 'cedar-chart.css',\n  shadow: true,\n})\nexport class CedarChart {\n  \n  /** \n   * URL to an ArcGIS Charts config\n   */\n  @Prop() configUrl:string = null;\n\n  /**\n   * URL to an ArcGIS Cedar Config\n   */\n  @Prop() cedarUrl:string = null;\n\n  /**\n   * Optional inline data override to cedar\n   * This is a FeatureSet, for cedar\n   * If a general array is used, it will need to drop 'attributes'\n   */\n  @Prop() data:any = null\n\n  /**\n   * Optional Chart title\n   */\n  @Prop() chartTitle:string = \"\";\n\n  /** \n   * ArcGIS Charts Config\n   */\n  @Prop({mutable: true, reflect: true}) config: WebChart = null;\n\n  /**\n   * ArcGIS Cedar Config\n   */\n  @Prop({mutable: true, reflect: true}) cedar:any = null;\n\n  @State() chartType: 'bar' | 'line' | 'sparkline' = 'bar';\n  \n  /**\n   * Final stored state to render.\n   * Prevents circular updates with the config Prop\n   */\n  @State() chartConfig: WebChart = null;\n  \n  async componentWillLoad() {\n    await this.loadChart();\n  }\n  \n  componentWillRender() {\n    console.debug(\"cedar-chart: componentWillRender()\");\n  }\n\n  \n  @Watch('cedar')\n  @Watch('cedarUrl')\n  @Watch('data')\n  @Watch('config')\n  async loadChart() {\n    if(!!this.configUrl) {\n      console.debug(\"cedar-chart: loadChart(configUrl)\", this.configUrl);\n      const response = await fetch(this.configUrl);\n      this.chartConfig = await response.json();\n    } else if (!!this.cedarUrl) {\n      console.debug(\"cedar-chart: loadChart(cedarUrl)\", this.cedarUrl);\n      const response = await fetch(this.cedarUrl);\n      this.cedar = await response.json();\n      \n      // TODO: move this to check the final ArcGIS chart type.\n      this.chartType = this.cedar?.type;\n\n      // If component is sending in specific data\n      // e.g. telemetry data\n      if(!!this.data) {\n        this.cedar.datasets[0].data.features = this.data;\n      }\n      console.debug(\"cedar-chart: Chart cedar converting...\", {\n        cedar: this.cedar,\n      });\n      this.chartConfig = convertCedar( this.cedar, this.chartTitle );\n    } else if (!!this.cedar) {\n      console.debug(\"cedar-chart: loadChart(cedar)\", this.cedar);\n\n      this.chartConfig = convertCedar( this.cedar, this.chartTitle || \"\" );\n    } else if (!!this.config) {\n      console.debug(\"cedar-chart: loadChart(config)\", this.cedar);\n      this.chartConfig = this.config;\n    } else {\n      console.debug(\"cedar-chart: no load option?\");\n\n    }\n    console.debug(\"cedar-chart: Chart config loaded\", {\n      cedar: this.cedar,\n      configUrl: this.configUrl,\n      cedarUrl: this.cedarUrl,\n      config: this.config,\n      json: JSON.stringify(this.config)\n    })\n  }\n\n  @Listen('arcgisChartsDataProcessComplete')\n  loadingComplete(evt)  {\n    console.debug(\"arcgisChartsDataProcessComplete\", evt);\n  }\n\n  @Listen('arcgisChartsDataProcessError')\n  dataError(evt) {\n    console.error(\"arcgisChartsDataProcessError\", evt);\n  }\n\n  @Listen('arcgisChartsUpdateComplete')\n  updateComplete(evt) {\n    console.debug(\"arcgisChartsUpdateComplete\", evt);\n  }\n\n  render() {\n    console.debug(\"cedar-chart: Rendering chart\", {config: this.chartConfig})\n    let content = null;\n    if(!!this.chartConfig) {\n     content = this.renderChart(this.chartConfig)\n    }\n    return (\n      <Host>\n        <slot></slot>\n        {content}\n        {/* {this.renderSource()} */}\n      </Host>\n    );\n  }\n\n  private sourceEl;\n  renderSource() {\n    return( [\n      <a onClick={(_ev) => this.sourceEl.classList.toggle('visible')}>source</a>\n      ,\n      <div class=\"source\" ref={(el) => this.sourceEl = el}>\n        <code class=\"source-cedar\">\n          Cedar\n          {JSON.stringify(this.cedar)}\n        </code>\n        <code class=\"source-chart\">\n          ArcGIS Charts\n          {JSON.stringify(this.config)}\n        </code>\n      </div>]\n    )\n  }\n  renderChart(config) {\n    const type = config.chartType || config.series[0].type.replace(/Series/,'');\n    console.debug(\"cedar-chart: renderChart\", {type, config})\n\n    switch(type) {\n      case 'bar': {\n        return this.renderBarChart(config);\n      }\n      case 'line': {\n        return this.renderLineChart(config);\n      }\n      case 'sparkline': {\n        return this.renderLineChart(config);\n      }\n      case 'pie': {\n        return this.renderPieChart(config);\n      }\n      case 'scatter': {\n        return this.renderScatterChart(config);\n      }      \n      default: {\n        return (<strong>`{type}` is not a recognized chart type</strong>)\n      }\n    }\n  }\n\n\n  renderPieChart(config) {\n    return ([\n      <h3>Pie Chart</h3>,\n      <arcgis-charts-pie-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-pie-chart>\n    ]\n    )\n  }\n\n\n  renderScatterChart(config) {\n    return ([\n      <h3>Scatter Plot</h3>,\n      <arcgis-charts-scatter-plot \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-scatter-plot>\n    ]\n    )\n  }  \n\n  renderLineChart(config) {\n    return ([\n      <h3>Line Chart</h3>,\n      <arcgis-charts-line-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-line-chart>\n    ]\n      \n    )\n  }\n\n\n  renderBarChart(config) {\n    console.debug(\"rendering Bar Chart\", {config})\n    return ([\n      <h3>Bar Chart</h3>,\n      <arcgis-charts-bar-chart \n          id=\"chart\" \n          class=\"chart\" \n          config={config as WebChart}\n      ></arcgis-charts-bar-chart>\n    ]\n    )\n  }\n\n}\n"],"mappings":"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"}