{"version":3,"names":["requiresFormData","params","Object","keys","some","key","value","toParam","type","constructor","name","processParams","newParams","forEach","_a","_b","param","firstElementType","JSON","stringify","join","valueOf","Array","isArray","encodeParam","map","arrayElem","encodeURIComponent","encodeQueryString","browserPonyfill","FormData","globalThis","File","Blob","encodeFormData","forceFormData","useFormData","formData","filename","append","ArcGISRequestError","Error","message","code","response","url","options","super","actualProto","prototype","setPrototypeOf","this","originalMessage","warn","console","apply","getFetch","Promise","resolve","fetch","Headers","Response","Request","request","NODEJS_DEFAULT_REFERER_HEADER","getDefaultRequestOptions","DEFAULT_ARCGIS_REQUEST_OPTIONS","httpMethod","f","ArcGISAuthError","retry","getSession","retryLimit","tries","retryRequest","reject","then","session","newOptions","assign","authentication","internalRequest","catch","e","checkForErrors","originalAuthError","error","messageCode","errorCode","status","parse","statusMessage","requestOptions","defaults","headers","rawResponse","fetchOptions","method","signal","credentials","indexOf","rawToken","portal","getToken","startsWith","suppressWarnings","ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING","originalUrl","err","token","length","getDomainCredentials","requestHeaders","hideToken","window","queryParams","urlWithQueryString","maxUrlLength","RegExp","test","body","document","referer","ok","json","jsonError","statusText","details","formattedMessage","trim","text","blob","data","truncatedUrl","toLowerCase","split","federatedServers","expires","Date","now","canRefresh","refreshCredentials","cleanUrl","slice","getPortalUrl","getItemBaseUrl","id","portalUrlOrRequestOptions","portalUrl","getItemData","file","emptyResponseErr","cedarDashboardCss","CedarDashboard","componentWillLoad","loadWebmap","webmapId","async","newWebmapId","webmapData","charts","operationalLayers","layer","flat","debug","render","h","Host","chart","config"],"sources":["./node_modules/@esri/arcgis-rest-request/dist/esm/utils/process-params.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-query-string.js","./node_modules/@esri/arcgis-rest-form-data/browser-ponyfill.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/encode-form-data.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/ArcGISRequestError.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/warn.js","./node_modules/@esri/arcgis-rest-fetch/browser-ponyfill.js","./node_modules/@esri/arcgis-rest-request/dist/esm/request.js","./node_modules/@esri/arcgis-rest-request/dist/esm/utils/clean-url.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/util/get-portal-url.js","./node_modules/@esri/arcgis-rest-portal/dist/esm/items/get.js","./src/components/cedar-dashboard/cedar-dashboard.css?tag=cedar-dashboard&encapsulation=shadow","./src/components/cedar-dashboard/cedar-dashboard.tsx"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params) {\n    return Object.keys(params).some((key) => {\n        let value = params[key];\n        if (!value) {\n            return false;\n        }\n        if (value && value.toParam) {\n            value = value.toParam();\n        }\n        const type = value.constructor.name;\n        switch (type) {\n            case \"Array\":\n                return false;\n            case \"Object\":\n                return false;\n            case \"Date\":\n                return false;\n            case \"Function\":\n                return false;\n            case \"Boolean\":\n                return false;\n            case \"String\":\n                return false;\n            case \"Number\":\n                return false;\n            default:\n                return true;\n        }\n    });\n}\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params) {\n    const newParams = {};\n    Object.keys(params).forEach((key) => {\n        var _a, _b;\n        let param = params[key];\n        if (param && param.toParam) {\n            param = param.toParam();\n        }\n        if (!param &&\n            param !== 0 &&\n            typeof param !== \"boolean\" &&\n            typeof param !== \"string\") {\n            return;\n        }\n        const type = param.constructor.name;\n        let value;\n        // properly encodes objects, arrays and dates for arcgis.com and other services.\n        // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n        // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n        // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n        switch (type) {\n            case \"Array\":\n                // Based on the first element of the array, classify array as an array of arrays, an array of objects\n                // to be stringified, or an array of non-objects to be comma-separated\n                // eslint-disable-next-line no-case-declarations\n                const firstElementType = (_b = (_a = param[0]) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name;\n                value =\n                    firstElementType === \"Array\"\n                        ? param // pass thru array of arrays\n                        : firstElementType === \"Object\"\n                            ? JSON.stringify(param) // stringify array of objects\n                            : param.join(\",\"); // join other types of array elements\n                break;\n            case \"Object\":\n                value = JSON.stringify(param);\n                break;\n            case \"Date\":\n                value = param.valueOf();\n                break;\n            case \"Function\":\n                value = null;\n                break;\n            case \"Boolean\":\n                value = param + \"\";\n                break;\n            default:\n                value = param;\n                break;\n        }\n        if (value ||\n            value === 0 ||\n            typeof value === \"string\" ||\n            Array.isArray(value)) {\n            newParams[key] = value;\n        }\n    });\n    return newParams;\n}\n//# sourceMappingURL=process-params.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { processParams } from \"./process-params.js\";\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key, value) {\n    // For array of arrays, repeat key=value for each element of containing array\n    if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n        return value\n            .map((arrayElem) => encodeParam(key, arrayElem))\n            .join(\"&\");\n    }\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params) {\n    const newParams = processParams(params);\n    return Object.keys(newParams)\n        .map((key) => {\n        return encodeParam(key, newParams[key]);\n    })\n        .join(\"&\");\n}\n//# sourceMappingURL=encode-query-string.js.map","module.exports = {\n  FormData: globalThis.FormData,\n  File: globalThis.File,\n  Blob: globalThis.Blob\n};\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { processParams, requiresFormData } from \"./process-params.js\";\nimport { encodeQueryString } from \"./encode-query-string.js\";\nimport { FormData } from \"@esri/arcgis-rest-form-data\";\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(params, forceFormData) {\n    // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n    const useFormData = requiresFormData(params) || forceFormData;\n    const newParams = processParams(params);\n    if (useFormData) {\n        const formData = new FormData();\n        Object.keys(newParams).forEach((key) => {\n            if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n                /* To name the Blob:\n                 1. look to an alternate request parameter called 'fileName'\n                 2. see if 'name' has been tacked onto the Blob manually\n                 3. if all else fails, use the request parameter\n                */\n                const filename = newParams[\"fileName\"] || newParams[key].name || key;\n                formData.append(key, newParams[key], filename);\n            }\n            else {\n                formData.append(key, newParams[key]);\n            }\n        });\n        return formData;\n    }\n    else {\n        return encodeQueryString(params);\n    }\n}\n//# sourceMappingURL=encode-form-data.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * This represents a generic error from an ArcGIS endpoint. There will be details about the error in the {@linkcode ArcGISRequestError.message},  {@linkcode ArcGISRequestError.originalMessage} properties on the error. You\n * can also access the original server response at  {@linkcode ArcGISRequestError.response} which may have additional details.\n *\n * ```js\n * request(someUrl, someOptions).catch(e => {\n *   if(e.name === \"ArcGISRequestError\") {\n *     console.log(\"Something went wrong with the request:\", e);\n *     console.log(\"Full server response\", e.response);\n *   }\n * })\n * ```\n */\nexport class ArcGISRequestError extends Error {\n    /**\n     * Create a new `ArcGISRequestError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options and parameters of the request\n     */\n    constructor(message, code, response, url, options) {\n        // 'Error' breaks prototype chain here\n        super(message);\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n        message = message || \"UNKNOWN_ERROR\";\n        code = code || \"UNKNOWN_ERROR_CODE\";\n        this.name = \"ArcGISRequestError\";\n        this.message =\n            code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n        this.originalMessage = message;\n        this.code = code;\n        this.response = response;\n        this.url = url;\n        this.options = options;\n    }\n}\n//# sourceMappingURL=ArcGISRequestError.js.map","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message) {\n    if (console && console.warn) {\n        console.warn.apply(console, [message]);\n    }\n}\n//# sourceMappingURL=warn.js.map","module.exports.getFetch = function getFetch() {\n  return Promise.resolve({\n    fetch: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Response: globalThis.Response,\n    Request: globalThis.request\n  });\n};\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { encodeFormData } from \"./utils/encode-form-data.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { requiresFormData } from \"./utils/process-params.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport { warn } from \"./utils/warn.js\";\nimport { getFetch } from \"@esri/arcgis-rest-fetch\";\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n *\n * setDefaultRequestOptions({\n *   authentication: ArcGISIdentityManager // all requests will use this session by default\n * })\n * ```\n *\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(options, hideWarnings) {\n    if (options.authentication && !hideWarnings) {\n        warn(\"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\");\n    }\n    globalThis.DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\nexport function getDefaultRequestOptions() {\n    return (globalThis.DEFAULT_ARCGIS_REQUEST_OPTIONS || {\n        httpMethod: \"POST\",\n        params: {\n            f: \"json\"\n        }\n    });\n}\n/**\n * This error is thrown when a request encounters an invalid token error. Requests that use {@linkcode ArcGISIdentityManager} or\n * {@linkcode ApplicationCredentialsManager} in the `authentication` option the authentication manager will automatically try to generate\n * a fresh token using either {@linkcode ArcGISIdentityManager.refreshCredentials} or\n * {@linkcode ApplicationCredentialsManager.refreshCredentials}. If the request with the new token fails you will receive an `ArcGISAuthError`\n * if refreshing the token fails you will receive an instance of {@linkcode ArcGISTokenRequestError}.\n *\n * ```js\n * request(someUrl, {\n *   authentication: identityManager,\n *   // some additional options...\n * }).catch(e => {\n *   if(e.name === \"ArcGISAuthError\") {\n *     console.log(\"Request with a new token failed you might want to have the user authorize again.\")\n *   }\n *\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     console.log(\"There was an error refreshing the token you might want to have the user authorize again.\")\n *   }\n * })\n * ```\n */\nexport class ArcGISAuthError extends ArcGISRequestError {\n    /**\n     * Create a new `ArcGISAuthError`  object.\n     *\n     * @param message - The error message from the API\n     * @param code - The error code from the API\n     * @param response - The original response from the API that caused the error\n     * @param url - The original url of the request\n     * @param options - The original options of the request\n     */\n    constructor(message = \"AUTHENTICATION_ERROR\", code = \"AUTHENTICATION_ERROR_CODE\", response, url, options) {\n        super(message, code, response, url, options);\n        this.name = \"ArcGISAuthError\";\n        this.message =\n            code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n        // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n        // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n        // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n        const actualProto = new.target.prototype;\n        Object.setPrototypeOf(this, actualProto);\n    }\n    retry(getSession, retryLimit = 1) {\n        let tries = 0;\n        const retryRequest = (resolve, reject) => {\n            tries = tries + 1;\n            getSession(this.url, this.options)\n                .then((session) => {\n                const newOptions = Object.assign(Object.assign({}, this.options), { authentication: session });\n                return internalRequest(this.url, newOptions);\n            })\n                .then((response) => {\n                resolve(response);\n            })\n                .catch((e) => {\n                if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n                    retryRequest(resolve, reject);\n                }\n                else if (e.name === this.name &&\n                    e.message === this.message &&\n                    tries >= retryLimit) {\n                    reject(this);\n                }\n                else {\n                    reject(e);\n                }\n            });\n        };\n        return new Promise((resolve, reject) => {\n            retryRequest(resolve, reject);\n        });\n    }\n}\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(response, url, params, options, originalAuthError) {\n    // this is an error message from billing.arcgis.com backend\n    if (response.code >= 400) {\n        const { message, code } = response;\n        throw new ArcGISRequestError(message, code, response, url, options);\n    }\n    // error from ArcGIS Online or an ArcGIS Portal or server instance.\n    if (response.error) {\n        const { message, code, messageCode } = response.error;\n        const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n        if (code === 498 || code === 499) {\n            if (originalAuthError) {\n                throw originalAuthError;\n            }\n            else {\n                throw new ArcGISAuthError(message, errorCode, response, url, options);\n            }\n        }\n        throw new ArcGISRequestError(message, errorCode, response, url, options);\n    }\n    // error from a status check\n    if (response.status === \"failed\" || response.status === \"failure\") {\n        let message;\n        let code = \"UNKNOWN_ERROR_CODE\";\n        try {\n            message = JSON.parse(response.statusMessage).message;\n            code = JSON.parse(response.statusMessage).code;\n        }\n        catch (e) {\n            message = response.statusMessage || response.message;\n        }\n        throw new ArcGISRequestError(message, code, response, url, options);\n    }\n    return response;\n}\n/**\n * This is the internal implementation of `request` without the automatic retry behavior to prevent\n * infinite loops when a server continues to return invalid token errors.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n * @internal\n */\nexport function internalRequest(url, requestOptions) {\n    const defaults = getDefaultRequestOptions();\n    const options = Object.assign(Object.assign(Object.assign({ httpMethod: \"POST\" }, defaults), requestOptions), {\n        params: Object.assign(Object.assign({}, defaults.params), requestOptions.params),\n        headers: Object.assign(Object.assign({}, defaults.headers), requestOptions.headers)\n    });\n    const { httpMethod, rawResponse } = options;\n    const params = Object.assign({ f: \"json\" }, options.params);\n    let originalAuthError = null;\n    const fetchOptions = {\n        method: httpMethod,\n        signal: options.signal,\n        /* ensures behavior mimics XMLHttpRequest.\n        needed to support sending IWA cookies */\n        credentials: options.credentials || \"same-origin\"\n    };\n    // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n    // and that request needs to send cookies cross domain\n    // so we need to set the credentials to \"include\"\n    if (options.headers &&\n        options.headers[\"X-Esri-Auth-Client-Id\"] &&\n        url.indexOf(\"/oauth2/platformSelf\") > -1) {\n        fetchOptions.credentials = \"include\";\n    }\n    let authentication;\n    // Check to see if this is a raw token as a string and create a IAuthenticationManager like object for it.\n    // Otherwise this just assumes that options.authentication is an IAuthenticationManager.\n    if (typeof options.authentication === \"string\") {\n        const rawToken = options.authentication;\n        authentication = {\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            getToken: () => {\n                return Promise.resolve(rawToken);\n            }\n        };\n        /* istanbul ignore else - we don't need to test NOT warning people */\n        if (!options.authentication.startsWith(\"AAPK\") && // doesn't look like an API Key\n            !options.suppressWarnings && // user doesn't want to suppress warnings for this request\n            !globalThis.ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING // we havn't shown the user this warning yet\n        ) {\n            warn(`Using an oAuth 2.0 access token directly in the token option is discouraged. Consider using ArcGISIdentityManager or Application session. See https://esriurl.com/arcgis-rest-js-direct-token-warning for more information.`);\n            globalThis.ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING = true;\n        }\n    }\n    else {\n        authentication = options.authentication;\n    }\n    // for errors in GET requests we want the URL passed to the error to be the URL before\n    // query params are applied.\n    const originalUrl = url;\n    return (authentication\n        ? authentication.getToken(url).catch((err) => {\n            /**\n             * append original request url and requestOptions\n             * to the error thrown by getToken()\n             * to assist with retrying\n             */\n            err.url = url;\n            err.options = options;\n            /**\n             * if an attempt is made to talk to an unfederated server\n             * first try the request anonymously. if a 'token required'\n             * error is thrown, throw the UNFEDERATED error then.\n             */\n            originalAuthError = err;\n            return Promise.resolve(\"\");\n        })\n        : Promise.resolve(\"\"))\n        .then((token) => {\n        if (token.length) {\n            params.token = token;\n        }\n        if (authentication && authentication.getDomainCredentials) {\n            fetchOptions.credentials = authentication.getDomainCredentials(url);\n        }\n        // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n        const requestHeaders = {};\n        if (fetchOptions.method === \"GET\") {\n            // Prevents token from being passed in query params when hideToken option is used.\n            /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n            if (params.token &&\n                options.hideToken &&\n                // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n                typeof window === \"undefined\") {\n                requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n                delete params.token;\n            }\n            // encode the parameters into the query string\n            const queryParams = encodeQueryString(params);\n            // dont append a '?' unless parameters are actually present\n            const urlWithQueryString = queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n            if (\n            // This would exceed the maximum length for URLs specified by the consumer and requires POST\n            (options.maxUrlLength &&\n                urlWithQueryString.length > options.maxUrlLength) ||\n                // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n                (params.token && options.hideToken)) {\n                // the consumer specified a maximum length for URLs\n                // and this would exceed it, so use post instead\n                fetchOptions.method = \"POST\";\n                // If the token was already added as a Auth header, add the token back to body with other params instead of header\n                if (token.length && options.hideToken) {\n                    params.token = token;\n                    // Remove existing header that was added before url query length was checked\n                    delete requestHeaders[\"X-Esri-Authorization\"];\n                }\n            }\n            else {\n                // just use GET\n                url = urlWithQueryString;\n            }\n        }\n        /* updateResources currently requires FormData even when the input parameters dont warrant it.\n    https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n        see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n        const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n        if (fetchOptions.method === \"POST\") {\n            fetchOptions.body = encodeFormData(params, forceFormData);\n        }\n        // Mixin headers from request options\n        fetchOptions.headers = Object.assign(Object.assign({}, requestHeaders), options.headers);\n        // This should have the same conditional for Node JS as ArcGISIdentityManager.refreshWithUsernameAndPassword()\n        // to ensure that generated tokens have the same referer when used in Node with a username and password.\n        /* istanbul ignore next - karma reports coverage on browser tests only */\n        if ((typeof window === \"undefined\" ||\n            (window && typeof window.document === \"undefined\")) &&\n            !fetchOptions.headers.referer) {\n            fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n        }\n        /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n        if (!requiresFormData(params) && !forceFormData) {\n            fetchOptions.headers[\"Content-Type\"] =\n                \"application/x-www-form-urlencoded\";\n        }\n        /**\n         * Check for a global fetch first and use it if available. This allows us to use the default\n         * configuration of fetch-mock in tests.\n         */\n        /* istanbul ignore next coverage is based on browser code and we don't test for the absence of global fetch so we can skip the else here. */\n        return globalThis.fetch\n            ? globalThis.fetch(url, fetchOptions)\n            : getFetch().then(({ fetch }) => {\n                return fetch(url, fetchOptions);\n            });\n    })\n        .then((response) => {\n        // the request got back an error status code (4xx, 5xx)\n        if (!response.ok) {\n            // we need to determine if the server returned a JSON body with more details.\n            // this is the format used by newer services such as the Places and Style service.\n            return response\n                .json()\n                .then((jsonError) => {\n                // The body can be parsed as JSON\n                const { status, statusText } = response;\n                const { message, details } = jsonError.error;\n                const formattedMessage = `${message}. ${details ? details.join(\" \") : \"\"}`.trim();\n                throw new ArcGISRequestError(formattedMessage, `HTTP ${status} ${statusText}`, jsonError, url, options);\n            })\n                .catch((e) => {\n                // if we already were about to format this as an ArcGISRequestError throw that error\n                if (e.name === \"ArcGISRequestError\") {\n                    throw e;\n                }\n                // server responded w/ an actual error (404, 500, etc) but we could not parse it as JSON\n                const { status, statusText } = response;\n                throw new ArcGISRequestError(statusText, `HTTP ${status}`, response, url, options);\n            });\n        }\n        if (rawResponse) {\n            return response;\n        }\n        switch (params.f) {\n            case \"json\":\n                return response.json();\n            case \"geojson\":\n                return response.json();\n            case \"html\":\n                return response.text();\n            case \"text\":\n                return response.text();\n            /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n            default:\n                return response.blob();\n        }\n    })\n        .then((data) => {\n        // Check for an error in the JSON body of a successful response.\n        // Most ArcGIS Server services will return a successful status code but include an error in the response body.\n        if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n            const response = checkForErrors(data, originalUrl, params, options, originalAuthError);\n            if (originalAuthError) {\n                /* If the request was made to an unfederated service that\n                didn't require authentication, add the base url and a dummy token\n                to the list of trusted servers to avoid another federation check\n                in the event of a repeat request */\n                const truncatedUrl = url\n                    .toLowerCase()\n                    .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n                options.authentication.federatedServers[truncatedUrl] = {\n                    token: [],\n                    // default to 24 hours\n                    expires: new Date(Date.now() + 86400 * 1000)\n                };\n                originalAuthError = null;\n            }\n            return response;\n        }\n        else {\n            return data;\n        }\n    });\n}\n/**\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n *\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n *\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(url, requestOptions = { params: { f: \"json\" } }) {\n    return internalRequest(url, requestOptions).catch((e) => {\n        if (e instanceof ArcGISAuthError &&\n            requestOptions.authentication &&\n            typeof requestOptions.authentication !== \"string\" &&\n            requestOptions.authentication.canRefresh &&\n            requestOptions.authentication.refreshCredentials) {\n            return e.retry(() => {\n                return requestOptions.authentication.refreshCredentials();\n            }, 1);\n        }\n        else {\n            return Promise.reject(e);\n        }\n    });\n}\n//# sourceMappingURL=request.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url) {\n    // Guard so we don't try to trim something that's not a string\n    if (typeof url !== \"string\") {\n        return url;\n    }\n    // trim leading and trailing spaces, but not spaces inside the url\n    url = url.trim();\n    // remove the trailing slash to the url if one was included\n    if (url[url.length - 1] === \"/\") {\n        url = url.slice(0, -1);\n    }\n    return url;\n}\n//# sourceMappingURL=clean-url.js.map","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { cleanUrl } from \"@esri/arcgis-rest-request\";\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither `portal` nor `authentication` is present,\n * `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nexport function getPortalUrl(requestOptions = {}) {\n    // use portal in options if specified\n    if (requestOptions.portal) {\n        return cleanUrl(requestOptions.portal);\n    }\n    // if auth was passed, use that portal\n    if (requestOptions.authentication &&\n        typeof requestOptions.authentication !== \"string\") {\n        // the portal url is already scrubbed in the auth package\n        return requestOptions.authentication.portal;\n    }\n    // default to arcgis.com\n    return \"https://www.arcgis.com/sharing/rest\";\n}\n//# sourceMappingURL=get-portal-url.js.map","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { scrubControlChars } from \"../util/scrub-control-chars.js\";\nimport { determineOwner } from \"./helpers.js\";\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-portal\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getItem(id, requestOptions) {\n    const url = getItemBaseUrl(id, requestOptions);\n    // default to a GET request\n    const options = Object.assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * Get the fully qualified base URL to the REST end point for an item.\n * @param id Item Id\n * @param portalUrlOrRequestOptions a portal URL or request options\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{id}`\n */\nexport const getItemBaseUrl = (id, portalUrlOrRequestOptions) => {\n    const portalUrl = typeof portalUrlOrRequestOptions === \"string\"\n        ? portalUrlOrRequestOptions\n        : getPortalUrl(portalUrlOrRequestOptions);\n    return `${portalUrl}/content/items/${id}`;\n};\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nexport function getItemData(id, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}/data`;\n    // default to a GET request\n    const options = Object.assign({ httpMethod: \"GET\", params: {} }, requestOptions);\n    if (options.file) {\n        options.params.f = null;\n    }\n    return request(url, options).catch((err) => {\n        /* if the item doesn't include data, the response will be empty\n           and the internal call to response.json() will fail */\n        const emptyResponseErr = RegExp(/The string did not match the expected pattern|(Unexpected end of (JSON input|data at line 1 column 1))/i);\n        /* istanbul ignore else */\n        if (emptyResponseErr.test(err.message)) {\n            return;\n        }\n        else\n            throw err;\n    });\n}\n/**\n * ```\n * import { getRelatedItems } from \"@esri/arcgis-rest-portal\";\n * //\n * getRelatedItems({\n *   id: \"ae7\",\n *   relationshipType: \"Service2Layer\" // or several [\"Service2Layer\", \"Map2Area\"]\n * })\n *   .then(response)\n * ```\n * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getRelatedItems(requestOptions) {\n    const url = `${getItemBaseUrl(requestOptions.id, requestOptions)}/relatedItems`;\n    const options = Object.assign({ httpMethod: \"GET\", params: {\n            direction: requestOptions.direction\n        } }, requestOptions);\n    if (typeof requestOptions.relationshipType === \"string\") {\n        options.params.relationshipType = requestOptions.relationshipType;\n    }\n    else {\n        options.params.relationshipTypes = requestOptions.relationshipType;\n    }\n    delete options.direction;\n    delete options.relationshipType;\n    return request(url, options);\n}\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getItemResources(id, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}/resources`;\n    // Mix in num:1000 with any user supplied params\n    // Key thing - we don't want to mutate the passed in requestOptions\n    // as that may be used in other (subsequent) calls in the course\n    // of a long promise chains\n    const options = Object.assign({}, requestOptions);\n    options.params = Object.assign({ num: 1000 }, options.params);\n    return request(url, options);\n}\n/**\n * Fetches an item resource and optionally parses it to the correct format.\n *\n * Provides JSON parse error protection by sanitizing out any unescaped control characters before parsing that would otherwise cause an error to be thrown.\n *\n * ```js\n * import { getItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Parses contents as blob by default\n * getItemResource(\"3ef\", { fileName: \"resource.jpg\", ...})\n *  .then(resourceContents => {});\n *\n * // Can override parse method\n * getItemResource(\"3ef\", { fileName: \"resource.json\", readAs: 'json', ...})\n *  .then(resourceContents => {});\n *\n * // Get the response object instead\n * getItemResource(\"3ef\",{ rawResponse: true, fileName: \"resource.json\" })\n *  .then(response => {})\n * ```\n *\n * @param {string} itemId\n * @param {IGetItemResourceOptions} requestOptions\n */\nexport function getItemResource(itemId, requestOptions) {\n    const readAs = requestOptions.readAs || \"blob\";\n    return getItemFile(itemId, `/resources/${requestOptions.fileName}`, readAs, requestOptions);\n}\n/**\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-portal\";\n *\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nexport function getItemGroups(id, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}/groups`;\n    return request(url, requestOptions);\n}\n/**\n * Inquire about status when publishing an item, adding an item in async mode, or adding with a multipart upload. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/status.htm) for more information.\n *\n * ```js\n * import { getItemStatus } from \"@esri/arcgis-rest-portal\";\n *\n * getItemStatus({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get status for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item status.\n */\nexport function getItemStatus(requestOptions) {\n    return determineOwner(requestOptions).then((owner) => {\n        const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${requestOptions.id}/status`;\n        const options = appendCustomParams(requestOptions, [\"jobId\", \"jobType\"], { params: Object.assign({}, requestOptions.params) });\n        return request(url, options);\n    });\n}\n/**\n * Lists the part numbers of the file parts that have already been uploaded in a multipart file upload. This method can be used to verify the parts that have been received as well as those parts that were not received by the server. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/parts.htm) for more information.\n *\n * ```js\n * import { getItemParts } from \"@esri/arcgis-rest-portal\";\n *\n * getItemParts({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get part list.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item part list.\n */\nexport function getItemParts(requestOptions) {\n    return determineOwner(requestOptions).then((owner) => {\n        const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${requestOptions.id}/parts`;\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```\n * import { getItemInfo } from \"@esri/arcgis-rest-portal\";\n * // get the \"Info Card\" for the item\n * getItemInfo(\"ae7\")\n *   .then(itemInfoXml) // XML document as a string\n * // or get the contents of a specific file\n * getItemInfo(\"ae7\", { fileName: \"form.json\", readAs: \"json\", authentication })\n *   .then(formJson) // JSON document as JSON\n * ```\n * Get an info file for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-info-file.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request, including the file name which defaults to `iteminfo.xml`.\n * If the file is not a text file (XML, HTML, etc) you will need to specify the `readAs` parameter\n * @returns A Promise that will resolve with the contents of the info file for the item.\n */\nexport function getItemInfo(id, requestOptions) {\n    const { fileName = \"iteminfo.xml\", readAs = \"text\" } = requestOptions || {};\n    const options = Object.assign({ httpMethod: \"GET\" }, requestOptions);\n    return getItemFile(id, `/info/${fileName}`, readAs, options);\n}\n/**\n * ```\n * import { getItemMetadata } from \"@esri/arcgis-rest-portal\";\n * // get the metadata for the item\n * getItemMetadata(\"ae7\")\n *   .then(itemMetadataXml) // XML document as a string\n * // or with additional request options\n * getItemMetadata(\"ae7\", { authentication })\n *   .then(itemMetadataXml) // XML document as a string\n * ```\n * Get the standard formal metadata XML file for an item (`/info/metadata/metadata.xml`)\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the contents of the metadata file for the item as a string.\n */\nexport function getItemMetadata(id, requestOptions) {\n    const options = Object.assign(Object.assign({}, requestOptions), { fileName: \"metadata/metadata.xml\" });\n    return getItemInfo(id, options);\n}\n// overrides request()'s default behavior for reading the response\n// which is based on `params.f` and defaults to JSON\n// Also adds JSON parse error protection by sanitizing out any unescaped control characters before parsing\nfunction getItemFile(id, \n// NOTE: fileName should include any folder/subfolders\nfileName, readMethod, requestOptions) {\n    const url = `${getItemBaseUrl(id, requestOptions)}${fileName}`;\n    // preserve escape hatch to let the consumer read the response\n    // and ensure the f param is not appended to the query string\n    const options = Object.assign({ params: {} }, requestOptions);\n    const justReturnResponse = options.rawResponse;\n    options.rawResponse = true;\n    options.params.f = null;\n    return request(url, options).then((response) => {\n        if (justReturnResponse) {\n            return response;\n        }\n        return readMethod !== \"json\"\n            ? response[readMethod]()\n            : response\n                .text()\n                .then((text) => JSON.parse(scrubControlChars(text)));\n    });\n}\n//# sourceMappingURL=get.js.map",":host {\n  display: block;\n}\n","import { WebChart } from '@arcgis/charts-spec';\nimport { getItemData } from '@esri/arcgis-rest-portal';\nimport { Component, Host, Prop, Watch, h } from '@stencil/core';\n\n/**\n * Displays an array of charts \n * Initially given a webmap id\n */\n@Component({\n  tag: 'cedar-dashboard',\n  styleUrl: 'cedar-dashboard.css',\n  shadow: true,\n})\nexport class CedarDashboard {\n\n  @Prop() webmapId:string = null;\n\n  @Prop({mutable:true, reflect: true}) charts: Array<WebChart> = [];\n\n  componentWillLoad() {\n    this.loadWebmap(this.webmapId)\n  }\n\n  @Watch('webmapId')\n  async loadWebmap(newWebmapId:string) {\n    const webmapData = await getItemData(newWebmapId);\n\n    this.charts = webmapData.operationalLayers\n                    .map((layer) => {\n                      return layer.charts || []\n                    })\n                    .flat();\n\n    console.debug(\"cedar-dashboard: loadWebmap\", this.charts)\n  }\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n        {this.charts.map((chart) => {\n\n          return (\n            <cedar-chart\n              config={chart}\n            ></cedar-chart>\n          )\n        })}\n      </Host>\n    );\n  }\n\n}\n"],"mappings":"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"}