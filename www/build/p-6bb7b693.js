const t=512;var s,i;!function(t){t[t.Unknown=0]="Unknown",t[t.Point=1]="Point",t[t.LineString=2]="LineString",t[t.Polygon=3]="Polygon"}(s||(s={}));class h{constructor(t,s){this.x=t,this.y=s}clone(){return new h(this.x,this.y)}equals(t,s){return t===this.x&&s===this.y}isEqual(t){return t.x===this.x&&t.y===this.y}setCoords(t,s){this.x=t,this.y=s}normalize(){const t=this.x,s=this.y,i=Math.sqrt(t*t+s*s);this.x/=i,this.y/=i}rightPerpendicular(){const t=this.x;this.x=this.y,this.y=-t}move(t,s){this.x+=t,this.y+=s}assign(t){this.x=t.x,this.y=t.y}assignAdd(t,s){this.x=t.x+s.x,this.y=t.y+s.y}assignSub(t,s){this.x=t.x-s.x,this.y=t.y-s.y}rotate(t,s){const i=this.x,h=this.y;this.x=i*t-h*s,this.y=i*s+h*t}scale(t){this.x*=t,this.y*=t}length(){const t=this.x,s=this.y;return Math.sqrt(t*t+s*s)}static distance(t,s){const i=s.x-t.x,h=s.y-t.y;return Math.sqrt(i*i+h*h)}static add(t,s){return new h(t.x+s.x,t.y+s.y)}static sub(t,s){return new h(t.x-s.x,t.y-s.y)}}class e{constructor(t,s,i){this.ratio=t,this.x=s,this.y=i}}class n{constructor(s,i,h,e=8,n=8){this._lines=[],this._starts=[],this.validateTessellation=!0,this._pixelRatio=e,this._pixelMargin=n,this._tileSize=t*e,this._dz=s,this._yPos=i,this._xPos=h}setPixelMargin(t){t!==this._pixelMargin&&(this._pixelMargin=t,this.setExtent(this._extent))}setExtent(t){this._extent=t,this._finalRatio=this._tileSize/t*(1<<this._dz);let s=this._pixelRatio*this._pixelMargin;s/=this._finalRatio;const i=t>>this._dz;s>i&&(s=i),this._margin=s,this._xmin=i*this._xPos-s,this._ymin=i*this._yPos-s,this._xmax=this._xmin+i+2*s,this._ymax=this._ymin+i+2*s}reset(t){this._type=t,this._lines=[],this._starts=[],this._line=null,this._start=0}moveTo(t,s){this._pushLine(),this._prevIsIn=this._isIn(t,s),this._moveTo(t,s,this._prevIsIn),this._prevPt=new h(t,s),this._firstPt=new h(t,s),this._dist=0}lineTo(t,s){const i=this._isIn(t,s),n=new h(t,s),r=h.distance(this._prevPt,n);let o,c,l,a,u,f,w,M;if(i)this._prevIsIn?this._lineTo(t,s,!0):(o=this._prevPt,c=n,l=this._intersect(c,o),this._start=this._dist+r*(1-this._r),this._lineTo(l.x,l.y,!0),this._lineTo(c.x,c.y,!0));else if(this._prevIsIn)c=this._prevPt,o=n,l=this._intersect(c,o),this._lineTo(l.x,l.y,!0),this._lineTo(o.x,o.y,!1);else{const t=this._prevPt,s=n;if(t.x<=this._xmin&&s.x<=this._xmin||t.x>=this._xmax&&s.x>=this._xmax||t.y<=this._ymin&&s.y<=this._ymin||t.y>=this._ymax&&s.y>=this._ymax)this._lineTo(s.x,s.y,!1);else{const i=[];if((t.x<this._xmin&&s.x>this._xmin||t.x>this._xmin&&s.x<this._xmin)&&(a=(this._xmin-t.x)/(s.x-t.x),M=t.y+a*(s.y-t.y),M<=this._ymin?f=!1:M>=this._ymax?f=!0:i.push(new e(a,this._xmin,M))),(t.x<this._xmax&&s.x>this._xmax||t.x>this._xmax&&s.x<this._xmax)&&(a=(this._xmax-t.x)/(s.x-t.x),M=t.y+a*(s.y-t.y),M<=this._ymin?f=!1:M>=this._ymax?f=!0:i.push(new e(a,this._xmax,M))),(t.y<this._ymin&&s.y>this._ymin||t.y>this._ymin&&s.y<this._ymin)&&(a=(this._ymin-t.y)/(s.y-t.y),w=t.x+a*(s.x-t.x),w<=this._xmin?u=!1:w>=this._xmax?u=!0:i.push(new e(a,w,this._ymin))),(t.y<this._ymax&&s.y>this._ymax||t.y>this._ymax&&s.y<this._ymax)&&(a=(this._ymax-t.y)/(s.y-t.y),w=t.x+a*(s.x-t.x),w<=this._xmin?u=!1:w>=this._xmax?u=!0:i.push(new e(a,w,this._ymax))),0===i.length)u?f?this._lineTo(this._xmax,this._ymax,!0):this._lineTo(this._xmax,this._ymin,!0):f?this._lineTo(this._xmin,this._ymax,!0):this._lineTo(this._xmin,this._ymin,!0);else if(i.length>1&&i[0].ratio>i[1].ratio)this._start=this._dist+r*i[1].ratio,this._lineTo(i[1].x,i[1].y,!0),this._lineTo(i[0].x,i[0].y,!0);else{this._start=this._dist+r*i[0].ratio;for(let t=0;t<i.length;t++)this._lineTo(i[t].x,i[t].y,!0)}this._lineTo(s.x,s.y,!1)}}this._dist+=r,this._prevIsIn=i,this._prevPt=n}close(){if(this._line.length>2){const t=this._firstPt,s=this._prevPt;t.x===s.x&&t.y===s.y||this.lineTo(t.x,t.y);const i=this._line;let h=i.length;for(;h>=4&&(i[0].x===i[1].x&&i[0].x===i[h-2].x||i[0].y===i[1].y&&i[0].y===i[h-2].y);)i.pop(),i[0].x=i[h-2].x,i[0].y=i[h-2].y,--h}}result(t=!0){return this._pushLine(),0===this._lines.length?null:(this._type===s.Polygon&&t&&o.simplify(this._tileSize,this._margin*this._finalRatio,this._lines),this._lines)}resultWithStarts(){if(this._type!==s.LineString)throw new Error("Only valid for lines");this._pushLine();const t=this._lines,i=t.length;if(0===i)return null;const h=[];for(let s=0;s<i;s++)h.push({line:t[s],start:this._starts[s]||0});return h}_isIn(t,s){return t>=this._xmin&&t<=this._xmax&&s>=this._ymin&&s<=this._ymax}_intersect(t,s){let i,e,n;if(s.x>=this._xmin&&s.x<=this._xmax)e=s.y<=this._ymin?this._ymin:this._ymax,n=(e-t.y)/(s.y-t.y),i=t.x+n*(s.x-t.x);else if(s.y>=this._ymin&&s.y<=this._ymax)i=s.x<=this._xmin?this._xmin:this._xmax,n=(i-t.x)/(s.x-t.x),e=t.y+n*(s.y-t.y);else{e=s.y<=this._ymin?this._ymin:this._ymax,i=s.x<=this._xmin?this._xmin:this._xmax;const h=(i-t.x)/(s.x-t.x),r=(e-t.y)/(s.y-t.y);h<r?(n=h,e=t.y+h*(s.y-t.y)):(n=r,i=t.x+r*(s.x-t.x))}return this._r=n,new h(i,e)}_pushLine(){this._line&&(this._type===s.Point?this._line.length>0&&(this._lines.push(this._line),this._starts.push(this._start)):this._type===s.LineString?this._line.length>1&&(this._lines.push(this._line),this._starts.push(this._start)):this._type===s.Polygon&&this._line.length>3&&(this._lines.push(this._line),this._starts.push(this._start))),this._line=[],this._start=0}_moveTo(t,i,e){this._type!==s.Polygon?e&&(t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),i=Math.round((i-(this._ymin+this._margin))*this._finalRatio),this._line.push(new h(t,i))):(e||(t<this._xmin&&(t=this._xmin),t>this._xmax&&(t=this._xmax),i<this._ymin&&(i=this._ymin),i>this._ymax&&(i=this._ymax)),t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),i=Math.round((i-(this._ymin+this._margin))*this._finalRatio),this._line.push(new h(t,i)),this._isH=!1,this._isV=!1)}_lineTo(t,i,e){let n,r;if(this._type!==s.Polygon)if(e){if(t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),i=Math.round((i-(this._ymin+this._margin))*this._finalRatio),this._line.length>0&&(n=this._line[this._line.length-1],n.equals(t,i)))return;this._line.push(new h(t,i))}else this._line&&this._line.length>0&&this._pushLine();else if(e||(t<this._xmin&&(t=this._xmin),t>this._xmax&&(t=this._xmax),i<this._ymin&&(i=this._ymin),i>this._ymax&&(i=this._ymax)),t=Math.round((t-(this._xmin+this._margin))*this._finalRatio),i=Math.round((i-(this._ymin+this._margin))*this._finalRatio),this._line&&this._line.length>0){n=this._line[this._line.length-1];const s=n.x===t,e=n.y===i;if(s&&e)return;this._isH&&s||this._isV&&e?(n.x=t,n.y=i,r=this._line[this._line.length-2],r.x===t&&r.y===i?(this._line.pop(),this._line.length<=1?(this._isH=!1,this._isV=!1):(r=this._line[this._line.length-2],this._isH=r.x===t,this._isV=r.y===i)):(this._isH=r.x===t,this._isV=r.y===i)):(this._line.push(new h(t,i)),this._isH=s,this._isV=e)}else this._line.push(new h(t,i))}}class r{setExtent(t){this._ratio=4096===t?1:4096/t}get validateTessellation(){return this._ratio<1}reset(t){this._lines=[],this._line=null}moveTo(t,s){this._line&&this._lines.push(this._line),this._line=[];const i=this._ratio;this._line.push(new h(t*i,s*i))}lineTo(t,s){const i=this._ratio;this._line.push(new h(t*i,s*i))}close(){const t=this._line;t&&!t[0].isEqual(t[t.length-1])&&t.push(t[0])}result(){return this._line&&this._lines.push(this._line),0===this._lines.length?null:this._lines}}!function(t){t[t.sideLeft=0]="sideLeft",t[t.sideRight=1]="sideRight",t[t.sideTop=2]="sideTop",t[t.sideBottom=3]="sideBottom"}(i||(i={}));class o{static simplify(t,s,h){if(!h)return;const e=-s,n=t+s,r=-s,c=t+s,l=[],a=[],u=h.length;for(let t=0;t<u;++t){const s=h[t];if(!s||s.length<2)continue;let o,u=s[0];const f=s.length;for(let h=1;h<f;++h)o=s[h],u.x===o.x&&(u.x<=e&&(u.y>o.y?(l.push(t),l.push(h),l.push(i.sideLeft),l.push(-1)):(a.push(t),a.push(h),a.push(i.sideLeft),a.push(-1))),u.x>=n&&(u.y<o.y?(l.push(t),l.push(h),l.push(i.sideRight),l.push(-1)):(a.push(t),a.push(h),a.push(i.sideRight),a.push(-1)))),u.y===o.y&&(u.y<=r&&(u.x<o.x?(l.push(t),l.push(h),l.push(i.sideTop),l.push(-1)):(a.push(t),a.push(h),a.push(i.sideTop),a.push(-1))),u.y>=c&&(u.x>o.x?(l.push(t),l.push(h),l.push(i.sideBottom),l.push(-1)):(a.push(t),a.push(h),a.push(i.sideBottom),a.push(-1)))),u=o}if(0===l.length||0===a.length)return;o.fillParent(h,a,l),o.fillParent(h,l,a);const f=[];o.calcDeltas(f,a,l),o.calcDeltas(f,l,a),o.addDeltas(f,h)}static fillParent(t,s,h){const e=h.length,n=s.length;for(let r=0;r<n;r+=4){const n=s[r],o=s[r+1],l=s[r+2],a=t[n][o-1],u=t[n][o];let f=8092,w=-1;for(let s=0;s<e;s+=4){if(h[s+2]!==l)continue;const e=h[s],n=h[s+1],r=t[e][n-1],o=t[e][n];switch(l){case i.sideLeft:case i.sideRight:if(c(a.y,r.y,o.y)&&c(u.y,r.y,o.y)){const t=Math.abs(o.y-r.y);t<f&&(f=t,w=s)}break;case i.sideTop:case i.sideBottom:if(c(a.x,r.x,o.x)&&c(u.x,r.x,o.x)){const t=Math.abs(o.x-r.x);t<f&&(f=t,w=s)}}}s[r+3]=w}}static calcDeltas(t,s,i){const h=s.length;for(let e=0;e<h;e+=4){const h=[],n=o.calcDelta(e,s,i,h);t.push(s[e]),t.push(s[e+1]),t.push(s[e+2]),t.push(n)}}static calcDelta(t,s,i,h){const e=s[t+3];if(-1===e)return 0;const n=h.length;return n>1&&h[n-2]===e?0:(h.push(e),o.calcDelta(e,i,s,h)+1)}static addDeltas(t,s){const h=t.length;let e=0;for(let s=0;s<h;s+=4){const i=t[s+3];i>e&&(e=i)}for(let n=0;n<h;n+=4){const h=s[t[n]],r=t[n+1],o=e-t[n+3];switch(t[n+2]){case i.sideLeft:h[r-1].x-=o,h[r].x-=o,1===r&&(h[h.length-1].x-=o),r===h.length-1&&(h[0].x-=o);break;case i.sideRight:h[r-1].x+=o,h[r].x+=o,1===r&&(h[h.length-1].x+=o),r===h.length-1&&(h[0].x+=o);break;case i.sideTop:h[r-1].y-=o,h[r].y-=o,1===r&&(h[h.length-1].y-=o),r===h.length-1&&(h[0].y-=o);break;case i.sideBottom:h[r-1].y+=o,h[r].y+=o,1===r&&(h[h.length-1].y+=o),r===h.length-1&&(h[0].y+=o)}}}}const c=(t,s,i)=>t>=s&&t<=i||t>=i&&t<=s;const l=Number.POSITIVE_INFINITY,a=Math.PI,u=2*a,f=128/a,w=a/180,M=1/Math.LN2;function d(t,s){return(t%=s)>=0?t:t+s}function g(t){return d(t*f,256)}function b(t){return Math.log(t)*M}function m(t,s,i){return t*(1-i)+s*i}export{b as N,r as _,s as a,m as b,n as c,w as e,d as f,h,g as i,l as n,u as r,a as t};
//# sourceMappingURL=p-6bb7b693.js.map