import{hG as e,hH as r,d3 as s,d4 as t,d2 as i,d5 as a,aO as n,hJ as l,hR as o,i3 as p,bS as c,cK as d,aU as u,bP as h,e as f,cB as m,s as y,aH as v,K as b,dk as g,bA as _,l as j,y as S,a8 as w,W as T,a4 as W,d7 as O,n as R}from"./p-b54724b6.js";import{t as B}from"./p-a779e49b.js";import{p as k}from"./p-a01007cf.js";import{E as A,f as I,Y as L}from"./p-f9e5f1f2.js";import{o as M}from"./p-f3bb10eb.js";import"./p-8bc47c76.js";import"./p-58fca073.js";import"./p-a0d095b0.js";import"./p-52d8e383.js";import"./p-2a2efb66.js";import"./p-ac0dfd7c.js";import"./p-5abe9c67.js";import"./p-a5e3ec2a.js";import"./p-80be55a5.js";import"./p-d77465bf.js";import"./p-b88ddb1e.js";import"./p-8dc3148c.js";import"./p-ca5fb53c.js";import"./p-e6a64715.js";import"./p-dc29c329.js";import"./p-0856fe30.js";import"./p-d7fc78fa.js";import"./p-a3f0a5f3.js";import"./p-053dc63d.js";var D;const G=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let P=D=class extends(e(r(A(k(I(s(t(i(a(n(l(o(p(c)))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(d).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo&&r.tileInfo.spatialReference)&&u.fromJSON(e)}writeSublayers(e,r,s,t){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),a=[],n={writeSublayerStructure:!1,...t};i.forEach((e=>{const r=e.write({},n);a.push(r)}));a.some((e=>Object.keys(e).length>1))&&(r.layers=a)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>h(e).path)):null}fetchTile(e,r,s,t={}){const{signal:i}=t,a=this.getTileUrl(e,r,s),n={responseType:"image",signal:i,query:{...this.refreshParameters}};return f(a,n).then((e=>e.data))}async fetchImageBitmapTile(e,r,s,t={}){const{signal:i}=t;if(this.fetchTile!==D.prototype.fetchTile){const a=await this.fetchTile(e,r,s,t);return M(a,e,r,s,i)}const a=this.getTileUrl(e,r,s),n={responseType:"blob",signal:i,query:{...this.refreshParameters}},{data:l}=await f(a,n);return M(l,e,r,s,i)}getTileUrl(e,r,s){const t=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,i=m({...this.parsedUrl?.query,blankTile:!t&&null,...this.customParameters,token:this.apiKey}),a=this.tileServers;return`${a&&a.length?a[r%a.length]:this.parsedUrl?.path}/tile/${e}/${r}/${s}${i?"?"+i:""}`}loadAll(){return B(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((r,s)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new y("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new y("tile-layer:undefined-url","layer's url is not defined");const t=v(this.parsedUrl.path);if(null!=t&&"ImageServer"===t.serverType)throw new y("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,s)})).then((r=>{let s=this.url;if(r.ssl&&(s=this.url=s.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!b(s))return this._fetchServerVersion(s,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!g(e))return Promise.reject();const s=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return f(s,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new y("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(null==e)return null;let r;e=e.toLowerCase();for(let s=0,t=G.length;s<t;s++)if(r=G[s],r.toLowerCase().includes(e))return _("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(null==e)return[];const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),s=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||s?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[$]}};j([S({readOnly:!0})],P.prototype,"attributionDataUrl",null),j([S({type:["show","hide","hide-children"]})],P.prototype,"listMode",void 0),j([S({json:{read:!0,write:!0}})],P.prototype,"blendMode",void 0),j([S({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],P.prototype,"isReference",void 0),j([S({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],P.prototype,"operationalLayerType",void 0),j([S({type:Boolean})],P.prototype,"resampling",void 0),j([S()],P.prototype,"sourceJSON",void 0),j([S({type:u})],P.prototype,"spatialReference",void 0),j([w("spatialReference",["spatialReference","tileInfo"])],P.prototype,"readSpatialReference",null),j([S({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],P.prototype,"path",void 0),j([S({readOnly:!0})],P.prototype,"sublayers",void 0),j([T("sublayers",{layers:{type:[L]}})],P.prototype,"writeSublayers",null),j([S({json:{read:!1,write:!1}})],P.prototype,"popupEnabled",void 0),j([S()],P.prototype,"tileServers",null),j([W("tileServers")],P.prototype,"castTileServers",null),j([S({readOnly:!0,json:{read:!1}})],P.prototype,"type",void 0),j([S(O)],P.prototype,"url",void 0),P=D=j([R("esri.layers.TileLayer")],P);const $=Symbol("default-fetch-tile");P.prototype.fetchTile[$]=!0;const C=P;export default C;
//# sourceMappingURL=p-86c4feb2.js.map