import{b as e,bC as a,bn as t,s as r,b$ as n,cX as o,cY as s,bl as i,r as l,cZ as u,bQ as c,aH as y,c_ as f,c$ as d,d0 as p}from"./p-b54724b6.js";import{i as m}from"./p-bafc5e09.js";import{r as w}from"./p-4d809a12.js";import{o as b}from"./p-a10686d4.js";import"./p-bf0e41eb.js";const v=e.getLogger("esri.layers.FeatureLayer"),h="Feature Service";function S(e,a){return`Layer (title: ${e.title}, id: ${e.id}) of type '${e.declaredClass}' ${a}`}function $(e,a){if(a.type!==h)throw new r("feature-layer:portal-item-wrong-type",S(e,`should have portal item of type "${h}"`))}async function P(e){if(await e.load(),n(e))throw new r("feature-layer:save",S(e,"using an in-memory source cannot be saved to a portal item"))}function I(e,a){let t=(e.messages??[]).filter((({type:e})=>"error"===e)).map((({name:e,message:a,details:t})=>new r(e,a,t)));if(a?.ignoreUnsupported&&(t=t.filter((({name:e})=>"layer:unsupported"!==e&&"symbol:unsupported"!==e&&"symbol-layer:unsupported"!==e&&"property:unsupported"!==e&&"url:unsupported"!==e))),t.length>0)throw new r("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:t})}async function J(e,a,t){"beforeSave"in e&&"function"==typeof e.beforeSave&&await e.beforeSave();const r=e.write({},a);return I(a,t),r}function N(e){const{layer:a,layerJSON:t}=e;return a.isTable?{layers:[],tables:[t]}:{layers:[t],tables:[]}}function O(e){o(e,p.JSAPI),e.typeKeywords&&(e.typeKeywords=e.typeKeywords.filter(((e,a,t)=>t.indexOf(e)===a)))}function j(e){const a=e.portalItem;if(!a)throw v.error("save: requires the portalItem property to be set"),new r("feature-layer:portal-item-not-set",S(e,"requires the portalItem property to be set"));if(!a.loaded)throw new r("feature-layer:portal-item-not-loaded",S(e,"cannot be saved to a portal item that does not exist or is inaccessible"));$(e,a)}async function F(e,a){return/\/\d+\/?$/.test(e.url??"")?N(a[0]):g(e,a)}async function g(e,a){const{layer:{url:t,customParameters:r,apiKey:n}}=a[0];let o=await e.fetchData("json");o&&null!=o.layers&&null!=o.tables||(o=await K(o,{url:t??"",customParameters:r,apiKey:n},a.map((e=>e.layer.layerId))));for(const e of a)q(e.layer,e.layerJSON,o);return o}async function K(e,a,t){e||={},e.layers||=[],e.tables||=[];const{url:r,customParameters:n,apiKey:o}=a,{serviceJSON:s,layersJSON:i}=await w(r,{customParameters:n,apiKey:o}),l=x(e.layers,s.layers,t),u=x(e.tables,s.tables,t);e.layers=l.itemResources,e.tables=u.itemResources;const c=[...l.added,...u.added],y=i?[...i.layers,...i.tables]:[];return await A(e,c,r,y),e}function x(e,a,t){const r=s(e,a,((e,a)=>e.id===a.id));e=e.filter((e=>!r.removed.some((a=>a.id===e.id))));const n=r.added.map((({id:e})=>({id:e})));return n.forEach((({id:a})=>{e.push({id:a})})),{itemResources:e,added:n.filter((({id:e})=>!t.includes(e)))}}async function A(e,a,t,r){const n=a.map((({id:e})=>new i({url:t,layerId:e,sourceJSON:r.find((({id:a})=>a===e))})));await l(n.map((e=>e.load()))),n.forEach((a=>{const{layerId:t,loaded:r,defaultPopupTemplate:n}=a;if(!r||null==n)return;q(a,{id:t,popupInfo:n.toJSON()},e)}))}function q(e,a,t){e.isTable?L(t.tables,a):L(t.layers,a)}function L(e,a){if(!e)return;const t=e.findIndex((({id:e})=>e===a.id));-1===t?e.push(a):e[t]=a}function T(e){const{portalItem:a}=e;return u(e)&&!e.dynamicDataSource&&!!a?.loaded&&a.type===h}async function C(e){if(!e?.length)throw new r("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(e.map((e=>e.load())));for(const a of e)if(!T(a))throw new r("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${S(a,"does not conform")}`,{layer:a});const a=e.map((e=>e.portalItem.id));if(new Set(a).size>1)throw new r("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const t=e.map((e=>e.layerId));if(new Set(t).size!==t.length)throw new r("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function E(e,a){let r=c.from(a);return r.id&&(r=r.clone(),r.id=null),r.type??=h,r.portal??=t.getDefault(),$(e,r),r}async function H(e,a){const{url:t,layerId:r,title:n,fullExtent:s,isTable:i}=e,l=y(t),u=null!=l&&"FeatureServer"===l.serverType;a.url=u?t:`${t}/${r}`,a.title||=n,a.extent=null,i||null==s||(a.extent=await f(s)),d(a,p.METADATA),d(a,p.MULTI_LAYER),o(a,p.SINGLE_LAYER),i&&o(a,p.TABLE),O(a)}async function Q(e,a,t){const r=e.portal;await(r?.signIn()),await(r?.user?.addItem({item:e,data:a,folder:t?.folder}))}const R=a(X);async function X(e,a){await P(e),j(e);const t=e.portalItem,r=b(t),n=await J(e,r,a),o=await F(t,[{layer:e,layerJSON:n}]);return O(t),await t.update({data:o}),m(r),t}const Y=a((async(e,a)=>{await C(e);const t=e[0].portalItem,r=b(t),n=await Promise.all(e.map((e=>J(e,r,a)))),o=await F(t,e.map(((e,a)=>({layer:e,layerJSON:n[a]}))));return O(t),await t.update({data:o}),await Promise.all(e.slice(1).map((e=>e.portalItem.reload()))),m(r),t.clone()})),Z=a(_);async function _(e,a,t){await P(e);const r=E(e,a),n=b(r),o=N({layer:e,layerJSON:await J(e,n,t)});return await H(e,r),await Q(r,o,t),e.portalItem=r,m(n),r}export{R as save,Y as saveAll,Z as saveAs};
//# sourceMappingURL=p-ef8948ce.js.map