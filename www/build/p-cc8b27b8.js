import{as as t,bU as s,aB as i,bF as h}from"./p-b54724b6.js";import{r as e,M as r,h as n,b as o,i as l}from"./p-52a9dec5.js";import{e as u}from"./p-07f12c16.js";import{t as a}from"./p-2d1dac84.js";import{a as c}from"./p-843f0c78.js";import{n as d}from"./p-541ec65c.js";import{P as p,G as f,D as m}from"./p-13e550f5.js";import{T as g,b as x}from"./p-49f0006c.js";class w{constructor(t,s,i){this.pixelBlock=t,this.extent=s,this.originalPixelBlock=i}get width(){return null!=this.pixelBlock?this.pixelBlock.width:0}get height(){return null!=this.pixelBlock?this.pixelBlock.height:0}render(t){const s=this.pixelBlock;if(null==s)return;const i=this.filter({extent:this.extent,pixelBlock:this.originalPixelBlock??s});if(null==i.pixelBlock)return;i.pixelBlock.maskIsAlpha&&(i.pixelBlock.premultiplyAlpha=!0);const h=i.pixelBlock.getAsRGBA(),e=t.createImageData(i.pixelBlock.width,i.pixelBlock.height);e.data.set(h),t.putImageData(e,0,0)}getRenderedRasterPixels(){const t=this.filter({extent:this.extent,pixelBlock:this.pixelBlock});return null==t.pixelBlock?null:(t.pixelBlock.maskIsAlpha&&(t.pixelBlock.premultiplyAlpha=!0),{width:t.pixelBlock.width,height:t.pixelBlock.height,renderedRasterPixels:new Uint8Array(t.pixelBlock.getAsRGBA().buffer)})}}function v(t){return t&&"render"in t}function b(t){const s=document.createElement("canvas");return s.width=t.width,s.height=t.height,t.render(s.getContext("2d")),s}function j(t){return v(t)?t instanceof w?i(t.getRenderedRasterPixels(),(t=>t.renderedRasterPixels)):b(t):t}class T extends c{constructor(t=null,s=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this._texture=null,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=s,this.source=t,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),null!=this._uploadStatus&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return void 0!==this._height?this._height:this._sourceHeight}set height(t){this._height=t}get source(){return this._source}set source(t){null==t&&null==this._source||(this._source=t,this.invalidateTexture(),this.requestRender())}get width(){return void 0!==this._width?this._width:this._sourceWidth}set width(t){this._width=t}beforeRender(t){super.beforeRender(t),this.updateTexture(t)}async setSourceAsync(i,h){null!=this._uploadStatus&&this._uploadStatus.controller.abort();const e=new AbortController,r=t();return s(h,(()=>e.abort())),s(e,(t=>r.reject(t))),this._uploadStatus={controller:e,resolver:r},this.source=i,r.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}updateTransitionProperties(t,s){t>=64&&(this.fadeTransitionEnabled=!1,this.inFadeTransition=!1),super.updateTransitionProperties(t,s)}setTransform(t){const s=e(this.transforms.dvs),[i,h]=t.toScreenNoRotation([0,0],[this.x,this.y]),u=this.resolution/this.pixelRatio/t.resolution,c=u*this.width,d=u*this.height,p=Math.PI*this.rotation/180;r(s,s,a(i,h)),r(s,s,a(c/2,d/2)),n(s,s,-p),r(s,s,a(-c/2,-d/2)),o(s,s,a(c,d)),l(this.transforms.dvs,t.displayViewMat3,s)}setSamplingProfile(t){this._texture&&(t.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(t.samplingMode))}bind(t,s){this._texture&&t.bindTexture(this._texture,s)}async updateTexture({context:t,painter:s}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(t)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const i=j(this.source);try{if(null!=this._uploadStatus){const{controller:t,resolver:h}=this._uploadStatus,e={signal:t.signal},{width:r,height:n}=this,o=this._texture,l=s.textureUploadManager;await l.enqueueTextureUpdate({data:i,texture:o,width:r,height:n},e),h.resolve(),this._uploadStatus=null}else this._texture.setData(i);this.ready()}catch(t){h(t)}}onDetach(){this.destroy()}_createTransforms(){return{dvs:u()}}_createTexture(t){const s=this.immutable&&t.type===d.WEBGL2,i=new x;return i.internalFormat=s?p.RGBA8:f.RGBA,i.wrapMode=m.CLAMP_TO_EDGE,i.isImmutable=s,i.width=this._sourceWidth,i.height=this._sourceHeight,new g(t,i)}}export{T,b,w as l,v as w};
//# sourceMappingURL=p-cc8b27b8.js.map