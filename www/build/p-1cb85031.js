import{aP as t,o as e,iD as i,b as s,s as n,bk as r,a6 as a,aT as l,e as o,ck as h,ay as c,l as u,y as f,d7 as d,n as p,N as m,a$ as y,aU as w,a8 as x,b2 as g,r as v,R as I,h as S,aw as b,F as R,bP as M,hG as T,hH as k,d3 as F,d4 as P,i3 as C,i6 as D,d2 as B,hJ as O,d5 as _,bS as E,cK as A,u as N,hM as j,ad as z,X as L,q as H,hT as G,hp as W}from"./p-b54724b6.js";import{c as $,N as J,l as U,d as V,b as q,h as X,Q as Y,E as K,L as Q,q as Z,k as tt,t as et,m as it,a as st}from"./p-8e0649f0.js";import{h as nt,D as rt,i as at,a as lt,p as ot,d as ht,o as ct,f as ut,g as ft}from"./p-12b975f0.js";import{j as dt,p as pt}from"./p-8bc47c76.js";import{j as mt,l as yt,m as wt,L as xt,r as gt,a as vt,h as It,q as St,P as bt,t as Rt,v as Mt,U as Tt,N as kt,x as Ft,y as Pt,B as Ct,z as Dt,D as Bt}from"./p-1bd9b819.js";import{m as Ot,x as _t,h as Et,s as At,i as Nt}from"./p-166207f6.js";import{U as jt,R as zt,I as Lt,a as Ht,b as Gt,v as Wt,u as $t,f as Jt,s as Ut,W as Vt,T as qt}from"./p-f7376ac9.js";import{k as Xt,_ as Yt,i as Kt,n as Qt,Q as Zt,q as te,$ as ee,V as ie,C as se,K as ne,J as re}from"./p-22a6b5ef.js";import{_ as ae,f as le,i as oe,y as he,n as ce,h as ue}from"./p-7d91e4a1.js";import{T as fe}from"./p-a0d095b0.js";import"./p-a5e3ec2a.js";import"./p-80be55a5.js";import"./p-fdc41b20.js";import"./p-ecc7ed03.js";import"./p-6cd106e8.js";import"./p-1b31d781.js";import"./p-9f1a0adc.js";import"./p-7833a3a9.js";import"./p-52d8e383.js";const de=8,pe=256;let me=class extends(t(e)){constructor(){super(...arguments),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const t=Xt();this.addResolvingPromise(t),await this.when()}normalizeCtorArgs(t){return t&&t.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:dt.create(),...t.ioConfig}}),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=ne(t.spatialReference);return null!=e&&t.extent.width>=e/2}get _hasNoneOrGCSShiftTransform(){const{transform:t}=this.rasterInfo;return null==t||"gcs-shift"===t.type}set rasterJobHandler(t){this._set("rasterJobHandler",t),"Function"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach((e=>e.rasterJobHandler=t))}set url(t){this._set("url",i(t,s.getLogger(this)))}async open(t){throw new n("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(t,e,i,s={}){const n=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,r=this.getTileExtentFromTileInfo(t,e,i,n);return this.fetchPixels(r,n.size[0],n.size[1],s)}async identify(t,e={}){t=r(a,t).clone().normalize();const{multidimensionalDefinition:i,timeExtent:s}=e,{rasterInfo:n}=this,{hasMultidimensionalTranspose:o,multidimensionalInfo:h}=n;let{transposedVariableName:c}=e;const u=null!=h&&o&&(null!=s||nt(i));if(u&&!c){c=null!=i&&i.length>0?i[0].variableName??void 0:h.variables[0].name,e={...e,transposedVariableName:c}}e=this._getRequestOptionsWithSliceId(e);const{spatialReference:f,extent:d}=n,{datumTransformation:p}=e;let m=Yt(t,f,p);if(!d.intersects(m))return{location:m,value:null};if(null!=n.transform){const t=n.transform.inverseTransform(m);if(!n.nativeExtent.intersects(t))return{location:t,value:null};m=t}let y=0;const w=null!=c&&null!=h&&n.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const t=this.primaryRasters.rasters[0];if(w)return t.identify(m,e);const{pixelSize:i}=n,s=3,r=i.x*s/2,a=i.y*s/2,o=new l({xmin:m.x-r,xmax:m.x+r,ymin:m.y-a,ymax:m.y+a,spatialReference:f}),h={interpolation:"nearest"},{pixelBlock:c}=await t.fetchPixels(o,s,s,h),{pixelBlock:u}=await this.fetchPixels(o,s,s,h);if(null==c)return{location:m,value:null};const d=Math.floor(s*s*.5),p=!c.mask||c.mask[d]?c.pixels.map((t=>t[d])):null;let y;return null!=u&&(y=!u.mask||u.mask[d]?u.pixels.map((t=>t[d])):void 0),{location:m,value:p,processedValue:y,pyramidLevel:0}}if(!w)if(e.srcResolution){y=Kt(e.srcResolution,n,this.ioConfig.sampling).pyramidLevel}else if(y=await this.computeBestPyramidLevelForLocation(t,e),null==y)return{location:m,value:null};const x=this.identifyPixelLocation(m,y,null,w);if(null===x)return{location:m,value:null};const{row:g,col:v,rowOffset:I,colOffset:S,blockWidth:b}=x,R=c??e.sliceId,M=Nt(this.url,R),T=`${y}/${g}/${v}`;let k=Ot(M,null,T);null==k&&(k=this.fetchRawTile(y,g,v,e),_t(M,null,T,k));const F=await k;if(null==F||!F.pixels?.length)return{location:m,value:null};const P=I*b+S;return this._processIdentifyResult(F,{srcLocation:m,position:P,pyramidLevel:y,useTransposedTile:!!w,requestSomeSlices:u,identifyOptions:e})}async fetchPixels(t,e,i,s={}){t=Qt(t),s=this._getRequestOptionsWithSliceId(s);const{_hasNoneOrGCSShiftTransform:n}=this;if(s.requestRawData&&n)return this._fetchPixels(t,e,i,s);const r=ne(t.spatialReference),a=Zt(t);if(null==r||0===a||1===a&&this._isGlobalWrappableSource&&n)return this._fetchPixels(t,e,i,s);if(a>=3)return{extent:t,pixelBlock:null};const o=[],{xmin:h,xmax:c}=t,u=Math.round(r/(c-h)*e),f=u-Math.round((r/2-h)/(c-h)*e);let d=0;const p=[];for(let n=0;n<=a;n++){const m=new l({xmin:0===n?h:-r/2,xmax:n===a?c-r*n:r/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),y=0===n?u-f:n===a?e-d:u;d+=y,p.push(y);const w=s.disableWrapAround&&n>0?null:this._fetchPixels(m,y,i,s);o.push(w)}const m=(await Promise.all(o)).map((t=>t?.pixelBlock));let y=null;const w={width:e,height:i};if(this.rasterJobHandler){y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:w,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:p},s)).pixelBlock}else y=jt(m,w,{blockWidths:p});return{extent:t,srcExtent:te(t,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:y}}async fetchRawPixels(t,e,i,s={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const n=await this._fetchRawTiles(t,e,i,s),{nativeExtent:r,nativePixelSize:a,storageInfo:o}=this.rasterInfo,h=2**t,c=a.x*h,u=a.y*h,f=new l({xmin:r.xmin+c*e.x,xmax:r.xmin+c*(e.x+i.width-1),ymin:r.ymax-u*(e.y+i.height-1),ymax:r.ymax-u*e.y,spatialReference:r.spatialReference});if(!n)return{extent:f,srcExtent:f,pixelBlock:null};const{pixelBlocks:d,mosaicSize:p}=n;if(1===d.length&&null!=d[0]&&d[0].width===i.width&&d[0].height===i.height)return{extent:f,srcExtent:f,pixelBlock:n.pixelBlocks[0]};const m=t>0?o.pyramidBlockWidth:o.blockWidth,y=t>0?o.pyramidBlockHeight:o.blockHeight,w={x:e.x%m,y:e.y%y};let x;if(this.rasterJobHandler){x=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:p,destDimension:i,clipOffset:w,clipSize:i,coefs:null,sampleSpacing:null,interpolation:s.interpolation,alignmentInfo:null,blockWidths:null},s)).pixelBlock}else x=jt(d,p,{clipOffset:w,clipSize:i});return{extent:f,srcExtent:f,pixelBlock:x}}fetchRawTile(t,e,i,s){throw new n("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return te(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?mt(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,e,i=0){const{customFetchParameters:s}=this.ioConfig,{range:n,query:r,headers:a}=e;i=i??e.retryCount??this.ioConfig.retryCount;const l=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await o(t,{...e,query:{...r,...s},headers:{...a,...l}})}catch(s){if(i>0)return i--,this.request(t,e,i);throw s}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;return null==e||null==t||0===t.length?null:rt(t,e)}getTileExtentFromTileInfo(t,e,i,s){const n=h(s.lodAt(t));return this.getTileExtent({x:n.resolution,y:n.resolution},e,i,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:i,pixelSize:s}=this.rasterInfo;if(!t.tileInfo){const n=[],r=t.maximumPyramidLevel||0;let l=Math.max(s.x,s.y),o=1/.0254*96*l;for(let t=0;t<=r;t++)n.push(new pt({level:r-t,resolution:l,scale:o})),l*=2,o*=2;const h=new a({x:i.xmin,y:i.ymax,spatialReference:e});t.tileInfo=new dt({origin:h,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:n}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,i=512,s){const{width:n,height:r,nativeExtent:l,pixelSize:o,spatialReference:h}=t,c=new a({x:l.xmin,y:l.ymax,spatialReference:h});null==s&&(s=Math.max(0,Math.round(Math.log(Math.max(n,r))/Math.LN2-8)));const u=this.computeBlockBoundary(l,512,512,{x:l.xmin,y:l.ymax},[o],s);t.storageInfo=new yt({blockWidth:e,blockHeight:i,pyramidBlockWidth:e,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:u})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,i,s,n,r=0,a=2){if(1===n.length&&r>0){n=[...n];let{x:t,y:e}=n[0];for(let i=0;i<r;i++)t*=a,e*=a,n.push({x:t,y:e})}const l=[],{x:o,y:h}=s;for(let s=0;s<n.length;s++){const{x:r,y:a}=n[s];l.push({minCol:Math.floor((t.xmin-o+.1*r)/e/r),maxCol:Math.floor((t.xmax-o-.1*r)/e/r),minRow:Math.floor((h-t.ymax+.1*a)/i/a),maxRow:Math.floor((h-t.ymin-.1*a)/i/a)})}return l}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(0===t)return e;if(null!=i&&i.length)return i[t-1];const n=s**t;return{x:e.x*n,y:e.y*n}}identifyPixelLocation(t,e,i,s){const{spatialReference:n,nativeExtent:r,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:o,transposeInfo:h}=a,c=s&&null!=h?h.tileSize[0]:a.blockWidth,u=s&&null!=h?h.tileSize[1]:a.blockHeight,f=Yt(t,n,i);if(!r.intersects(f))return null;if(e<0||e>l)return null;const d=this.getPyramidPixelSize(e),{x:p,y:m}=d,y=(o.y-f.y)/m/u,w=(f.x-o.x)/p/c,x=Math.min(u-1,Math.floor((y-Math.floor(y))*u)),g=Math.min(c-1,Math.floor((w-Math.floor(w))*c));return{pyramidLevel:e,row:Math.floor(y),col:Math.floor(w),rowOffset:x,colOffset:g,blockWidth:c,srcLocation:f}}getTileExtent(t,e,i,s,n,r){const[a,o]=r,h=s.x+i*a*t.x,c=h+a*t.x,u=s.y-e*o*t.y,f=u-o*t.y;return new l({xmin:h,xmax:c,ymin:f,ymax:u,spatialReference:n})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,i){const s=this.rasterInfo.storageInfo.blockBoundary[t];return!s||s.maxRow<e||s.maxCol<i||s.minRow>e||s.minCol>i}async _fetchPixels(t,e,i,s={}){let n=Zt(t);if(n>=2)return{extent:t,pixelBlock:null};const r=this._getSourceDataInfo(t,e,i,s),{pyramidLevel:l,srcResolution:o,srcExtent:h,srcWidth:c,srcHeight:u,ul:f}=r;if(0===c||0===u)return{extent:t,srcExtent:h,pixelBlock:null};const{rasterInfo:d}=this,p=d.transform,m="gcs-shift"===p?.type,y=null!=ne(t.spatialReference);!m&&y||(n=Zt(r.srcExtent,m));const w=await this._fetchRawTiles(l,f,{width:c,height:u,wrapCount:n},s);if(!w)return{extent:t,srcExtent:h,pixelBlock:null};const x=d.storageInfo,g=l>0?x.pyramidBlockWidth:x.blockWidth,v=l>0?x.pyramidBlockHeight:x.blockHeight;let{x:I,y:S}=d.pixelSize;if(l>0){const{pyramidResolutions:t,pyramidScalingFactor:e}=x;if(null!=t&&t[l-1])({x:I,y:S}=t[l-1]);else{const t=e**l;I*=t,S*=t}}const b=d.spatialReference,R=new a({x:I,y:S,spatialReference:b}),M=g===c&&v===u&&f.x%g==0&&f.y%v==0,T=new a({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference}),k=!t.spatialReference.equals(b),F=b.isGeographic?1e-9:1e-4,{datumTransformation:P}=s;if(!k&&M&&1===w.pixelBlocks.length&&g===e&&v===i&&this._isSameResolution(o,T,F))return{extent:t,srcExtent:h,srcTilePixelSize:R,pixelBlock:w.pixelBlocks[0]};const C=y&&null!=ne(h.spatialReference)&&this._hasNoneOrGCSShiftTransform,D=s.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");D&&!this.rasterJobHandler&&await Xt();const B=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:w.extent,pixelSize:T.toJSON(),datumTransformation:P,rasterTransform:p,hasWrapAround:n>0||C,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:D},s):ee({projectedExtent:t,srcBufferExtent:w.extent,pixelSize:T,datumTransformation:P,rasterTransform:p,hasWrapAround:n>0||C,isAdaptive:!1,includeGCSGrid:D});let O;const _=!s.requestRawData,E={rows:B.spacing[0],cols:B.spacing[1]},A=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(l,w.extent.xmin):void 0,{pixelBlocks:N,mosaicSize:j,isPartiallyFilled:z}=w;let L=null;if(this.rasterJobHandler){const t=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:N,srcMosaicSize:j,destDimension:_?{width:e,height:i}:null,coefs:_?B.coefficients:null,sampleSpacing:_?E:null,projectDirections:D,gcsGrid:D?B.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:s.interpolation,alignmentInfo:A,blockWidths:null},s);({pixelBlock:O,localNorthDirections:L}=t)}else{const t=jt(N,j,{alignmentInfo:A});O=_?zt(t,{width:e,height:i},B.coefficients,E,s.interpolation):t,D&&B.gcsGrid&&(L=Lt({width:e,height:i},B.gcsGrid),O=Ht(O,this.rasterInfo.dataType,L))}return s.requestRawData||D?{extent:t,srcExtent:h,srcTilePixelSize:R,pixelBlock:O,transformGrid:B,localNorthDirections:L,isPartiallyFilled:z}:{extent:t,srcExtent:h,srcTilePixelSize:R,pixelBlock:O}}async _fetchRawTiles(t,e,i,s){const{origin:n,blockBoundary:r}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:o}=this.getBlockWidthHeight(t);let{x:h,y:c}=e,{width:u,height:f,wrapCount:d}=i;const p=this._getRasterTileAlignmentInfo(t,0);s.buffer&&(h-=s.buffer.cols,c-=s.buffer.rows,u+=2*s.buffer.cols,f+=2*s.buffer.rows);let m=0,y=0,w=0;if(d&&null!=p){({worldColumnCountFromOrigin:y,originColumnOffset:w,rightPadding:m}=p);y*p.blockWidth-m>=h+u&&(m=0)}const x=Math.floor(h/a),g=Math.floor(c/o),v=Math.floor((h+u+m-1)/a),I=Math.floor((c+f+m-1)/o),S=r[t];if(!S)return null;const{minRow:b,minCol:R,maxCol:M,maxRow:T}=S;if(0===d&&(I<b||v<R||g>T||x>M))return null;const k=new Array;let F=!1;const P=null==this.ioConfig.allowPartialFill?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let e=g;e<=I;e++)for(let i=x;i<=v;i++){let n=i;if(!s.disableWrapAround&&d&&null!=p&&y<=i&&(n=i-y-w),e>=b&&n>=R&&T>=e&&M>=n){const i=this._fetchRawTile(t,e,n,s);P?k.push(new Promise((t=>{i.then((e=>t(e))).catch((()=>{F=!0,t(null)}))}))):k.push(i)}else k.push(Promise.resolve(null))}if(0===k.length)return null;const C=await Promise.all(k),D={height:(I-g+1)*o,width:(v-x+1)*a},{spatialReference:B}=this.rasterInfo,O=this.getPyramidPixelSize(t),{x:_,y:E}=O;return{extent:new l({xmin:n.x+x*a*_,xmax:n.x+(v+1)*a*_,ymin:n.y-(I+1)*o*E,ymax:n.y-g*o*E,spatialReference:B}),pixelBlocks:C,mosaicSize:D,isPartiallyFilled:F}}_isSameResolution(t,e,i){return Math.abs(t.x-e.x)<i&&Math.abs(t.y-e.y)<i}_fetchRawTile(t,e,i,s){const n=this.rasterInfo.storageInfo.blockBoundary[t];if(!n)return Promise.resolve(null);const{minRow:r,minCol:a,maxCol:l,maxRow:o}=n;if(e<r||i<a||e>o||i>l)return Promise.resolve(null);const h=Nt(this.url,s.sliceId),u=`${t}/${e}/${i}`;let f=Ot(h,s.registryId,u);if(null==f){const n=new AbortController;f=this.fetchRawTile(t,e,i,{...s,signal:n.signal}),_t(h,s.registryId,u,f,n),f.catch((()=>Et(h,s.registryId,u)))}return s.signal&&c(s,(()=>{At(h,s.registryId,u)})),f}_computeMagDirValues(t){const{bandCount:e,dataType:i}=this.rasterInfo;if(!(2===e&&"vector-magdir"===i||"vector-uv"===i)||2!==t?.length||!t[0]?.length)return null;const s=t[0].length;if("vector-magdir"===i){const e=t[1].map((t=>(t+360)%360));return[t[0],e]}const[n,r]=t,a=[],l=[];for(let t=0;t<s;t++){const[e,i]=Wt([n[t],r[t]]);a.push(e),l.push(i)}return[a,l]}_getRasterTileAlignmentInfo(t,e){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=ie(this.rasterInfo)),null==this._rasterTileAlighmentInfo.pyramidsInfo?null:{startX:e,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[t]}}_getSourceDataInfo(t,e,i,s={}){const n={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};s.srcResolution&&(n.srcResolution=s.srcResolution,this._updateSourceDataInfo(t,n));const r=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:l,srcHeight:o,pyramidLevel:h}=n,c=l/e,u=o/i,f=h<r&&c*u>=16,d=h===r&&this._requireTooManySrcTiles(l,o,e,i);if(f||d||(0===l||0===o)){const l=new a({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference});let o=se(l,this.rasterInfo.spatialReference,t,n.datumTransformation);const d=!o||s.srcResolution&&o.x+o.y<s.srcResolution.x+s.srcResolution.y;if(f&&s.srcResolution&&d){const t=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(r-h+3>=t){const e=2**t;o={x:s.srcResolution.x*e,y:s.srcResolution.y*e}}}o&&(n.srcResolution=o,this._updateSourceDataInfo(t,n))}return this._requireTooManySrcTiles(n.srcWidth,n.srcHeight,e,i)&&(n.srcWidth=0,n.srcHeight=0),n}_requireTooManySrcTiles(t,e,i,s){const{tileInfo:n}=this.rasterInfo.storageInfo;return Math.ceil(t/n.size[0])*Math.ceil(e/n.size[1])>=pe||t/i>de||e/s>de}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const{rasterInfo:i}=this,s=i.spatialReference,{srcResolution:n,datumTransformation:r}=e,{pyramidLevel:a,pyramidResolution:l,excessiveReading:o}=Kt(n,i,this.ioConfig.sampling);if(o)return;let h=e.srcExtent||te(t,s,r);if(null==h)return;const c=i.transform;c&&(h=c.inverseTransform(h)),e.srcExtent=h;const{x:u,y:f}=i.storageInfo.origin,d=Math.floor((h.xmin-u)/l.x+.1),p=Math.floor((f-h.ymax)/l.y+.1),m=Math.floor((h.xmax-u)/l.x-.1),y=Math.floor((f-h.ymin)/l.y-.1),w=h.width<.1*l.x?0:m-d+1,x=h.height<.1*l.y?0:y-p+1;e.pyramidLevel=a,e.pyramidResolution=l,e.srcWidth=w,e.srcHeight=x,e.ul={x:d,y:p}}_getRequestOptionsWithSliceId(t){return null!=this.rasterInfo.multidimensionalInfo&&null==t.sliceId&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}_processIdentifyResult(t,e){const{srcLocation:i,position:s,pyramidLevel:n,useTransposedTile:r}=e,a=t.pixels[0].length/t.width/t.height;if(!(!t.mask||t.mask[s]))return{location:i,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(null==l||!r){const e=t.pixels.map((t=>t[s])),r={location:i,value:e,pyramidLevel:n},a=this._computeMagDirValues(e.map((t=>[t])));return a?.length&&(r.magdirValue=a.map((t=>t[0]))),r}let o=t.pixels.map((t=>t.slice(s*a,s*a+a))),h=this._computeMagDirValues(o);const{requestSomeSlices:c,identifyOptions:u}=e;let f=at(l,u.transposedVariableName);if(c){const t=lt(f,u.multidimensionalDefinition,u.timeExtent);o=o.map((e=>t.map((t=>e[t])))),h=h?.map((e=>t.map((t=>e[t])))),f=t.map((t=>f[t]))}const d=t.noDataValues||this.rasterInfo.noDataValue,p={pixels:o,pixelType:t.pixelType};let m;null!=d&&(Gt(p,d),m=p.mask);return{location:i,value:null,dataSeries:f.map(((t,e)=>{const i={value:0===m?.[e]?null:o.map((t=>t[e])),multidimensionalDefinition:t.multidimensionalDefinition.map((t=>new ot({...t,isSlice:!0})))};return h?.length&&(i.magdirValue=[h[0][e],h[1][e]]),i})),pyramidLevel:n}}};u([f()],me.prototype,"_rasterTileAlighmentInfo",void 0),u([f({readOnly:!0})],me.prototype,"_isGlobalWrappableSource",null),u([f({readOnly:!0})],me.prototype,"_hasNoneOrGCSShiftTransform",null),u([f()],me.prototype,"rasterJobHandler",null),u([f(d)],me.prototype,"url",null),u([f({type:String,json:{write:!0}})],me.prototype,"datasetName",void 0),u([f({type:String,json:{write:!0}})],me.prototype,"datasetFormat",void 0),u([f()],me.prototype,"hasUniqueSourceStorageInfo",void 0),u([f()],me.prototype,"rasterInfo",void 0),u([f()],me.prototype,"ioConfig",void 0),u([f()],me.prototype,"sourceJSON",void 0),me=u([p("esri.layers.support.rasterDatasets.BaseRaster")],me);const ye=me;let we=class extends ye{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null}async open(t){await this.init();const{rasterFunction:e}=this;this.primaryRasters?.rasters?.length?e.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=e.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach((t=>t.rasterJobHandler=this.rasterJobHandler)));const{rasters:i,rasterIds:s}=this.primaryRasters,r=i.map((e=>e.rasterInfo?void 0:e.open(t)));await Promise.all(r);const a=i.map((({rasterInfo:t})=>t)),l=e.bind({rasterInfos:a,rasterIds:s});if(!l.success||0===a.length)throw new n("raster-function:open",`cannot bind the function: ${l.error??""}`);const o="Table"===e.functionName?e:e.functionArguments?.raster;"Table"===o?.functionName&&(e.rasterInfo.attributeTable=m.fromJSON(o.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const h=a[0];this.hasUniqueSourceStorageInfo=1===a.length||a.slice(1).every((t=>this._hasSameStorageInfo(t,h))),this.set("sourceJSON",i[0].sourceJSON),this.set("rasterInfo",e.rasterInfo)}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async fetchPixels(t,e,i,s={}){const{rasters:n,rasterIds:r}=this.primaryRasters;let a=!1;const{interpolation:l}=s,o=this.rasterFunction.flatWebGLFunctionChain?.hasSurfaceFunction;!s.requestRawData&&"bilinear"!==l&&o&&(a=1===n.length&&!s.skipRasterFunction,s={...s,interpolation:"bilinear",requestRawData:a});const h=n.map((n=>n.fetchPixels(t,e,i,s))),c=await Promise.all(h),u=c.map((t=>t.pixelBlock)),f=a||s.requestRawData?c.map((t=>t.srcTilePixelSize)):null;if(s.skipRasterFunction||u.every((t=>null==t)))return c[0];const d=c.find((t=>null!=t.pixelBlock))?.extent??t,p=this.rasterJobHandler?await this.rasterJobHandler.process({extent:d,primaryPixelBlocks:u,primaryPixelSizes:f,primaryRasterIds:r}):this.rasterFunction.process({extent:d,primaryPixelBlocks:u,primaryPixelSizes:f,primaryRasterIds:r}),{transformGrid:m}=c[0];if(!a||null==p||null==m)return{...c[0],pixelBlock:p};const y={rows:m.spacing[0],cols:m.spacing[1]};let w;if(this.rasterJobHandler){w=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[p],srcMosaicSize:{width:p.width,height:p.height},destDimension:{width:e,height:i},coefs:m.coefficients,sampleSpacing:y,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:l,alignmentInfo:void 0,blockWidths:null},s)).pixelBlock}else w=zt(p,{width:e,height:i},m.coefficients,y,l);return{extent:t,srcExtent:c[0].srcExtent,pixelBlock:w}}_hasSameStorageInfo(t,e){const{storageInfo:i,pixelSize:s,spatialReference:n,extent:r}=t,{storageInfo:a,pixelSize:l,spatialReference:o,extent:h}=e;return s.x===l.x&&s.y===l.y&&n.equals(o)&&r.equals(h)&&i.blockHeight===a.blockHeight&&i.blockWidth===a.blockWidth&&i.maximumPyramidLevel===a.maximumPyramidLevel}};u([f({type:String,json:{write:!0}})],we.prototype,"datasetFormat",void 0),u([f()],we.prototype,"tileType",void 0),u([f()],we.prototype,"rasterFunction",void 0),u([f()],we.prototype,"primaryRasters",void 0),we=u([p("esri.layers.support.rasterDatasets.FunctionRaster")],we);const xe=we;function ge(t,e){if(t.spatialReference.equals(e))return t;const i=y(t.spatialReference),s=y(e);if(i===s)return t;const n=i/s;return{x:t.x*n,y:t.y*n}}async function ve(t,e,i){if("extent"===i.type)return Se(t,e,i);const{width:s,height:n}=t,r=new Uint8Array(s*n),{contains:a,intersects:l}=await import("./p-3f7d50a6.js");return l(e,i)?"polyline"===i.type?be(t,e,i):a(i,e)?t:Ie(t,e,i):new $t({pixelType:t.pixelType,width:s,height:n,mask:r,maskIsAlpha:!1,pixels:[...t.pixels]})}function Ie(t,e,i){if(!t)return t;const{width:s,height:n}=t,r=e.width/s,a=e.height/n,{xmin:l,ymax:o}=e;let h;if("extent"===i.type){const t=(i.xmin-l)/r,e=(i.xmax-l)/r,s=(o-i.ymax)/a,n=(o-i.ymin)/a;h=[[[t,s],[t,n],[e,n],[e,s],[t,s]]]}else h=i.rings.map((t=>t.map((([t,e])=>[(t-l)/r,(o-e)/a]))));const c=document.createElement("canvas");c.width=s,c.height=n;const u=c.getContext("2d");u.fillStyle="#f00",h.forEach((t=>{u.beginPath(),u.moveTo(t[0][0],t[0][1]);for(let e=0;e<t.length;e++)u.lineTo(t[e][0],t[e][1]);u.closePath(),u.fill()}));const f=u.getImageData(0,0,s,n).data,d=t.mask,p=s*n,m=new Uint8Array(p);for(let t=0;t<p;t++)d&&!d[t]||(m[t]=f[4*t+3]>127?255:0);return new $t({pixelType:t.pixelType,width:s,height:n,mask:m,maskIsAlpha:!1,pixels:[...t.pixels]})}function Se(t,e,i){const{width:s,height:n}=t,r=new Uint8Array(s*n),a=e.width/s,l=e.height/n;if(i.width/a<.5||i.height/l<.5)return new $t({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]});const{xmin:o,xmax:h,ymin:c,ymax:u}=e,{xmin:f,xmax:d,ymin:p,ymax:m}=i,y=Math.max(o,f),w=Math.min(h,d),x=Math.max(c,p),g=Math.min(u,m),v=.5*a,I=.5*l;if(w-y<v||g-x<I||w<o+v||y>h-v||x>u-I||g<c+I)return new $t({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]});const S=Math.max(0,(y-o)/a),b=Math.min(s,Math.max(0,(w-o)/a)),R=Math.max(0,(u-g)/l),M=Math.min(n,Math.max(0,(u-x)/l)),T=Math.round(S),k=Math.round(b)-1,F=Math.round(R),P=Math.round(M)-1;if(T===k&&S%1>.5&&b%1<.5||F===P&&R%1>.5&&M%1<.5)return new $t({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]});if(0===T&&0===F&&k===s&&P===n)return t;const C=t.mask;for(let t=F;t<=P;t++)for(let e=T;e<=k;e++){const i=t*s+e;r[i]=C?C[i]:255}return new $t({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]})}function be(t,e,i){const{width:s,height:n}=t,r=new Uint8Array(s*n),a=e.width/s,l=e.height/n,{xmin:o,ymax:h}=e,{paths:c}=i,u=t.mask;for(let t=0;t<c.length;t++){const e=c[t];for(let t=0;t<e.length-1;t++){const[i,c]=e[t],[f,d]=e[t+1];let p=Math.floor((h-c)/l),m=Math.floor((h-d)/l);if(m<p){const t=p;p=m,m=t}p=Math.max(0,p),m=Math.min(n-1,m);const y=(f-i)/(d-c);for(let t=p;t<=m;t++){const e=t===p?Math.max(c,d):(n+1-t)*l,h=t===m?Math.min(c,d):e-l;let w=d===c?Math.floor((i-o)/a):Math.floor((y*(e-c)+i-o)/a),x=d===c?Math.floor((f-o)/a):Math.floor((y*(h-c)+i-o)/a);if(x<w){const t=w;w=x,x=t}const g=t*s;w=Math.max(0,w),x=Math.min(s-1,x);for(let t=g+w;t<=g+x;t++)r[t]=u?u[t]:255}}}return new $t({pixelType:t.pixelType,width:s,height:n,mask:r,pixels:[...t.pixels]})}function Re(t,e,i,s=!0){const{spatialReference:n}=t,{x:r,y:a}=ge(i,n);let o,h,c;const u="extent"===e.type?e:e.extent;let{xmin:f,xmax:d,ymax:p,ymin:m}=u;const{xmin:y,ymax:w}=t.extent;return s?(f=y+(f>y?r*Math.round((f-y)/r):0),p=w-(p<w?a*Math.round((w-p)/a):0),d=y+(d>y?r*Math.round((d-y)/r):0),m=w-(m<w?a*Math.round((w-m)/a):0),o=new l({xmin:f,ymax:p,xmax:d,ymin:m,spatialReference:n}),h=Math.round(o.width/r),c=Math.round(o.height/a)):(h=Math.floor((d-f)/r+.8),c=Math.floor((p-m)/a+.8),f=y+(f>y?r*Math.floor((f-y)/r+.1):0),p=w-(p<w?a*Math.floor((w-p)/a+.1):0),d=f+h*r,m=p-c*a,o=new l({xmin:f,ymax:p,xmax:d,ymin:m,spatialReference:n})),{extent:o,width:h,height:c}}const Me=s.getLogger("esri.layers.mixins.ImageryTileMixin"),Te=t=>{let e=class extends t{constructor(...t){super(...t),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===t[0]?.raster?.datasetFormat}get fullExtent(){return this.rasterInfo?.extent}set multidimensionalDefinition(t){this._set("multidimensionalDefinition",t),this.updateRenderer()}set rasterFunction(t){"none"===t?.functionName?.toLowerCase()&&(t=void 0),this._set("rasterFunction",t),this.updateRasterFunction()}set url(t){this._set("url",i(t,Me))}set renderer(t){null==t&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("renderer",t),this.updateRenderer())}readRenderer(t,e,i){const s=e?.layerDefinition?.drawingInfo?.renderer;return q(s,i)||void 0}async convertVectorFieldData(t,e){if(null==t||!this.rasterInfo)return null;const i=this._rasterJobHandler.instance,s=this.rasterInfo.dataType;return i?i.convertVectorFieldData({pixelBlock:t,dataType:s},e):Jt(t,s)}async computeStatisticsHistograms(t,e){t=r(X,t).clone();const{rasterInfo:i}=this,{geometry:s}=t;if(null==s)throw new n("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let l=s;const{spatialReference:o}=i;s.spatialReference.equals(o)||(await Xt(),l="extent"===s.type?te(s,o):re(s,o));const h=t.pixelSize??new a({x:i.pixelSize.x,y:i.pixelSize.y,spatialReference:o}),{extent:c,width:u,height:f}=Re(i,l,h),d=await this.fetchPixels(c,u,f,{...e,interpolation:"nearest"});if(null==d.pixelBlock)throw new n("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const p=await ve(d.pixelBlock,c,l),m=this._rasterJobHandler.instance;return m?m.computeStatisticsHistograms({pixelBlock:p},e):wt(p)}async createFlowMesh(t,e){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(t,e):Ut(t.meshType,t.simulationSettings,t.flowData,null!=e.signal?e.signal:(new AbortController).signal)}normalizeRasterFetchOptions(t){const{multidimensionalInfo:e}=this.rasterInfo??{};if(null==e)return t;let i=t.multidimensionalDefinition||this.multidimensionalDefinition;null!=i&&i.length||(i=ht(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const s=t.timeExtent||this.timeExtent;if(null!=i&&null!=s&&(null!=s.start||null!=s.end)){i=i.map((t=>t.clone()));const n=e.variables.find((({name:t})=>t===i[0].variableName))?.dimensions?.find((({name:t})=>"StdTime"===t)),r=i.find((({dimensionName:t})=>"StdTime"===t));if(!n||!r)return{...t,multidimensionalDefinition:null};const{start:a,end:l}=s,o=null==a?null:a.getTime(),h=null==l?null:l.getTime(),c=o??h,u=h??o;if(null!=n.values){const t=n.values.filter((t=>{if(Array.isArray(t)){if(c===u)return t[0]<=c&&t[1]>=c;const e=t[0]<=c&&t[1]>c||t[0]<u&&t[1]>=u,i=t[0]>=c&&t[1]<=u||t[0]<c&&t[1]>u;return e||i}return c===u?t===c:t>=c&&t<=u}));if(t.length){const e=t.sort(((t,e)=>{const i=Array.isArray(t)?t[0]:t,s=Array.isArray(t)?t[1]:t,n=Array.isArray(e)?e[0]:e,r=Array.isArray(e)?e[1]:e;if(c===u)return i-n;return Math.abs(s-u)-Math.abs(r-u)}))[0];r.values=[e]}else i=null}else if(n.hasRegularIntervals&&n.extent){const[t,e]=n.extent;c>e||u<t?i=null:r.values=c===u?[c]:[Math.max(t,c),Math.min(e,u)]}}return null!=i&&ct(i,this.multidimensionalSubset)?{...t,multidimensionalDefinition:null}:{...t,multidimensionalDefinition:i}}async updateRasterFunction(){if(!this.loaded||"imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const t=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&t&&this._set("rasterFunction",J.fromJSON(t)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let t,e=this.raster,i=!1;"Function"===e.datasetFormat?(t=e.primaryRasters.rasters,e=t[0],i=!0):t=[e];const{rasterFunction:s}=this;if(s){const i={raster:e};t.length>1&&t.forEach((t=>i[t.url]=t));const n=ae(s.functionDefinition?.toJSON()??s.toJSON(),i),r=new xe({rasterFunction:n});r.rasterJobHandler=this._rasterJobHandler.instance,await r.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=r}else this.raster=e,this._cachedRasterFunctionJson=null,await e.when();if(this._cachedRendererJson=null,!i&&!s)return;const{bandIds:n}=this,{bandCount:r}=this.raster.rasterInfo,a=n?.length?n.some((t=>t>=r)):r>=3;n&&(a||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:t,symbolizer:e}=this;if(!t||!e||!this.renderer)return;const{rasterInfo:i}=this.raster,s=ut(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=s?.name,r=Y({...this.renderer.toJSON(),variableName:n});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(r))return;const a=this._rasterJobHandler.instance;a&&(e.rasterInfo=K(i,n),e.rendererJSON=r,e.bind(),await a.updateSymbolizer(e),this._cachedRendererJson=r)}async applyRenderer(t,e){const i=t&&t.pixelBlock;if(!(null!=i&&i.pixels&&i.pixels.length>0))return null;let s;await this.updateRenderer();const n=this._rasterJobHandler.instance,r=this.bandIds??[];return s=n?await n.symbolize({...t,simpleStretchParams:e,bandIds:r}):this.symbolizer.symbolize({...t,simpleStretchParams:e,bandIds:r}),s}getTileUrl(t,e,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${t}/${e}/${i}`:""}getCompatibleTileInfo(t,e,i=!1){if(!this.loaded||null==e)return null;if(i&&t.equals(this.spatialReference))return this.tileInfo;const s=g(t);return dt.create({size:256,spatialReference:t,origin:s?{x:s.origin[0],y:s.origin[1]}:{x:e.xmin,y:e.ymax}})}getCompatibleFullExtent(t){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(t)||(this._compatibleFullExtent=this.raster.computeExtent(t)),this._compatibleFullExtent):null}async fetchTile(t,e,i,n={}){if(s(this),n.requestAsImageElement){const s=this.getTileUrl(t,e,i);return o(s,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then((t=>t.data))}const{rasterInfo:r}=this;if(null!=r.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition){const s=n.tileInfo||r.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(t,e,i,s),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,e,i,n)}async fetchPixels(t,e,i,s={}){return null!=this.rasterInfo.multidimensionalInfo&&null==(s=this.normalizeRasterFetchOptions(s)).multidimensionalDefinition?{extent:t,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),e=Math.round(e),i=Math.round(i),this.raster.fetchPixels(t,e,i,s))}async identify(t,e={}){const{raster:i,rasterInfo:s}=this;if(null!=s.multidimensionalInfo){if(!(s.hasMultidimensionalTranspose&&!!(nt(e.multidimensionalDefinition)||e.transposedVariableName||e.timeExtent))&&null==(e=this.normalizeRasterFetchOptions(e)).multidimensionalDefinition)return{location:t,value:null}}const r=this.multidimensionalSubset?.areaOfInterest;if(r&&!r.contains(t))throw new n("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return i.identify(t,e)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const t=this.rasterInfo?.multidimensionalInfo;if(null==t||"standard-time"!==this.rasterInfo?.dataType)return!1;const e=this.multidimensionalDefinition,i=e?.[0]?.variableName;return t.variables.some((t=>t.name===i&&(!e?.[0].dimensionName||t.dimensions.some((t=>"StdTime"===t.name)))))}getStandardTimeValue(t){return new Date(24*(t-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(t){const e=t??this.rasterInfo?.multidimensionalInfo;return ft(this.multidimensionalSubset,e)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=ht(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&"Function"===this.raster.datasetFormat&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const t=new et;return this._rasterJobHandler.connectionPromise=t.initialize().then((async()=>{s(this),this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch((()=>{})),this.renderer&&this.updateRenderer()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){s(this);const{raster:t}=this,e=Q(t.rasterInfo,t.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",e)}}_configDefaultRenderer(t="no"){s(this);const{rasterInfo:e}=this.raster;!this.bandIds&&e.bandCount>1&&(this.bandIds=Z(e));const i=ut(e,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=i?.name;if(!this.renderer||"override"===t){const t=tt(e,{bandIds:this.bandIds,variableName:n}),i=e.statistics,s=i&&i.length>0?i[0]:null,r=s?.max??0,a=s?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===t.type&&(r>1e24||a<-1e24)&&(t.dynamicRangeAdjustment=!0,t.statistics=null,"none"===t.stretchType&&(t.stretchType="min-max")),this.renderer=t}const r=Y({...this.renderer.toJSON(),variableName:n}),a=K(e,n);this.symbolizer?(this.symbolizer.rendererJSON=r,this.symbolizer.rasterInfo=a):this.symbolizer=new xt({rendererJSON:r,rasterInfo:a});const l=this.symbolizer.bind();if(l.success){if("auto"===t){const{colormap:t}=this.raster.rasterInfo,e=this.renderer;if(null!=t&&"raster-colormap"===e.type){const t=tt(this.raster.rasterInfo);JSON.stringify(t)!==JSON.stringify(e)&&this._configDefaultRenderer("override")}else if("raster-stretch"===e.type){const t=this.bandIds?.length,i=e.statistics?.length;!e.dynamicRangeAdjustment&&i&&t&&i!==t&&this._configDefaultRenderer("override")}}}else Me.warn("imagery-tile-mixin",l.error||"The given renderer is not supported by the layer."),"auto"===t&&this._configDefaultRenderer("override")}};function s(t){if(!t.raster||!t.rasterInfo)throw new n("imagery-tile","no raster")}return u([f()],e.prototype,"_cachedRendererJson",void 0),u([f()],e.prototype,"_cachedRasterFunctionJson",void 0),u([f()],e.prototype,"_compatibleFullExtent",void 0),u([f()],e.prototype,"_isConstructedFromFunctionRaster",void 0),u([f()],e.prototype,"_rasterJobHandler",void 0),u([f()],e.prototype,"bandIds",void 0),u([f({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),u([f({json:{read:!1}})],e.prototype,"fullExtent",null),u([f()],e.prototype,"interpolation",void 0),u([f()],e.prototype,"ioConfig",void 0),u([f({type:[ot],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),u([f({type:$,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),u([f()],e.prototype,"raster",void 0),u([f({type:J,json:{name:"renderingRule",write:!0}})],e.prototype,"rasterFunction",null),u([f()],e.prototype,"rasterInfo",void 0),u([f()],e.prototype,"sourceJSON",void 0),u([f({readOnly:!0,type:w,json:{read:!1}})],e.prototype,"spatialReference",void 0),u([f({type:dt})],e.prototype,"tileInfo",void 0),u([f(d)],e.prototype,"url",null),u([f({types:U,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const t="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!t}}},origins:{"web-scene":{types:V,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:t=>({enabled:t&&"vector-field"!==t.type&&"flow"!==t.type})}}}}})],e.prototype,"renderer",null),u([x("renderer")],e.prototype,"readRenderer",null),u([f()],e.prototype,"symbolizer",void 0),e=u([p("esri.layers.ImageryTileMixin")],e),e};function ke(t){const e=t.fields,i=t.records,s=e.some((t=>"oid"===t.name.toLowerCase()))?"OBJECTID":"OID",n=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map((t=>({name:t.name,type:"esriFieldType"+t.typeName,alias:t.name})))),r=n.map((t=>t.name)),a=[];let l=0,o=0;return i.forEach((t=>{const e={};for(e[s]=l++,o=1;o<r.length;o++)e[r[o]]=t[o-1];a.push({attributes:e})})),{displayFieldName:"",fields:n,features:a}}class Fe{static get supportedVersions(){return[5]}static parse(t){const e=new DataView(t),i=3&e.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const s=e.getUint32(4,!0),n=e.getUint16(8,!0),r=e.getUint16(10,!0),a={version:i,recordCount:s,headerByteCount:n,recordByteCount:r};let l=32;const o=[],h=[];let c;if(3===i){for(;13!==e.getUint8(l);)c=String.fromCharCode(e.getUint8(l+11)).trim(),o.push({name:gt(new Uint8Array(t,l,11)),type:c,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(c)],length:e.getUint8(l+16)}),l+=32;if(l+=1,o.length>0)for(;h.length<s&&t.byteLength-l>r;){const i=[];32===e.getUint8(l)?(l+=1,o.forEach((e=>{if("C"===e.type)i.push(gt(new Uint8Array(t,l,e.length)).trim());else if("N"===e.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim(),10));else if("F"===e.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim()));else if("D"===e.type){const s=String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim();i.push(new Date(parseInt(s.substring(0,4),10),parseInt(s.substring(4,6),10)-1,parseInt(s.substring(6,8),10)))}l+=e.length})),h.push(i)):l+=r}}return{header:a,fields:o,records:h,recordSet:ke({fields:o,records:h})}}}const Pe=new Map;Pe.set("int16","esriFieldTypeSmallInteger"),Pe.set("int32","esriFieldTypeInteger"),Pe.set("int64","esriFieldTypeInteger"),Pe.set("float32","esriFieldTypeSingle"),Pe.set("float64","esriFieldTypeDouble"),Pe.set("text","esriFieldTypeString");const Ce=8;let De=class extends ye{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(t){await this.init();const{data:e}=await this.request(this.url+"/conf.json",{signal:t?.signal});if(!this._validateHeader(e))throw new n("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:s}=this._parseHeader(e);if("thematic"===s.dataType){const t=await this._fetchAuxiliaryInformation();s.attributeTable=t}this._set("storageInfo",i),this._set("rasterInfo",s),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(t,e,i,s={}){const{transposeInfo:n}=this.rasterInfo.storageInfo,{transposedVariableName:r}=s,a=!(!n||!r),l=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-t;if(l<0)return null;const o=this._buildCacheFilePath(l,e,i,s.multidimensionalDefinition,r),h=this._getIndexRecordFromBundle(e,i,a),c=await this.request(o,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:s.signal});if(!c)return null;const u=new Uint8Array(c.data),f=this._getTileEndAndContentType(u,h);if(0===f.recordSize)return null;const d=await this.request(o,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:s.signal});if(!d)return null;const[p,m]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:p,height:m,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(t){const e=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return t&&"RasterInfo"===t.type&&!e.some((e=>!t[e]))}_parseHeader(t){const e=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][t.pixelType],{bandCount:i,histograms:s,colormap:n,blockWidth:r,blockHeight:o,firstPyramidLevel:h,maximumPyramidLevel:c}=t,u=t.statistics&&t.statistics.map((t=>({min:t.min,max:t.max,avg:t.mean,stddev:t.standardDeviation,median:t.median,mode:t.mode}))),f=t.extent.spatialReference,d=t.geodataXform?.spatialReference,p=new w(f?.wkid||f?.wkt?f:d);let m=new l({xmin:t.extent.xmin,ymin:t.extent.ymin,xmax:t.extent.xmax,ymax:t.extent.ymax,spatialReference:p});const y=new a({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:p}),x=Math.round((m.xmax-m.xmin)/y.x),g=Math.round((m.ymax-m.ymin)/y.y),v=this._parseTransform(t.geodataXform),I=v?m:null;v&&(m=v.forwardTransform(m),y.x=(m.xmax-m.xmin)/x,y.y=(m.ymax-m.ymin)/g);const S=t.properties??{},b=t.format.toLowerCase().replace("cache/",""),R=new a(t.origin.x,t.origin.y,p);let M,T,k,F;if(n&&n.colors)for(M=[],T=0;T<n.colors.length;T++)k=n.colors[T],F=n.values?n.values[T]:T,M.push([F,255&k,k<<16>>>24,k<<8>>>24,k>>>24]);const P=t.LODInfos,C=[];for(T=0;T<P.levels.length;T++)C.push(new pt({level:P.levels[T],resolution:P.resolutions[T],scale:96/.0254*P.resolutions[T]}));const D=new dt({dpi:96,lods:C,format:b,origin:R,size:[r,o],spatialReference:p}),B={recordSize:Ce,packetSize:t.packetSize,headerSize:t.packetSize*t.packetSize*Ce+64},O=[{maxCol:Math.ceil(x/r)-1,maxRow:Math.ceil(g/o)-1,minCol:0,minRow:0}];let _=2;if(c>0)for(T=0;T<c;T++)O.push({maxCol:Math.ceil(x/_/r)-1,maxRow:Math.ceil(g/_/o)-1,minCol:0,minRow:0}),_*=2;const E=t.mdInfo;let A=null;if(E&&S._yxs){const t=S._yxs;A={packetSize:t.PacketSize,tileSize:[t.TileXSize,t.TileYSize]}}return{storageInfo:B,rasterInfo:new vt({width:x,height:g,pixelType:e,bandCount:i,extent:m,nativeExtent:I,transform:v,spatialReference:p,pixelSize:y,keyProperties:S,statistics:u,histograms:s,multidimensionalInfo:E,colormap:M,storageInfo:new yt({blockWidth:r,blockHeight:o,pyramidBlockWidth:r,pyramidBlockHeight:o,origin:R,tileInfo:D,transposeInfo:A,firstPyramidLevel:h,maximumPyramidLevel:c,blockBoundary:O})})}}_parseTransform(t){if(!le(t))throw new n("cloudraster:open","the data contains unsupported geodata transform types");const e=oe(t);if("identity"===e.type)return null;if("polynomial"!==e.type||!e.forwardCoefficients?.length||!e.inverseCoefficients?.length)throw new n("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return e}async _fetchAuxiliaryInformation(t){const e=this.request(this.url+"/conf.vat.json",{signal:t}).then((t=>t.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:t}).then((t=>t.data)).catch((()=>null)),s=await Promise.all([e,i]);let n;if(s[0]){let t=s[0].fields;const e=s[0].values;if(t&&e){t=t.map((t=>({type:"OID"===t.name?"esriFieldTypeOID":Pe.get(t.type),name:t.name,alias:t.alias||t.name})));const i=e.map((t=>({attributes:t})));t&&e&&(n={fields:t,features:i})}}if(!n&&s[1]){n=Fe.parse(s[1]).recordSet}return m.fromJSON(n)}_buildCacheFilePath(t,e,i,s,n){const r=this._getPackageSize(!!n),a=Math.floor(e/r)*r,l=Math.floor(i/r)*r,o="R"+this._toHexString4(a)+"C"+this._toHexString4(l);let h="L";h+=t>=10?t.toString():"0"+t.toString();const{multidimensionalInfo:c}=this.rasterInfo,u=s?.[0];if(null==c||!u)return`${this.url}/_alllayers/${h}/${o}.bundle`;let f="_yxs";if(!n){f=c.variables.find((t=>t.name===u.variableName)).dimensions[0].values.indexOf(u.values[0]).toString(16);const t=4-f.length;for(let e=0;e<t;e++)f="0"+f;f="S"+f}const d=this._getVariableFolderName(n||u.variableName);return`${this.url}/_alllayers/${d}/${f}/${h}/${o}.bundle`}_getPackageSize(t=!1){const{transposeInfo:e}=this.rasterInfo.storageInfo;return t&&null!=e?e.packetSize??0:this.storageInfo.packetSize}_getTileSize(t=!1){const{storageInfo:e}=this.rasterInfo,{transposeInfo:i}=e;return t&&null!=i?i.tileSize:e.tileInfo.size}_getVariableFolderName(t){return""===(t=t.trim())?"_v":t.replaceAll(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(t,e,i=!1){const s=this._getPackageSize(i),n=s*(t%s)+e%s;if(n<0)throw new Error("Invalid level / row / col");return 20+n*this.storageInfo.recordSize+44}_getTileEndAndContentType(t,e){const i=t.subarray(e,e+8);let s,n=0;for(s=0;s<5;s++)n|=(255&i[s])<<8*s;const r=0xffffffffff&n;for(n=0,s=5;s<8;s++)n|=(255&i[s])<<8*(s-5);return{position:r,recordSize:0xffffffffff&n}}_toHexString4(t){let e=t.toString(16);if(4!==e.length){let t=4-e.length;for(;t-- >0;)e="0"+e}return e}};u([f({readOnly:!0})],De.prototype,"storageInfo",void 0),u([f({type:String,json:{write:!0}})],De.prototype,"datasetFormat",void 0),De=u([p("esri.layers.support.rasterDatasets.CloudRaster")],De);const Be=De;let Oe=class extends ye{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(t){await this.init();const e=this.data,{pixelBlock:i,statistics:s,histograms:n,name:r,keyProperties:a,nativeExtent:o,transform:h}=this.data,{width:c,height:u,pixelType:f}=i,d=e.extent??new l({xmin:-.5,ymin:.5,xmax:c-.5,ymax:u-.5,spatialReference:new w({wkid:3857})}),p=e.isPseudoSpatialReference??!e.extent,m={x:d.width/c,y:d.height/u},y=new vt({width:c,height:u,pixelType:f,extent:d,nativeExtent:o,transform:h,pixelSize:m,spatialReference:d.spatialReference,bandCount:i.pixels.length,keyProperties:a||{},statistics:s,isPseudoSpatialReference:p,histograms:n});this.createRemoteDatasetStorageInfo(y,512,512),this._set("rasterInfo",y),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},t),this.datasetName=r,this.url="/InMemory/"+r}fetchRawTile(t,e,i,s={}){const n=this._pixelBlockTiles.get(`${t}/${e}/${i}`);return Promise.resolve(n)}async _buildInMemoryRaster(t,e,i){const s=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:s},i):Promise.resolve(Vt(t,e,s)),a=null!=this.rasterInfo.statistics,l=null!=this.rasterInfo.histograms,o=a?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},i):Promise.resolve(It(t)),h=await v([r,o]);if(!h[0].value&&h[1].value)throw new n("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=h[0].value,a||(this.rasterInfo.statistics=h[1].value?.statistics),l||(this.rasterInfo.histograms=h[1].value?.histograms)}};u([f({type:String,json:{write:!0}})],Oe.prototype,"datasetFormat",void 0),u([f()],Oe.prototype,"data",void 0),Oe=u([p("esri.layers.support.rasterDatasets.InMemoryRaster")],Oe);const _e=Oe;function Ee(t,e){if(!t||!e)return[];let i=e;e.includes("/")?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=[];if(e){const n=Ee(t,i);for(let t=0;t<n.length;t++){Ee(n[t],e).forEach((t=>s.push(t)))}return s}const n=t.getElementsByTagNameNS("*",i);if(!n||0===n.length)return[];for(let t=0;t<n.length;t++)s.push(n[t]||n.item(t));return s}function Ae(t,e){if(!t||!e)return null;let i=e;e.includes("/")?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=Ee(t,i);return s.length>0?e?Ae(s[0],e):s[0]:null}function Ne(t,e=null){const i=e?Ae(t,e):t;let s;return i?(s=i.textContent||i.nodeValue,s?s.trim():null):null}function je(t,e){const i=Ee(t,e),s=[];let n;for(let t=0;t<i.length;t++)n=i[t].textContent||i[t].nodeValue,n&&(n=n.trim(),""!==n&&s.push(n));return s}function ze(t,e){return je(t,e).map((t=>Number(t)))}function Le(t,e){const i=Ne(t,e);return Number(i)}function He(t,e){const i=t?.nodeName?.toLowerCase(),s=e.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===s}function Ge(t,e){if(!t||!e)return null;const i=[];for(let s=0;s<t.length;s++)i.push(t[s]),i.push(e[s]);return i}function We(t){const e=Ae(t,"GeodataXform"),i=Je(Le(e,"SpatialReference/WKID")||Ne(e,"SpatialReference/WKT"));if("typens:PolynomialXform"!==e.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const s=Le(e,"PolynomialOrder")??1,n=ze(e,"CoeffX/Double"),r=ze(e,"CoeffY/Double"),a=ze(e,"InverseCoeffX/Double"),l=ze(e,"InverseCoeffY/Double"),o=Ge(n,r),h=Ge(a,l);return{spatialReference:i,transform:o&&h&&o.length&&h.length?new he({spatialReference:i,polynomialOrder:s,forwardCoefficients:o,inverseCoefficients:h}):null}}function $e(t){const e=Le(t,"NoDataValue"),i=Ae(t,"Histograms/HistItem"),s=Le(i,"HistMin"),n=Le(i,"HistMax"),r=Le(i,"BucketCount"),a=Ne(i,"HistCounts")?.split("|").map((t=>Number(t)));let l,o,h,c;Ee(t,"Metadata/MDI").forEach((t=>{const e=Number(t.textContent??t.nodeValue);switch(t.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=e;break;case"STATISTICS_MAXIMUM":o=e;break;case"STATISTICS_MEAN":h=e;break;case"STATISTICS_STDDEV":c=e}}));const u=Le(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:a?.length&&null!=s&&null!=n?{min:s,max:n,size:r||a.length,counts:a}:null,sourceBandIndex:u,statistics:null!=l&&null!=o?{min:l,max:o,avg:h,stddev:c}:null}}function Je(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&0!==e)return new w({wkid:e});if((t=String(t)).startsWith("COMPD_CS")){if(!t.includes("VERTCS")||!t.includes("GEOGCS")&&!t.startsWith("PROJCS"))return null;const i=t.indexOf("VERTCS"),s=t.indexOf("PROJCS"),n=s>-1?s:t.indexOf("GEOGCS");if(-1===n)return null;const r=t.slice(n,t.lastIndexOf("]",i)+1).trim(),a=t.slice(i,t.lastIndexOf("]")).trim();e=Ue(r);const l=new w(e?{wkid:e}:{wkt:r}),o=Ue(a);return o&&(l.vcsWkid=o),l}return t.startsWith("GEOGCS")||t.startsWith("PROJCS")?(e=Ue(t),new w(0!==e?{wkid:e}:{wkt:t})):null}function Ue(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map((t=>t.trim())).filter((t=>""!==t)),i=e[e.length-1].split(","),s=i[0]?.toLowerCase();if(("epsg"===s||"esri"===s)&&t.endsWith('"]]')){const t=Number(i[1]);if(!isNaN(t)&&0!==t)return t}return 0}function Ve(t){if("pamdataset"!==t?.documentElement.tagName?.toLowerCase())return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach((t=>{if(1===t.nodeType)if(He(t,"SRS")){if(!e.spatialReference){const i=Ne(t);e.spatialReference=Je(i)}}else if(He(t,"Metadata"))if("xml:ESRI"===t.getAttribute("domain")){const{spatialReference:i,transform:s}=We(t);e.transform=s,e.spatialReference||(e.spatialReference=i)}else{Ee(t,"MDI").forEach((t=>e.metadata[t.getAttribute("key")]=Ne(t)))}else if(He(t,"PAMRasterBand")){const i=$e(t);null!=i.sourceBandIndex&&null==e.rasterBands[i.sourceBandIndex]?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}));const i=e.rasterBands;if(i.length){const t=!!i[0].statistics;e.statistics=t?i.map((t=>t.statistics)).filter(I):null;const s=!!i[0].histogram;e.histograms=s?i.map((t=>t.histogram)).filter(I):null}return e}let qe=class extends ye{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:i,statistics:s,histograms:n,transform:r}=await this._fetchAuxiliaryData(t);const a=!i;a&&(i=new w({wkid:3857})),n?.length&&null==s&&(s=St(n));const{width:o,height:h}=e;let c=new l({xmin:-.5,ymin:.5-h,xmax:o-.5,ymax:.5,spatialReference:i});const u=r?r.forwardTransform(c):c;let f=!0;if(r){const t=r.forwardCoefficients;f=t&&0===t[1]&&0===t[2],f&&(r=null,c=u)}const d=new _e({data:{extent:u,nativeExtent:c,transform:r,pixelBlock:e,statistics:s,histograms:n,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await d.open(),d.data=null,this._set("rasterInfo",d.rasterInfo),this._inMemoryRaster=d}fetchRawTile(t,e,i,s={}){return this._inMemoryRaster.fetchRawTile(t,e,i,s)}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),i=bt(e).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new n("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const s=i.toLowerCase(),r="gif"===s||"bmp"===s||!S("ios"),a=await this.decodePixelBlock(e,{format:s,useCanvas:r,hasNoZlibMask:!0});if(null==a)throw new n("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(t){const e=t?.signal,i=this.ioConfig.skipExtensions??[],s=i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),n=this.datasetFormat,r="JPG"===n?"jgw":"PNG"===n?"pgw":"BMP"===n?"bpw":null,a=r&&i.includes(r)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+r,{responseType:"text",signal:e}),l=await v([s,a]);if(e?.aborted)throw b();const o=Ve(l[0].value?.data);if(!o.transform){const t=l[1].value?l[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;o.transform=6===t?.length?new he({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null}return o}};u([f({type:String,json:{write:!0}})],qe.prototype,"datasetFormat",void 0),qe=u([p("esri.layers.support.rasterDatasets.ImageAuxRaster")],qe);const Xe=qe;let Ye=class extends ye{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(t){await this.init();const e=t&&t.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=i.data;if(this.sourceJSON=s,!s)throw new n("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new n("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const r=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=s.cacheType,null==this.tileType&&(r.includes(s.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===s.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name?.slice(s.name.indexOf("/")+1)??"";const a=await this._fetchRasterInfo({signal:e});if(null==a)throw new n("image-server-raster:open","cannot initialize image service");const l="Map"===this.tileType?Ke(s.tileInfo,s):dt.fromJSON(s.tileInfo);R(l);const[o,h]=this._computeMinMaxLOD(a,l),{extent:c,pixelSize:u}=a,f=.5/a.width*u.x,d=Math.max(u.x,u.y),{lods:p}=l;("Map"!==this.tileType&&0!==s.maxScale||Math.abs(u.x-u.y)>f||!p.some((t=>Math.abs(t.resolution-d)<f)))&&(u.x=u.y=o.resolution,a.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),a.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const m=o.level-h.level,[y,w]=l.size,x=[],g=[];p.forEach(((t,e)=>{t.level>=h.level&&t.level<=o.level&&x.push({x:t.resolution,y:t.resolution}),e<p.length-1&&g.push(Math.round(10*t.resolution/p[e+1].resolution)/10)})),x.sort(((t,e)=>t.x-e.x));const v=this.computeBlockBoundary(c,y,w,l.origin,x,m),I=x.length>1?x.slice(1):null;let S;s.transposeInfo&&(S={tileSize:[s.transposeInfo.rows,s.transposeInfo.cols],packetSize:a.keyProperties?._yxs.PacketSize??0});const b=g.length<=1||g.length>=3&&g.slice(0,g.length-1).every((t=>t===g[0]))?g[0]??2:Math.round(10/(h.resolution/o.resolution)**(-1/m))/10;if(a.storageInfo=new yt({blockWidth:l.size[0],blockHeight:l.size[1],pyramidBlockWidth:l.size[0],pyramidBlockHeight:l.size[1],pyramidResolutions:I,pyramidScalingFactor:b,compression:l.format,origin:l.origin,firstPyramidLevel:1,maximumPyramidLevel:m,tileInfo:l,transposeInfo:S,blockBoundary:v}),this._fixGCSShift(a),this._set("rasterInfo",a),s.capabilities.toLowerCase().includes("tilemap")){const t={tileInfo:a.storageInfo.tileInfo,parsedUrl:M(this.url),url:this.url,tileServers:[]};this._tilemapCache=new fe({layer:t})}}async fetchRawTile(t,e,i,s={}){const{storageInfo:n,extent:r}=this.rasterInfo,{transposeInfo:a}=n,l=null!=a&&!!s.transposedVariableName;if(this._slices&&!l&&null==s.sliceId)return null;const o=l?0:n.maximumPyramidLevel-t+this._levelOffset,h=`${this.url}/tile/${o}/${e}/${i}`,c=this._slices?l?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:u}=await this.request(h,{query:c,responseType:"array-buffer",signal:s.signal});if(!u)return null;const f=l?a.tileSize:n.tileInfo.size,d=await this.decodePixelBlock(u,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(null==d)return null;const p=n.blockBoundary[t];if("jpg"!==n.compression||i>p.minCol&&i<p.maxCol&&e>p.minRow&&e<p.maxRow)return d;const{origin:m,blockWidth:y,blockHeight:w}=n,{x,y:g}=this.getPyramidPixelSize(t),v=Math.round((r.xmin-m.x)/x)%y,I=Math.round((r.xmax-m.x)/x)%y||y,S=Math.round((m.y-r.ymax)/g)%w,b=Math.round((m.y-r.ymin)/g)%w||w,R=i===p.minCol?v:0,M=e===p.minRow?S:0,T=i===p.maxCol?I:y,k=e===p.maxRow?b:w;return qt(d,{x:R,y:M},{width:T-R,height:k-M}),d}getSliceIndex(t){if(!this._slices||null==t||0===t.length)return null;const e=t;for(let t=0;t<this._slices.length;t++){const i=this._slices[t].multidimensionalDefinition;if(i.length===e.length&&!i.some((t=>{const i=e.find((e=>t.variableName===e.variableName&&e.dimensionName===t.dimensionName));if(!i)return!0;return(Array.isArray(t.values[0])?`${t.values[0][0]}-${t.values[0][1]}`:t.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return t}return null}async fetchVariableStatisticsHistograms(t,e){const i=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then((t=>t.data?.statistics)),s=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then((t=>t.data?.histograms)),n=await Promise.all([i,s]);return n[0]&&n[0].forEach((t=>{t.avg=t.mean,t.stddev=t.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(t,0,e.datumTransformation);if(null===i)return null;let s=0;const{maximumPyramidLevel:n}=this.rasterInfo.storageInfo;let r=n-s+this._levelOffset;const a=i.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,i.row,i.col,e))break}catch{}if(r--,s++,i=this.identifyPixelLocation(a,s,e.datumTransformation),null===i)return null}return-1===r||null==i?null:s}async _fetchRasterInfo(t){const e=this.sourceJSON;if("Map"===this.tileType){const t=e.fullExtent||e.extent,i=Math.ceil((t.xmax-t.xmin)/e.pixelSizeX-.1),s=Math.ceil((t.ymax-t.ymin)/e.pixelSizeY-.1),n=w.fromJSON(e.spatialReference||t.spatialReference),r=new a({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:n});return new vt({width:i,height:s,bandCount:3,extent:l.fromJSON(t),spatialReference:n,pixelSize:r,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=t,s=it(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),n=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((t=>t.data&&t.data.slices)).catch((()=>null)):null,r=await Promise.all([s,n]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_fixGCSShift(t){const{extent:e,spatialReference:i}=t;e.xmin>-1&&e.xmax>181&&i?.wkid&&i.isGeographic&&(t.nativeExtent=t.extent,t.transform=new ce,t.extent=t.transform.forwardTransform(e))}_computeMinMaxLOD(t,e){const{pixelSize:i}=t,s=.5/t.width*i.x,{lods:n}=e,r=e.lodAt(Math.max.apply(null,n.map((t=>t.level)))),a=e.lodAt(Math.min.apply(null,n.map((t=>t.level)))),{tileType:l}=this;if("Map"===l)return this._levelOffset=n[0].level,[r,a];if("Raster"===l){return[n.find((t=>t.resolution===i.x))??r,a]}const{minScale:o,maxScale:h}=this.sourceJSON;let c=r;h>0&&(c=n.find((t=>Math.abs(t.scale-h)<s)),c||(c=n.filter((t=>t.scale>h)).sort(((t,e)=>t.scale>e.scale?1:-1))[0]??r));let u=a;return o>0&&(u=n.find((t=>Math.abs(t.scale-o)<s))??a,this._levelOffset=u.level-a.level),[c,u]}};function Ke(t,e){if(!t)return null;const{minScale:i,maxScale:s,minLOD:n,maxLOD:r}=e;if(null!=n&&null!=r)return dt.fromJSON({...t,lods:t.lods.filter((({level:t})=>null!=t&&t>=n&&t<=r))});if(0!==i&&0!==s){const e=t=>Math.round(1e4*t)/1e4,n=i?e(i):1/0,r=s?e(s):-1/0;return dt.fromJSON({...t,lods:t.lods.filter((t=>{const i=e(t.scale);return i<=n&&i>=r}))})}return dt.fromJSON(t)}u([f({type:String,json:{write:!0}})],Ye.prototype,"datasetFormat",void 0),u([f()],Ye.prototype,"tileType",void 0),Ye=u([p("esri.layers.support.rasterDatasets.ImageServerRaster")],Ye);const Qe=Ye;const Ze=new Map;Ze.set("Int8","s8"),Ze.set("UInt8","u8"),Ze.set("Int16","s16"),Ze.set("UInt16","u16"),Ze.set("Int32","s32"),Ze.set("UInt32","u32"),Ze.set("Float32","f32"),Ze.set("Float64","f32"),Ze.set("Double64","f32");const ti=new Map;ti.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),ti.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),ti.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),ti.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let ei=class extends ye{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(t){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,i=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:s,files:n}=this._parseHeader(i.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const e=await this._fetchAuxiliaryData(t);null!=e&&(s.statistics=e.statistics??s.statistics,s.histograms=e.histograms,e.histograms&&null==s.statistics&&(s.statistics=St(e.histograms)))}this._set("rasterInfo",s),this._files=n;const r=await this.request(n.index,{responseType:"array-buffer",signal:e});this._storageIndex=this._parseIndex(r.data);const{blockWidth:a,blockHeight:l}=this.rasterInfo.storageInfo,o=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:c}=this.rasterInfo,u=[],f=this._getBandSegmentCount();let d=0,p=-1;for(;d<this._storageIndex.length;){p++;const t=Math.ceil(h/a/o**p)-1,e=Math.ceil(c/l/o**p)-1;d+=(t+1)*(e+1)*f*4,u.push({maxRow:e,maxCol:t,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=u,p>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=p),this.updateTileInfo()}async fetchRawTile(t,e,i,s={}){const{blockWidth:n,blockHeight:r,blockBoundary:a}=this.rasterInfo.storageInfo,l=a[t];if(!l||l.maxRow<e||l.maxCol<i||l.minRow>e||l.minCol>i)return null;const{bandCount:o,pixelType:h}=this.rasterInfo,{ranges:c,actualTileWidth:u,actualTileHeight:f}=this._getTileLocation(t,e,i);if(!c||0===c.length)return null;if(0===c[0].from&&0===c[0].to){const t=new Uint8Array(n*r);return new $t({width:n,height:r,pixels:null,mask:t,validPixelCount:0})}const{bandIds:d}=this.ioConfig,p=this._getBandSegmentCount(),m=[];let y=0;for(y=0;y<p;y++)d&&!d.includes(y)||m.push(this.request(this._files.data,{range:{from:c[y].from,to:c[y].to},responseType:"array-buffer",signal:s.signal}));const w=await Promise.all(m),x=w.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),g=new Uint8Array(x);let v=0;for(y=0;y<p;y++)g.set(new Uint8Array(w[y].data),v),v+=w[y].data.byteLength;const I=ti.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(g.buffer,{width:n,height:r,format:I,planes:d?.length||o,pixelType:h});if(null==S)return null;let{noDataValue:b}=this.rasterInfo;if(null!=b&&"lerc"!==I&&!S.mask&&(b=b[0],null!=b)){const t=S.width*S.height,e=new Uint8Array(t);if(Math.abs(b)>1e24)for(y=0;y<t;y++)Math.abs((S.pixels[0][y]-b)/b)>1e-6&&(e[y]=1);else for(y=0;y<t;y++)S.pixels[0][y]!==b&&(e[y]=1);S.mask=e}let R=0,M=0;if(u!==n||f!==r){let t=S.mask;if(t)for(y=0;y<r;y++)if(M=y*n,y<f)for(R=u;R<n;R++)t[M+R]=0;else for(R=0;R<n;R++)t[M+R]=0;else for(t=new Uint8Array(n*r),S.mask=t,y=0;y<f;y++)for(M=y*n,R=0;R<u;R++)t[M+R]=1}return S}_parseIndex(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,i,s,n,r,a;if(Rt){for(i=new Uint8Array(t),n=new ArrayBuffer(t.byteLength),s=new Uint8Array(n),r=0;r<t.byteLength/4;r++)for(a=0;a<4;a++)s[4*r+a]=i[4*r+3-a];e=new Uint32Array(n)}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return ti.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,i){const{blockWidth:s,blockHeight:n,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:a,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let h,c,u,f=0,d=0;for(u=0;u<t;u++)d=r**u,h=Math.ceil(a/s/d),c=Math.ceil(l/n/d),f+=h*c;d=r**t,h=Math.ceil(a/s/d),c=Math.ceil(l/n/d),f+=e*h+i,f*=4*o;const p=this._storageIndex.subarray(f,f+4*o);let m=0,y=0;const w=[];for(let t=0;t<o;t++)m=p[4*t]*2**32+p[4*t+1],y=m+p[4*t+2]*2**32+p[4*t+3],w.push({from:m,to:y});return{ranges:w,actualTileWidth:i<h-1?s:Math.ceil(a/d)-s*(h-1),actualTileHeight:e<c-1?n:Math.ceil(l/d)-n*(c-1)}}_parseHeader(t){const e=Ae(t,"MRF_META/Raster");if(!e)throw new n("mrf:open","not a valid MRF format");const i=Ae(e,"Size"),s=parseInt(i.getAttribute("x"),10),r=parseInt(i.getAttribute("y"),10),o=parseInt(i.getAttribute("c"),10),h=(Ne(e,"Compression")||"none").toLowerCase();if(!ti.has(h))throw new n("mrf:open","currently does not support compression "+h);const c=Ne(e,"DataType")||"UInt8",u=Ze.get(c);if(null==u)throw new n("mrf:open","currently does not support pixel type "+c);const f=Ae(e,"PageSize"),d=parseInt(f.getAttribute("x"),10),p=parseInt(f.getAttribute("y"),10),m=Ae(e,"DataValues");let y,x;m&&(x=m.getAttribute("NoData"),null!=x&&(y=x.trim().split(" ").map((t=>parseFloat(t)))));if(Ae(t,"MRF_META/CachedSource"))throw new n("mrf:open","currently does not support MRF referencing other data files");const g=Ae(t,"MRF_META/GeoTags"),v=Ae(g,"BoundingBox");let I,S=!1;if(null!=v){const t=parseFloat(v.getAttribute("minx")),e=parseFloat(v.getAttribute("miny")),i=parseFloat(v.getAttribute("maxx")),s=parseFloat(v.getAttribute("maxy")),n=Ne(g,"Projection")||"";let r=w.WGS84;if("LOCAL_CS[]"!==n)if(n.toLowerCase().startsWith("epsg:")){const t=Number(n.slice(5));isNaN(t)||0===t||(r=new w({wkid:t}))}else r=Je(n)??w.WGS84;else S=!0,r=new w({wkid:3857});I=new l(t,e,i,s),I.spatialReference=r}else S=!0,I=new l({xmin:-.5,ymin:.5-r,xmax:s-.5,ymax:.5,spatialReference:new w({wkid:3857})});const b=Ae(t,"MRF_META/Rsets"),R=parseInt(b&&b.getAttribute("scale")||"2",10),M=I.spatialReference,T=new yt({origin:new a({x:I.xmin,y:I.ymax,spatialReference:M}),blockWidth:d,blockHeight:p,pyramidBlockWidth:d,pyramidBlockHeight:p,compression:h,pyramidScalingFactor:R}),k=new a({x:I.width/s,y:I.height/r,spatialReference:M}),F=new vt({width:s,height:r,extent:I,isPseudoSpatialReference:S,spatialReference:M,bandCount:o,pixelType:u,pixelSize:k,noDataValue:y,storageInfo:T}),P=Ne(t,"datafile"),C=Ne(t,"IndexFile");return{rasterInfo:F,files:{mrf:this.url,index:C||this.url.replace(".mrf",".idx"),data:P||this.url.replace(".mrf",ti.get(h).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ve(e)}catch{return null}}};u([f()],ei.prototype,"_files",void 0),u([f()],ei.prototype,"_storageIndex",void 0),u([f({type:String,json:{write:!0}})],ei.prototype,"datasetFormat",void 0),ei=u([p("esri.layers.support.rasterIO.MRFRaster")],ei);const ii=ei;const si=(t,e)=>t.get(e)?.values,ni=(t,e)=>t.get(e)?.values?.[0];let ri=class extends ye{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(t){await this.init();const e=t?t.signal:null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!i)throw new n("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:s,firstIFDPos:r,isBigTiff:a}=Mt(i),l=[];await this._readIFDs(l,i,s,r,0,a?8:4,e);const{imageInfo:o,rasterInfo:h}=this._parseIFDs(l),c=Tt(l),u=kt(l);if(this._headerInfo={littleEndian:s,isBigTiff:a,ifds:l,pyramidIFDs:c,maskIFDs:u,...o},this._set("rasterInfo",h),!o.isSupported)throw new n("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new n("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const f=l[0].get("PREDICTOR")?.values?.[0],d=l[0].get("SAMPLEFORMAT")?.values?.[0];if(3===d&&2===f)throw new n("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floatting point data");const{skipExtensions:p=[]}=this.ioConfig;if(!p.includes("aux.xml")){const e=await this._fetchAuxiliaryMetaData(t);null!=e&&this._processPAMInfo(e,h)}p.includes("vat.dbf")||1!==h.bandCount||"u8"!==h.pixelType||(h.attributeTable=await this._fetchAuxiliaryTable(t),null!=h.attributeTable&&(h.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(t,e,i,s={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,i))return null;const n=await this._fetchRawTiffTile(t,e,i,!1,s);if(null!=n&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,i,!0,s);null!=r&&r.pixels[0]instanceof Uint8Array&&(n.mask=r.pixels[0])}return n}_parseIFDs(t){const e=Ft(t),{width:i,height:s,tileWidth:n,tileHeight:r,planes:o,pixelType:h,compression:c,firstPyramidLevel:u,maximumPyramidLevel:f,pyramidBlockWidth:d,pyramidBlockHeight:p,tileBoundary:m,affine:y,metadata:x}=e,g=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let v=Je(g),I=!!e.isPseudoGeographic;null==v&&(I=!0,v=new w({wkid:3857}));const S=new l({...e.extent,spatialReference:v}),b=new a(S?{x:S.xmin,y:S.ymax,spatialReference:v}:{x:0,y:0}),R=new yt({blockWidth:n,blockHeight:r,pyramidBlockWidth:d,pyramidBlockHeight:p,compression:c,origin:b,firstPyramidLevel:u,maximumPyramidLevel:f,blockBoundary:m}),M=new a({x:(S.xmax-S.xmin)/i,y:(S.ymax-S.ymin)/s,spatialReference:v}),T=x?{BandProperties:x.bandProperties,DataType:x.dataType}:{};let k=null;const F=ni(t[0],"PHOTOMETRICINTERPRETATION"),P=si(t[0],"COLORMAP");if(F<=3&&P?.length>3&&P.length%3==0){k=[];const t=P.length/3;for(let e=0;e<t;e++)k.push([e,P[e]>>>8,P[e+t]>>>8,P[e+2*t]>>>8])}const C=new vt({width:i,height:s,bandCount:o,pixelType:h,pixelSize:M,storageInfo:R,spatialReference:v,isPseudoSpatialReference:I,keyProperties:T,extent:S,colormap:k,statistics:x?x.statistics:null});return y?.length&&(C.nativeExtent=new l({xmin:-.5,ymin:.5-s,xmax:i-.5,ymax:.5,spatialReference:v}),C.transform=new he({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),C.extent=C.transform.forwardTransform(C.nativeExtent),C.pixelSize=new a({x:(S.xmax-S.xmin)/i,y:(S.ymax-S.ymin)/s,spatialReference:v}),R.origin.x=-.5,R.origin.y=.5),{imageInfo:e,rasterInfo:C}}_processPAMInfo(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&null==e.statistics&&(e.statistics=St(t.histograms)),t.transform&&null==e.transform){e.transform=t.transform,e.nativeExtent=e.extent;const i=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new a({x:(i.xmax-i.xmin)/e.width,y:(i.ymax-i.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=i}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}async _readIFDs(t,e,i,s,n,r=4,a){if(!s)return null;if(s>=e.byteLength||s<0){e=(await this.request(this.url,{range:{from:s+n,to:s+n+this._bufferSize},responseType:"array-buffer",signal:a})).data,n=s+n,s=0}const l=await this._readIFD(e,i,s,n,Pt.TIFF_TAGS,r,a);if(t.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(t,e,i,l.nextIFD-n,n,r,a)}async _readIFD(t,e,i,s,n=Pt.TIFF_TAGS,r=4,a){if(!t)return null;const l=Ct(t,e,i,s,n,r);if(l.success){const i=[];if(l.ifd?.forEach((t=>{t.values||i.push(t)})),i.length>0){const n=i.map((t=>t.offlineOffsetSize)).filter(I),r=Math.min.apply(null,n.map((t=>t[0])));if(Math.min.apply(null,n.map((t=>t[0]+t[1])))-r<=this._bufferSize){const{data:n}=await this.request(this.url,{range:{from:r,to:r+this._bufferSize},responseType:"array-buffer",signal:a});t=n,s=r,i.forEach((i=>Dt(t,e,i,s)))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const i=l.ifd.get("GEOKEYDIRECTORY"),n=i?.values;if(n&&n.length>4){const r=n[0]+"."+n[1]+"."+n[2],l=await this._readIFD(t,e,i.valueOffset+6-s,s,Pt.GEO_KEYS,2,a);i.data=l.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[r]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==t.byteLength){const i=await this.request(this.url,{range:{from:s,to:s+l.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(t=i.data).byteLength<l.requiredBufferSize?null:this._readIFD(t,e,0,s,Pt.TIFF_TAGS,4,a)}}async _fetchRawTiffTile(t,e,i,s,n={}){const r=this._getTileLocation(t,e,i,s);if(!r)return null;const{ranges:a,actualTileWidth:l,actualTileHeight:o,ifd:h}=r,c=a.map((t=>this.request(this.url,{range:t,responseType:"array-buffer",signal:n.signal}))),u=await Promise.all(c),f=u.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),d=1===u.length?u[0].data:new ArrayBuffer(f),p=[0],m=[0];if(u.length>1){const t=new Uint8Array(d);for(let e=0,i=0;e<u.length;e++){const s=u[e].data;t.set(new Uint8Array(s),i),p[e]=i,i+=s.byteLength,m[e]=s.byteLength}}const{blockWidth:y,blockHeight:w}=this.getBlockWidthHeight(t),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:h,offsets:p,sizes:m},width:y,height:w,planes:null,pixelType:null});if(null==x)return null;let g,v,I;if(l!==y||o!==w){let t=x.mask;if(t)for(g=0;g<w;g++)if(I=g*y,g<o)for(v=l;v<y;v++)t[I+v]=0;else for(v=0;v<y;v++)t[I+v]=0;else for(t=new Uint8Array(y*w),x.mask=t,g=0;g<o;g++)for(I=g*y,v=0;v<l;v++)t[I+v]=1}return x}_getTileLocation(t,e,i,s=!1){const{firstPyramidLevel:n,blockBoundary:r}=this.rasterInfo.storageInfo,a=0===t?0:t-(n-1),{_headerInfo:l}=this;if(!l)return null;const o=s?l.maskIFDs[a]:0===a?l?.ifds[0]:l?.pyramidIFDs[a-1];if(!o)return null;const h=Bt(o,l),c=si(o,"TILEOFFSETS");if(void 0===c)return null;const u=si(o,"TILEBYTECOUNTS"),{minRow:f,minCol:d,maxRow:p,maxCol:m}=r[a];if(e>p||i>m||e<f||i<d)return null;const y=ni(o,"IMAGEWIDTH"),w=ni(o,"IMAGELENGTH"),x=ni(o,"TILEWIDTH"),g=ni(o,"TILELENGTH"),v=[];if(h){const{bandCount:t}=this.rasterInfo;for(let s=0;s<t;s++){const t=s*(p+1)*(m+1)+e*(m+1)+i;v[s]={from:c[t],to:c[t]+u[t]-1}}}else{const t=e*(m+1)+i;v.push({from:c[t],to:c[t]+u[t]-1})}for(let t=0;t<v.length;t++)if(null==v[t].from||!v[t].to)return null;return{ranges:v,ifd:o,actualTileWidth:i===m&&y%x||x,actualTileHeight:e===p&&w%g||g}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ve(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),i=Fe.parse(e);return i?.recordSet?m.fromJSON(i.recordSet):null}catch{return null}}};u([f()],ri.prototype,"_files",void 0),u([f()],ri.prototype,"_headerInfo",void 0),u([f()],ri.prototype,"_bufferSize",void 0),u([f({type:String,json:{write:!0}})],ri.prototype,"datasetFormat",void 0),ri=u([p("esri.layers.support.rasterDatasets.TIFFRaster")],ri);const ai=ri;const li=new Map;li.set("CRF",{desc:"Cloud Raster Format",constructor:Be}),li.set("MRF",{desc:"Meta Raster Format",constructor:ii}),li.set("TIFF",{desc:"GeoTIFF",constructor:ai}),li.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Qe}),li.set("JPG",{desc:"JPG Raster Format",constructor:Xe}),li.set("PNG",{desc:"PNG Raster Format",constructor:Xe}),li.set("GIF",{desc:"GIF Raster Format",constructor:Xe}),li.set("BMP",{desc:"BMP Raster Format",constructor:Xe});class oi{static get supportedFormats(){const t=new Set;return li.forEach(((e,i)=>t.add(i))),t}static async open(t){const{url:e,ioConfig:i,sourceJSON:s}=t;let r=t.datasetFormat;null==r&&e.lastIndexOf(".")&&(r=e.slice(e.lastIndexOf(".")+1).toUpperCase()),"OVR"===r||"TIF"===r?r="TIFF":"JPG"!==r&&"JPEG"!==r&&"JFIF"!==r||(r="JPG"),e.toLowerCase().includes("/imageserver")&&!e.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const a={url:e,sourceJSON:s,datasetFormat:r,ioConfig:i??{bandIds:null,sampling:null}};let l,o;if(r&&this.supportedFormats.has(r)){if("CRF"===r&&!i?.enableCRF)throw new n("rasterfactory:open",`cannot open raster: ${e}`);return l=li.get(r).constructor,o=new l(a),await o.open({signal:t.signal}),o}if(r)throw new n("rasterfactory:open","not a supported format "+r);const h=Array.from(li.keys());let c=0;const u=()=>(r=h[c++],r&&("CRF"!==r||i?.enableCRF)?(l=li.get(r).constructor,o=new l(a),o.open({signal:t.signal}).then((()=>o)).catch((()=>u()))):null);return u()}static register(t,e,i){li.has(t.toUpperCase())||li.set(t.toUpperCase(),{desc:e,constructor:i})}}let hi=class extends(T(k(F(P(C(Te(D(B(O(_(E))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(t,e){return"string"==typeof t?{url:t,...e}:t}load(t){const e=null!=t?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(A).then((()=>this._openRaster(e)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[new N({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new N({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],{rasterInfo:e}=this,i=e?.attributeTable,s=null!=i?i.fields:null,n="Raster.";if(s){const e=s.filter((t=>"oid"!==t.type&&"value"!==t.name.toLowerCase())).map((t=>{const e=t.clone();return e.name=n+t.name,e}));t.push(...e)}const r=e?.dataType,a=e?.multidimensionalInfo;if(("vector-magdir"===r||"vector-uv"===r)&&null!=a){const e=a.variables[0].unit?.trim(),i="Magnitude"+(e?` (${e})`:"");t.push(new N({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),t.push(new N({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return t}createPopupTemplate(t){const{rasterFields:e}=this,i=new Set(e.map((({name:t})=>t)).filter((t=>"raster.servicepixelvalue.raw"!==t.toLowerCase())));return j({fields:e,title:this.title},{...t,visibleFieldNames:i})}async generateRasterInfo(t,e){if(!(t=r(J,t)))return this.rasterInfo;try{const i={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((t=>i[t.url]=t));const s=ae(t.functionDefinition?.toJSON()??t.toJSON(),i),n=new xe({rasterFunction:s});return await n.open(e),n.rasterInfo}catch(t){if(t instanceof n)throw t;throw new n("imagery-tile-layer","the given raster function is not supported")}}write(t,e){const i=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e&&e.messages){const t=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new n("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${t}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),"Function"===this.raster.datasetFormat?(e=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else{const{rasterFunction:e}=this,i=[this.url];e&&ue(e.toJSON(),i);const r=await Promise.all(i.map((e=>oi.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t})))),a=r.findIndex((t=>null==t));if(a>-1)throw new n("imagery-tile-layer:open",`cannot open raster: ${i[a]}`);if(this._primaryRasters=r,e){const t={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>t[e.url]=e));const i=ae(e.functionDefinition?.toJSON()??e.toJSON(),t),a=new xe({rasterFunction:i});try{await a.open(),this.raster=a}catch(t){const e=s.getLogger(this);t instanceof n&&e.error("imagery-tile-layer:open",t.message),e.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=r[0]}}else this.raster=r[0]}const i=this.raster.rasterInfo;if(!i)throw new n("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",e?i:this._primaryRasters[0].rasterInfo),this._set("spatialReference",i.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const t="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(t,{origin:"service"})}else this.read({tileInfo:this.rasterInfo.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(z((()=>this.customParameters),(t=>{this.raster&&(this.raster.ioConfig.customFetchParameters=t)})))}};u([f()],hi.prototype,"_primaryRasters",void 0),u([f({type:[L],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],hi.prototype,"bandIds",void 0),u([f({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),H(st)],hi.prototype,"interpolation",void 0),u([f(G)],hi.prototype,"legendEnabled",void 0),u([f({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],hi.prototype,"isReference",void 0),u([f({type:["show","hide"]})],hi.prototype,"listMode",void 0),u([f({json:{read:!0,write:!0}})],hi.prototype,"blendMode",void 0),u([f()],hi.prototype,"sourceJSON",void 0),u([f({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],hi.prototype,"version",void 0),u([f({readOnly:!0,json:{read:!1}})],hi.prototype,"type",void 0),u([f({type:["ArcGISTiledImageServiceLayer"]})],hi.prototype,"operationalLayerType",void 0),u([f({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(t,e,i){e[i]=!t}}}})],hi.prototype,"popupEnabled",void 0),u([f({type:W,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],hi.prototype,"popupTemplate",void 0),u([f({readOnly:!0})],hi.prototype,"defaultPopupTemplate",null),u([f({readOnly:!0,type:[N]})],hi.prototype,"fields",void 0),u([f({readOnly:!0,type:[N]})],hi.prototype,"rasterFields",null),hi=u([p("esri.layers.ImageryTileLayer")],hi);const ci=hi;export default ci;
//# sourceMappingURL=p-1cb85031.js.map